

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Mar 30 00:48:41 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           	psect	idataCOMRAM
    71  00DB8B                     __pidataCOMRAM:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _wrap
    75  00DB8B  01                 	db	1
    76                           
    77                           ;initializer for _EWLT_Count
    78  00DB8C  30                 	db	48
    79  00DB8D  30                 	db	48
    80  00DB8E  00                 	db	0
    81                           
    82                           ;initializer for _EW_Count
    83  00DB8F  30                 	db	48
    84  00DB90  30                 	db	48
    85  00DB91  00                 	db	0
    86                           
    87                           ;initializer for _NSLT_Count
    88  00DB92  30                 	db	48
    89  00DB93  30                 	db	48
    90  00DB94  00                 	db	0
    91                           
    92                           ;initializer for _NS_Count
    93  00DB95  30                 	db	48
    94  00DB96  30                 	db	48
    95  00DB97  00                 	db	0
    96                           
    97                           ;initializer for _PED_EW_Count
    98  00DB98  30                 	db	48
    99  00DB99  30                 	db	48
   100  00DB9A  00                 	db	0
   101                           
   102                           ;initializer for _PED_NS_Count
   103  00DB9B  30                 	db	48
   104  00DB9C  30                 	db	48
   105  00DB9D  00                 	db	0
   106                           
   107                           ;initializer for _Act_Mode_Txt
   108  00DB9E  44                 	db	68
   109  00DB9F  00                 	db	0
   110                           
   111                           ;initializer for _FlashingR_Txt
   112  00DBA0  30                 	db	48
   113  00DBA1  00                 	db	0
   114                           
   115                           ;initializer for _FlashingS_Txt
   116  00DBA2  30                 	db	48
   117  00DBA3  00                 	db	0
   118                           
   119                           ;initializer for _SW_EWLT_Txt
   120  00DBA4  30                 	db	48
   121  00DBA5  00                 	db	0
   122                           
   123                           ;initializer for _SW_EWPED_Txt
   124  00DBA6  30                 	db	48
   125  00DBA7  00                 	db	0
   126                           
   127                           ;initializer for _SW_MODE_Txt
   128  00DBA8  44                 	db	68
   129  00DBA9  00                 	db	0
   130                           
   131                           ;initializer for _SW_NSLT_Txt
   132  00DBAA  30                 	db	48
   133  00DBAB  00                 	db	0
   134                           
   135                           ;initializer for _SW_NSPED_Txt
   136  00DBAC  30                 	db	48
   137  00DBAD  00                 	db	0
   138                           
   139                           	psect	mediumconst
   140  00FDBA                     __pmediumconst:
   141                           	opt stack 0
   142  00FDBA  00                 	db	0
   143  00FDBB                     _font:
   144                           	opt stack 0
   145  00FDBB  00                 	db	0
   146  00FDBC  00                 	db	0
   147  00FDBD  00                 	db	0
   148  00FDBE  00                 	db	0
   149  00FDBF  00                 	db	0
   150  00FDC0  00                 	db	0
   151  00FDC1  00                 	db	0
   152  00FDC2  5F                 	db	95
   153  00FDC3  00                 	db	0
   154  00FDC4  00                 	db	0
   155  00FDC5  00                 	db	0
   156  00FDC6  07                 	db	7
   157  00FDC7  00                 	db	0
   158  00FDC8  07                 	db	7
   159  00FDC9  00                 	db	0
   160  00FDCA  14                 	db	20
   161  00FDCB  7F                 	db	127
   162  00FDCC  14                 	db	20
   163  00FDCD  7F                 	db	127
   164  00FDCE  14                 	db	20
   165  00FDCF  24                 	db	36
   166  00FDD0  2A                 	db	42
   167  00FDD1  7F                 	db	127
   168  00FDD2  2A                 	db	42
   169  00FDD3  12                 	db	18
   170  00FDD4  23                 	db	35
   171  00FDD5  13                 	db	19
   172  00FDD6  08                 	db	8
   173  00FDD7  64                 	db	100
   174  00FDD8  62                 	db	98
   175  00FDD9  36                 	db	54
   176  00FDDA  49                 	db	73
   177  00FDDB  56                 	db	86
   178  00FDDC  20                 	db	32
   179  00FDDD  50                 	db	80
   180  00FDDE  00                 	db	0
   181  00FDDF  08                 	db	8
   182  00FDE0  07                 	db	7
   183  00FDE1  03                 	db	3
   184  00FDE2  00                 	db	0
   185  00FDE3  00                 	db	0
   186  00FDE4  1C                 	db	28
   187  00FDE5  22                 	db	34
   188  00FDE6  41                 	db	65
   189  00FDE7  00                 	db	0
   190  00FDE8  00                 	db	0
   191  00FDE9  41                 	db	65
   192  00FDEA  22                 	db	34
   193  00FDEB  1C                 	db	28
   194  00FDEC  00                 	db	0
   195  00FDED  2A                 	db	42
   196  00FDEE  1C                 	db	28
   197  00FDEF  7F                 	db	127
   198  00FDF0  1C                 	db	28
   199  00FDF1  2A                 	db	42
   200  00FDF2  08                 	db	8
   201  00FDF3  08                 	db	8
   202  00FDF4  3E                 	db	62
   203  00FDF5  08                 	db	8
   204  00FDF6  08                 	db	8
   205  00FDF7  00                 	db	0
   206  00FDF8  80                 	db	128
   207  00FDF9  70                 	db	112
   208  00FDFA  30                 	db	48
   209  00FDFB  00                 	db	0
   210  00FDFC  08                 	db	8
   211  00FDFD  08                 	db	8
   212  00FDFE  08                 	db	8
   213  00FDFF  08                 	db	8
   214  00FE00  08                 	db	8
   215  00FE01  00                 	db	0
   216  00FE02  00                 	db	0
   217  00FE03  60                 	db	96
   218  00FE04  60                 	db	96
   219  00FE05  00                 	db	0
   220  00FE06  20                 	db	32
   221  00FE07  10                 	db	16
   222  00FE08  08                 	db	8
   223  00FE09  04                 	db	4
   224  00FE0A  02                 	db	2
   225  00FE0B  3E                 	db	62
   226  00FE0C  51                 	db	81
   227  00FE0D  49                 	db	73
   228  00FE0E  45                 	db	69
   229  00FE0F  3E                 	db	62
   230  00FE10  00                 	db	0
   231  00FE11  42                 	db	66
   232  00FE12  7F                 	db	127
   233  00FE13  40                 	db	64
   234  00FE14  00                 	db	0
   235  00FE15  72                 	db	114
   236  00FE16  49                 	db	73
   237  00FE17  49                 	db	73
   238  00FE18  49                 	db	73
   239  00FE19  46                 	db	70
   240  00FE1A  21                 	db	33
   241  00FE1B  41                 	db	65
   242  00FE1C  49                 	db	73
   243  00FE1D  4D                 	db	77
   244  00FE1E  33                 	db	51
   245  00FE1F  18                 	db	24
   246  00FE20  14                 	db	20
   247  00FE21  12                 	db	18
   248  00FE22  7F                 	db	127
   249  00FE23  10                 	db	16
   250  00FE24  27                 	db	39
   251  00FE25  45                 	db	69
   252  00FE26  45                 	db	69
   253  00FE27  45                 	db	69
   254  00FE28  39                 	db	57
   255  00FE29  3C                 	db	60
   256  00FE2A  4A                 	db	74
   257  00FE2B  49                 	db	73
   258  00FE2C  49                 	db	73
   259  00FE2D  31                 	db	49
   260  00FE2E  41                 	db	65
   261  00FE2F  21                 	db	33
   262  00FE30  11                 	db	17
   263  00FE31  09                 	db	9
   264  00FE32  07                 	db	7
   265  00FE33  36                 	db	54
   266  00FE34  49                 	db	73
   267  00FE35  49                 	db	73
   268  00FE36  49                 	db	73
   269  00FE37  36                 	db	54
   270  00FE38  46                 	db	70
   271  00FE39  49                 	db	73
   272  00FE3A  49                 	db	73
   273  00FE3B  29                 	db	41
   274  00FE3C  1E                 	db	30
   275  00FE3D  00                 	db	0
   276  00FE3E  00                 	db	0
   277  00FE3F  14                 	db	20
   278  00FE40  00                 	db	0
   279  00FE41  00                 	db	0
   280  00FE42  00                 	db	0
   281  00FE43  40                 	db	64
   282  00FE44  34                 	db	52
   283  00FE45  00                 	db	0
   284  00FE46  00                 	db	0
   285  00FE47  00                 	db	0
   286  00FE48  08                 	db	8
   287  00FE49  14                 	db	20
   288  00FE4A  22                 	db	34
   289  00FE4B  41                 	db	65
   290  00FE4C  14                 	db	20
   291  00FE4D  14                 	db	20
   292  00FE4E  14                 	db	20
   293  00FE4F  14                 	db	20
   294  00FE50  14                 	db	20
   295  00FE51  00                 	db	0
   296  00FE52  41                 	db	65
   297  00FE53  22                 	db	34
   298  00FE54  14                 	db	20
   299  00FE55  08                 	db	8
   300  00FE56  02                 	db	2
   301  00FE57  01                 	db	1
   302  00FE58  59                 	db	89
   303  00FE59  09                 	db	9
   304  00FE5A  06                 	db	6
   305  00FE5B  3E                 	db	62
   306  00FE5C  41                 	db	65
   307  00FE5D  5D                 	db	93
   308  00FE5E  59                 	db	89
   309  00FE5F  4E                 	db	78
   310  00FE60  7C                 	db	124
   311  00FE61  12                 	db	18
   312  00FE62  11                 	db	17
   313  00FE63  12                 	db	18
   314  00FE64  7C                 	db	124
   315  00FE65  7F                 	db	127
   316  00FE66  49                 	db	73
   317  00FE67  49                 	db	73
   318  00FE68  49                 	db	73
   319  00FE69  36                 	db	54
   320  00FE6A  3E                 	db	62
   321  00FE6B  41                 	db	65
   322  00FE6C  41                 	db	65
   323  00FE6D  41                 	db	65
   324  00FE6E  22                 	db	34
   325  00FE6F  7F                 	db	127
   326  00FE70  41                 	db	65
   327  00FE71  41                 	db	65
   328  00FE72  41                 	db	65
   329  00FE73  3E                 	db	62
   330  00FE74  7F                 	db	127
   331  00FE75  49                 	db	73
   332  00FE76  49                 	db	73
   333  00FE77  49                 	db	73
   334  00FE78  41                 	db	65
   335  00FE79  7F                 	db	127
   336  00FE7A  09                 	db	9
   337  00FE7B  09                 	db	9
   338  00FE7C  09                 	db	9
   339  00FE7D  01                 	db	1
   340  00FE7E  3E                 	db	62
   341  00FE7F  41                 	db	65
   342  00FE80  41                 	db	65
   343  00FE81  51                 	db	81
   344  00FE82  73                 	db	115
   345  00FE83  7F                 	db	127
   346  00FE84  08                 	db	8
   347  00FE85  08                 	db	8
   348  00FE86  08                 	db	8
   349  00FE87  7F                 	db	127
   350  00FE88  00                 	db	0
   351  00FE89  41                 	db	65
   352  00FE8A  7F                 	db	127
   353  00FE8B  41                 	db	65
   354  00FE8C  00                 	db	0
   355  00FE8D  20                 	db	32
   356  00FE8E  40                 	db	64
   357  00FE8F  41                 	db	65
   358  00FE90  3F                 	db	63
   359  00FE91  01                 	db	1
   360  00FE92  7F                 	db	127
   361  00FE93  08                 	db	8
   362  00FE94  14                 	db	20
   363  00FE95  22                 	db	34
   364  00FE96  41                 	db	65
   365  00FE97  7F                 	db	127
   366  00FE98  40                 	db	64
   367  00FE99  40                 	db	64
   368  00FE9A  40                 	db	64
   369  00FE9B  40                 	db	64
   370  00FE9C  7F                 	db	127
   371  00FE9D  02                 	db	2
   372  00FE9E  1C                 	db	28
   373  00FE9F  02                 	db	2
   374  00FEA0  7F                 	db	127
   375  00FEA1  7F                 	db	127
   376  00FEA2  04                 	db	4
   377  00FEA3  08                 	db	8
   378  00FEA4  10                 	db	16
   379  00FEA5  7F                 	db	127
   380  00FEA6  3E                 	db	62
   381  00FEA7  41                 	db	65
   382  00FEA8  41                 	db	65
   383  00FEA9  41                 	db	65
   384  00FEAA  3E                 	db	62
   385  00FEAB  7F                 	db	127
   386  00FEAC  09                 	db	9
   387  00FEAD  09                 	db	9
   388  00FEAE  09                 	db	9
   389  00FEAF  06                 	db	6
   390  00FEB0  3E                 	db	62
   391  00FEB1  41                 	db	65
   392  00FEB2  51                 	db	81
   393  00FEB3  21                 	db	33
   394  00FEB4  5E                 	db	94
   395  00FEB5  7F                 	db	127
   396  00FEB6  09                 	db	9
   397  00FEB7  19                 	db	25
   398  00FEB8  29                 	db	41
   399  00FEB9  46                 	db	70
   400  00FEBA                     __end_of_font:
   401                           	opt stack 0
   402  00FEBA                     _font2:
   403                           	opt stack 0
   404  00FEBA  26                 	db	38
   405  00FEBB  49                 	db	73
   406  00FEBC  49                 	db	73
   407  00FEBD  49                 	db	73
   408  00FEBE  32                 	db	50
   409  00FEBF  03                 	db	3
   410  00FEC0  01                 	db	1
   411  00FEC1  7F                 	db	127
   412  00FEC2  01                 	db	1
   413  00FEC3  03                 	db	3
   414  00FEC4  3F                 	db	63
   415  00FEC5  40                 	db	64
   416  00FEC6  40                 	db	64
   417  00FEC7  40                 	db	64
   418  00FEC8  3F                 	db	63
   419  00FEC9  1F                 	db	31
   420  00FECA  20                 	db	32
   421  00FECB  40                 	db	64
   422  00FECC  20                 	db	32
   423  00FECD  1F                 	db	31
   424  00FECE  3F                 	db	63
   425  00FECF  40                 	db	64
   426  00FED0  38                 	db	56
   427  00FED1  40                 	db	64
   428  00FED2  3F                 	db	63
   429  00FED3  63                 	db	99
   430  00FED4  14                 	db	20
   431  00FED5  08                 	db	8
   432  00FED6  14                 	db	20
   433  00FED7  63                 	db	99
   434  00FED8  03                 	db	3
   435  00FED9  04                 	db	4
   436  00FEDA  78                 	db	120
   437  00FEDB  04                 	db	4
   438  00FEDC  03                 	db	3
   439  00FEDD  61                 	db	97
   440  00FEDE  59                 	db	89
   441  00FEDF  49                 	db	73
   442  00FEE0  4D                 	db	77
   443  00FEE1  43                 	db	67
   444  00FEE2  00                 	db	0
   445  00FEE3  7F                 	db	127
   446  00FEE4  41                 	db	65
   447  00FEE5  41                 	db	65
   448  00FEE6  41                 	db	65
   449  00FEE7  02                 	db	2
   450  00FEE8  04                 	db	4
   451  00FEE9  08                 	db	8
   452  00FEEA  10                 	db	16
   453  00FEEB  20                 	db	32
   454  00FEEC  00                 	db	0
   455  00FEED  41                 	db	65
   456  00FEEE  41                 	db	65
   457  00FEEF  41                 	db	65
   458  00FEF0  7F                 	db	127
   459  00FEF1  04                 	db	4
   460  00FEF2  02                 	db	2
   461  00FEF3  01                 	db	1
   462  00FEF4  02                 	db	2
   463  00FEF5  04                 	db	4
   464  00FEF6  40                 	db	64
   465  00FEF7  40                 	db	64
   466  00FEF8  40                 	db	64
   467  00FEF9  40                 	db	64
   468  00FEFA  40                 	db	64
   469  00FEFB  00                 	db	0
   470  00FEFC  03                 	db	3
   471  00FEFD  07                 	db	7
   472  00FEFE  08                 	db	8
   473  00FEFF  00                 	db	0
   474  00FF00  20                 	db	32
   475  00FF01  54                 	db	84
   476  00FF02  54                 	db	84
   477  00FF03  78                 	db	120
   478  00FF04  40                 	db	64
   479  00FF05  7F                 	db	127
   480  00FF06  28                 	db	40
   481  00FF07  44                 	db	68
   482  00FF08  44                 	db	68
   483  00FF09  38                 	db	56
   484  00FF0A  38                 	db	56
   485  00FF0B  44                 	db	68
   486  00FF0C  44                 	db	68
   487  00FF0D  44                 	db	68
   488  00FF0E  28                 	db	40
   489  00FF0F  38                 	db	56
   490  00FF10  44                 	db	68
   491  00FF11  44                 	db	68
   492  00FF12  28                 	db	40
   493  00FF13  7F                 	db	127
   494  00FF14  38                 	db	56
   495  00FF15  54                 	db	84
   496  00FF16  54                 	db	84
   497  00FF17  54                 	db	84
   498  00FF18  18                 	db	24
   499  00FF19  00                 	db	0
   500  00FF1A  08                 	db	8
   501  00FF1B  7E                 	db	126
   502  00FF1C  09                 	db	9
   503  00FF1D  02                 	db	2
   504  00FF1E  18                 	db	24
   505  00FF1F  A4                 	db	164
   506  00FF20  A4                 	db	164
   507  00FF21  9C                 	db	156
   508  00FF22  78                 	db	120
   509  00FF23  7F                 	db	127
   510  00FF24  08                 	db	8
   511  00FF25  04                 	db	4
   512  00FF26  04                 	db	4
   513  00FF27  78                 	db	120
   514  00FF28  00                 	db	0
   515  00FF29  44                 	db	68
   516  00FF2A  7D                 	db	125
   517  00FF2B  40                 	db	64
   518  00FF2C  00                 	db	0
   519  00FF2D  20                 	db	32
   520  00FF2E  40                 	db	64
   521  00FF2F  40                 	db	64
   522  00FF30  3D                 	db	61
   523  00FF31  00                 	db	0
   524  00FF32  7F                 	db	127
   525  00FF33  10                 	db	16
   526  00FF34  28                 	db	40
   527  00FF35  44                 	db	68
   528  00FF36  00                 	db	0
   529  00FF37  00                 	db	0
   530  00FF38  41                 	db	65
   531  00FF39  7F                 	db	127
   532  00FF3A  40                 	db	64
   533  00FF3B  00                 	db	0
   534  00FF3C  7C                 	db	124
   535  00FF3D  04                 	db	4
   536  00FF3E  78                 	db	120
   537  00FF3F  04                 	db	4
   538  00FF40  78                 	db	120
   539  00FF41  7C                 	db	124
   540  00FF42  08                 	db	8
   541  00FF43  04                 	db	4
   542  00FF44  04                 	db	4
   543  00FF45  78                 	db	120
   544  00FF46  38                 	db	56
   545  00FF47  44                 	db	68
   546  00FF48  44                 	db	68
   547  00FF49  44                 	db	68
   548  00FF4A  38                 	db	56
   549  00FF4B  FC                 	db	252
   550  00FF4C  18                 	db	24
   551  00FF4D  24                 	db	36
   552  00FF4E  24                 	db	36
   553  00FF4F  18                 	db	24
   554  00FF50  18                 	db	24
   555  00FF51  24                 	db	36
   556  00FF52  24                 	db	36
   557  00FF53  18                 	db	24
   558  00FF54  FC                 	db	252
   559  00FF55  7C                 	db	124
   560  00FF56  08                 	db	8
   561  00FF57  04                 	db	4
   562  00FF58  04                 	db	4
   563  00FF59  08                 	db	8
   564  00FF5A  48                 	db	72
   565  00FF5B  54                 	db	84
   566  00FF5C  54                 	db	84
   567  00FF5D  54                 	db	84
   568  00FF5E  24                 	db	36
   569  00FF5F  04                 	db	4
   570  00FF60  04                 	db	4
   571  00FF61  3F                 	db	63
   572  00FF62  44                 	db	68
   573  00FF63  24                 	db	36
   574  00FF64  3C                 	db	60
   575  00FF65  40                 	db	64
   576  00FF66  40                 	db	64
   577  00FF67  20                 	db	32
   578  00FF68  7C                 	db	124
   579  00FF69  1C                 	db	28
   580  00FF6A  20                 	db	32
   581  00FF6B  40                 	db	64
   582  00FF6C  20                 	db	32
   583  00FF6D  1C                 	db	28
   584  00FF6E  3C                 	db	60
   585  00FF6F  40                 	db	64
   586  00FF70  30                 	db	48
   587  00FF71  40                 	db	64
   588  00FF72  3C                 	db	60
   589  00FF73  44                 	db	68
   590  00FF74  28                 	db	40
   591  00FF75  10                 	db	16
   592  00FF76  28                 	db	40
   593  00FF77  44                 	db	68
   594  00FF78  4C                 	db	76
   595  00FF79  90                 	db	144
   596  00FF7A  90                 	db	144
   597  00FF7B  90                 	db	144
   598  00FF7C  7C                 	db	124
   599  00FF7D  44                 	db	68
   600  00FF7E  64                 	db	100
   601  00FF7F  54                 	db	84
   602  00FF80  4C                 	db	76
   603  00FF81  44                 	db	68
   604  00FF82  00                 	db	0
   605  00FF83  08                 	db	8
   606  00FF84  36                 	db	54
   607  00FF85  41                 	db	65
   608  00FF86  00                 	db	0
   609  00FF87  00                 	db	0
   610  00FF88  00                 	db	0
   611  00FF89  77                 	db	119
   612  00FF8A  00                 	db	0
   613  00FF8B  00                 	db	0
   614  00FF8C  00                 	db	0
   615  00FF8D  41                 	db	65
   616  00FF8E  36                 	db	54
   617  00FF8F  08                 	db	8
   618  00FF90  00                 	db	0
   619  00FF91  02                 	db	2
   620  00FF92  01                 	db	1
   621  00FF93  02                 	db	2
   622  00FF94  04                 	db	4
   623  00FF95  02                 	db	2
   624  00FF96                     __end_of_font2:
   625                           	opt stack 0
   626  0000                     _ADCON0	set	4034
   627  0000                     _ADCON0bits	set	4034
   628  0000                     _ADCON1	set	4033
   629  0000                     _ADCON2	set	4032
   630  0000                     _ADRESH	set	4036
   631  0000                     _ADRESL	set	4035
   632  0000                     _CCP2CON	set	4026
   633  0000                     _CCPR2L	set	4027
   634  0000                     _INTCONbits	set	4082
   635  0000                     _OSCCON	set	4051
   636  0000                     _PIE1bits	set	3997
   637  0000                     _PIR1bits	set	3998
   638  0000                     _PIR2bits	set	4001
   639  0000                     _PORTAbits	set	3968
   640  0000                     _PORTBbits	set	3969
   641  0000                     _PORTCbits	set	3970
   642  0000                     _PORTDbits	set	3971
   643  0000                     _PORTEbits	set	3972
   644  0000                     _PR2	set	4043
   645  0000                     _RCSTA	set	4011
   646  0000                     _RCSTAbits	set	4011
   647  0000                     _SPBRG	set	4015
   648  0000                     _SPBRGH	set	4016
   649  0000                     _SSPBUF	set	4041
   650  0000                     _SSPCON1	set	4038
   651  0000                     _SSPSTAT	set	4039
   652  0000                     _SSPSTATbits	set	4039
   653  0000                     _T0CON	set	4053
   654  0000                     _T0CONbits	set	4053
   655  0000                     _T2CON	set	4042
   656  0000                     _T3CON	set	4017
   657  0000                     _T3CONbits	set	4017
   658  0000                     _TMR0H	set	4055
   659  0000                     _TMR0L	set	4054
   660  0000                     _TRISA	set	3986
   661  0000                     _TRISB	set	3987
   662  0000                     _TRISC	set	3988
   663  0000                     _TRISCbits	set	3988
   664  0000                     _TRISD	set	3989
   665  0000                     _TRISE	set	3990
   666  0000                     _TXREG	set	4013
   667  0000                     _TXSTA	set	4012
   668  0000                     _TXSTAbits	set	4012
   669  0000                     _RBPU	set	32655
   670  0000                     _TRMT	set	32097
   671  00FF96                     STR_1:
   672  00FF96  45                 	db	69	;'E'
   673  00FF97  43                 	db	67	;'C'
   674  00FF98  45                 	db	69	;'E'
   675  00FF99  33                 	db	51	;'3'
   676  00FF9A  33                 	db	51	;'3'
   677  00FF9B  30                 	db	48	;'0'
   678  00FF9C  31                 	db	49	;'1'
   679  00FF9D  4C                 	db	76	;'L'
   680  00FF9E  20                 	db	32
   681  00FF9F  53                 	db	83	;'S'
   682  00FFA0  70                 	db	112	;'p'
   683  00FFA1  72                 	db	114	;'r'
   684  00FFA2  69                 	db	105	;'i'
   685  00FFA3  6E                 	db	110	;'n'
   686  00FFA4  67                 	db	103	;'g'
   687  00FFA5  20                 	db	32
   688  00FFA6  32                 	db	50	;'2'
   689  00FFA7  31                 	db	49	;'1'
   690  00FFA8  2D                 	db	45
   691  00FFA9  53                 	db	83	;'S'
   692  00FFAA  33                 	db	51	;'3'
   693  00FFAB  00                 	db	0
   694  00FFAC                     STR_12:
   695  00FFAC  45                 	db	69	;'E'
   696  00FFAD  57                 	db	87	;'W'
   697  00FFAE  50                 	db	80	;'P'
   698  00FFAF  20                 	db	32
   699  00FFB0  45                 	db	69	;'E'
   700  00FFB1  57                 	db	87	;'W'
   701  00FFB2  4C                 	db	76	;'L'
   702  00FFB3  54                 	db	84	;'T'
   703  00FFB4  20                 	db	32
   704  00FFB5  4E                 	db	78	;'N'
   705  00FFB6  53                 	db	83	;'S'
   706  00FFB7  50                 	db	80	;'P'
   707  00FFB8  20                 	db	32
   708  00FFB9  4E                 	db	78	;'N'
   709  00FFBA  53                 	db	83	;'S'
   710  00FFBB  4C                 	db	76	;'L'
   711  00FFBC  54                 	db	84	;'T'
   712  00FFBD  20                 	db	32
   713  00FFBE  4D                 	db	77	;'M'
   714  00FFBF  52                 	db	82	;'R'
   715  00FFC0  00                 	db	0
   716  00FFC1                     STR_8:
   717  00FFC1  4E                 	db	78	;'N'
   718  00FFC2  4F                 	db	79	;'O'
   719  00FFC3  52                 	db	82	;'R'
   720  00FFC4  54                 	db	84	;'T'
   721  00FFC5  48                 	db	72	;'H'
   722  00FFC6  2F                 	db	47
   723  00FFC7  53                 	db	83	;'S'
   724  00FFC8  4F                 	db	79	;'O'
   725  00FFC9  55                 	db	85	;'U'
   726  00FFCA  54                 	db	84	;'T'
   727  00FFCB  48                 	db	72	;'H'
   728  00FFCC  00                 	db	0
   729  00FFCD                     STR_6:
   730  00FFCD  45                 	db	69	;'E'
   731  00FFCE  41                 	db	65	;'A'
   732  00FFCF  53                 	db	83	;'S'
   733  00FFD0  54                 	db	84	;'T'
   734  00FFD1  2F                 	db	47
   735  00FFD2  57                 	db	87	;'W'
   736  00FFD3  45                 	db	69	;'E'
   737  00FFD4  53                 	db	83	;'S'
   738  00FFD5  54                 	db	84	;'T'
   739  00FFD6  00                 	db	0
   740  00FFD7                     STR_9:
   741  00FFD7  4E                 	db	78	;'N'
   742  00FFD8  2F                 	db	47
   743  00FFD9  53                 	db	83	;'S'
   744  00FFDA  20                 	db	32
   745  00FFDB  4C                 	db	76	;'L'
   746  00FFDC  54                 	db	84	;'T'
   747  00FFDD  00                 	db	0
   748  00FFDE                     STR_7:
   749  00FFDE  45                 	db	69	;'E'
   750  00FFDF  2F                 	db	47
   751  00FFE0  57                 	db	87	;'W'
   752  00FFE1  20                 	db	32
   753  00FFE2  4C                 	db	76	;'L'
   754  00FFE3  54                 	db	84	;'T'
   755  00FFE4  00                 	db	0
   756  00FFE5                     STR_2:
   757  00FFE5  4D                 	db	77	;'M'
   758  00FFE6  6F                 	db	111	;'o'
   759  00FFE7  64                 	db	100	;'d'
   760  00FFE8  65                 	db	101	;'e'
   761  00FFE9  3A                 	db	58	;':'
   762  00FFEA  00                 	db	0
   763  00FFEB                     STR_3:
   764  00FFEB  46                 	db	70	;'F'
   765  00FFEC  52                 	db	82	;'R'
   766  00FFED  3A                 	db	58	;':'
   767  00FFEE  00                 	db	0
   768  00FFEF                     STR_4:
   769  00FFEF  46                 	db	70	;'F'
   770  00FFF0  53                 	db	83	;'S'
   771  00FFF1  3A                 	db	58	;':'
   772  00FFF2  00                 	db	0
   773  00FFF3                     STR_11:
   774  00FFF3  50                 	db	80	;'P'
   775  00FFF4  4E                 	db	78	;'N'
   776  00FFF5  53                 	db	83	;'S'
   777  00FFF6  00                 	db	0
   778  00FFF7                     STR_10:
   779  00FFF7  50                 	db	80	;'P'
   780  00FFF8  45                 	db	69	;'E'
   781  00FFF9  57                 	db	87	;'W'
   782  00FFFA  00                 	db	0
   783  00FFFB                     STR_14:
   784  00FFFB  20                 	db	32
   785  00FFFC  00                 	db	0
   786  00FFFD                     STR_5:
   787  00FFFD  2A                 	db	42
   788  00FFFE  00                 	db	0
   789  0000                     
   790                           ; #config settings
   791  00FFFF  00                 	db	0	; dummy byte at the end
   792  0000                     
   793                           	psect	cinit
   794  00DDA0                     __pcinit:
   795                           	opt stack 0
   796  00DDA0                     start_initialization:
   797                           	opt stack 0
   798  00DDA0                     __initialization:
   799                           	opt stack 0
   800                           
   801                           ; Clear objects allocated to BANK0 (31 bytes)
   802  00DDA0  EE00  F080         	lfsr	0,__pbssBANK0
   803  00DDA4  0E1F               	movlw	31
   804  00DDA6                     clear_0:
   805  00DDA6  6AEE               	clrf	postinc0,c
   806  00DDA8  06E8               	decf	wreg,f,c
   807  00DDAA  E1FD               	bnz	clear_0
   808                           
   809                           ; Clear objects allocated to COMRAM (23 bytes)
   810  00DDAC  EE00  F064         	lfsr	0,__pbssCOMRAM
   811  00DDB0  0E17               	movlw	23
   812  00DDB2                     clear_1:
   813  00DDB2  6AEE               	clrf	postinc0,c
   814  00DDB4  06E8               	decf	wreg,f,c
   815  00DDB6  E1FD               	bnz	clear_1
   816                           
   817                           ; Initialize objects allocated to COMRAM (35 bytes)
   818                           ; load TBLPTR registers with __pidataCOMRAM
   819  00DDB8  0E8B               	movlw	low __pidataCOMRAM
   820  00DDBA  6EF6               	movwf	tblptrl,c
   821  00DDBC  0EDB               	movlw	high __pidataCOMRAM
   822  00DDBE  6EF7               	movwf	tblptrh,c
   823  00DDC0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   824  00DDC2  6EF8               	movwf	tblptru,c
   825  00DDC4  EE00  F041         	lfsr	0,__pdataCOMRAM
   826  00DDC8  EE10 F023          	lfsr	1,35
   827  00DDCC                     copy_data0:
   828  00DDCC  0009               	tblrd		*+
   829  00DDCE  CFF5 FFEE          	movff	tablat,postinc0
   830  00DDD2  50E5               	movf	postdec1,w,c
   831  00DDD4  50E1               	movf	fsr1l,w,c
   832  00DDD6  E1FA               	bnz	copy_data0
   833  00DDD8                     end_of_initialization:
   834                           	opt stack 0
   835  00DDD8                     __end_of__initialization:
   836                           	opt stack 0
   837  00DDD8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   838  00DDDA  6EF8               	movwf	tblptru,c
   839  00DDDC  0100               	movlb	0
   840  00DDDE  EF75  F072         	goto	_main	;jump to C main() function
   841                           tblptru	equ	0xFF8
   842                           tblptrh	equ	0xFF7
   843                           tblptrl	equ	0xFF6
   844                           tablat	equ	0xFF5
   845                           postinc0	equ	0xFEE
   846                           wreg	equ	0xFE8
   847                           postdec1	equ	0xFE5
   848                           fsr1l	equ	0xFE1
   849                           
   850                           	psect	bssCOMRAM
   851  000064                     __pbssCOMRAM:
   852                           	opt stack 0
   853  000064                     _volt:
   854                           	opt stack 0
   855  000064                     	ds	3
   856  000067                     _MODE:
   857                           	opt stack 0
   858  000067                     	ds	2
   859  000069                     _nbr:
   860                           	opt stack 0
   861  000069                     	ds	2
   862  00006B                     _txt:
   863                           	opt stack 0
   864  00006B                     	ds	2
   865  00006D                     _Count:
   866                           	opt stack 0
   867  00006D                     	ds	1
   868  00006E                     _FLASHING:
   869                           	opt stack 0
   870  00006E                     	ds	1
   871  00006F                     _FLASHING_REQUEST:
   872                           	opt stack 0
   873  00006F                     	ds	1
   874  000070                     _PED_Count:
   875                           	opt stack 0
   876  000070                     	ds	1
   877  000071                     _SW_EWLT:
   878                           	opt stack 0
   879  000071                     	ds	1
   880  000072                     _SW_EWPED:
   881                           	opt stack 0
   882  000072                     	ds	1
   883  000073                     _SW_MODE:
   884                           	opt stack 0
   885  000073                     	ds	1
   886  000074                     _SW_NSLT:
   887                           	opt stack 0
   888  000074                     	ds	1
   889  000075                     _SW_NSPED:
   890                           	opt stack 0
   891  000075                     	ds	1
   892  000076                     __tft_type:
   893                           	opt stack 0
   894  000076                     	ds	1
   895  000077                     _colstart:
   896                           	opt stack 0
   897  000077                     	ds	1
   898  000078                     _dir:
   899                           	opt stack 0
   900  000078                     	ds	1
   901  000079                     _direction:
   902                           	opt stack 0
   903  000079                     	ds	1
   904  00007A                     _rowstart:
   905                           	opt stack 0
   906  00007A                     	ds	1
   907                           tblptru	equ	0xFF8
   908                           tblptrh	equ	0xFF7
   909                           tblptrl	equ	0xFF6
   910                           tablat	equ	0xFF5
   911                           postinc0	equ	0xFEE
   912                           wreg	equ	0xFE8
   913                           postdec1	equ	0xFE5
   914                           fsr1l	equ	0xFE1
   915                           
   916                           	psect	dataCOMRAM
   917  000041                     __pdataCOMRAM:
   918                           	opt stack 0
   919  000041                     _wrap:
   920                           	opt stack 0
   921  000041                     	ds	1
   922  000042                     _EWLT_Count:
   923                           	opt stack 0
   924  000042                     	ds	3
   925  000045                     _EW_Count:
   926                           	opt stack 0
   927  000045                     	ds	3
   928  000048                     _NSLT_Count:
   929                           	opt stack 0
   930  000048                     	ds	3
   931  00004B                     _NS_Count:
   932                           	opt stack 0
   933  00004B                     	ds	3
   934  00004E                     _PED_EW_Count:
   935                           	opt stack 0
   936  00004E                     	ds	3
   937  000051                     _PED_NS_Count:
   938                           	opt stack 0
   939  000051                     	ds	3
   940  000054                     _Act_Mode_Txt:
   941                           	opt stack 0
   942  000054                     	ds	2
   943  000056                     _FlashingR_Txt:
   944                           	opt stack 0
   945  000056                     	ds	2
   946  000058                     _FlashingS_Txt:
   947                           	opt stack 0
   948  000058                     	ds	2
   949  00005A                     _SW_EWLT_Txt:
   950                           	opt stack 0
   951  00005A                     	ds	2
   952  00005C                     _SW_EWPED_Txt:
   953                           	opt stack 0
   954  00005C                     	ds	2
   955  00005E                     _SW_MODE_Txt:
   956                           	opt stack 0
   957  00005E                     	ds	2
   958  000060                     _SW_NSLT_Txt:
   959                           	opt stack 0
   960  000060                     	ds	2
   961  000062                     _SW_NSPED_Txt:
   962                           	opt stack 0
   963  000062                     	ds	2
   964                           tblptru	equ	0xFF8
   965                           tblptrh	equ	0xFF7
   966                           tblptrl	equ	0xFF6
   967                           tablat	equ	0xFF5
   968                           postinc0	equ	0xFEE
   969                           wreg	equ	0xFE8
   970                           postdec1	equ	0xFE5
   971                           fsr1l	equ	0xFE1
   972                           
   973                           	psect	bssBANK0
   974  000080                     __pbssBANK0:
   975                           	opt stack 0
   976  000080                     _buffer:
   977                           	opt stack 0
   978  000080                     	ds	31
   979                           tblptru	equ	0xFF8
   980                           tblptrh	equ	0xFF7
   981                           tblptrl	equ	0xFF6
   982                           tablat	equ	0xFF5
   983                           postinc0	equ	0xFEE
   984                           wreg	equ	0xFE8
   985                           postdec1	equ	0xFE5
   986                           fsr1l	equ	0xFE1
   987                           
   988                           	psect	cstackCOMRAM
   989  000001                     __pcstackCOMRAM:
   990                           	opt stack 0
   991  000001                     ?_strlen:
   992                           	opt stack 0
   993  000001                     ?_get_full_ADC:
   994                           	opt stack 0
   995  000001                     ?___wmul:
   996                           	opt stack 0
   997  000001                     ?___awdiv:
   998                           	opt stack 0
   999  000001                     ?___awmod:
  1000                           	opt stack 0
  1001  000001                     ?___ftpack:
  1002                           	opt stack 0
  1003  000001                     spiwrite@x:
  1004                           	opt stack 0
  1005  000001                     OpenUSART@spbrg:
  1006                           	opt stack 0
  1007  000001                     ___wmul@multiplier:
  1008                           	opt stack 0
  1009  000001                     ___awdiv@dividend:
  1010                           	opt stack 0
  1011  000001                     ___awmod@dividend:
  1012                           	opt stack 0
  1013  000001                     strcpy@to:
  1014                           	opt stack 0
  1015  000001                     strlen@s:
  1016                           	opt stack 0
  1017  000001                     ___ftpack@arg:
  1018                           	opt stack 0
  1019  000001                     ___ftge@ff1:
  1020                           	opt stack 0
  1021                           
  1022                           ; 3 bytes @ 0x0
  1023  000001                     	ds	1
  1024  000002                     spiwrite@spidata:
  1025                           	opt stack 0
  1026                           
  1027                           ; 1 bytes @ 0x1
  1028  000002                     	ds	1
  1029  000003                     ??_strlen:
  1030  000003                     ??_get_full_ADC:
  1031  000003                     write_command@cmd_:
  1032                           	opt stack 0
  1033  000003                     write_data@data_:
  1034                           	opt stack 0
  1035  000003                     OpenUSART@config:
  1036                           	opt stack 0
  1037  000003                     ___wmul@multiplicand:
  1038                           	opt stack 0
  1039  000003                     ___awdiv@divisor:
  1040                           	opt stack 0
  1041  000003                     ___awmod@divisor:
  1042                           	opt stack 0
  1043  000003                     strcpy@from:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x2
  1047  000003                     	ds	1
  1048  000004                     setAddrWindow@y0:
  1049                           	opt stack 0
  1050  000004                     ___ftpack@exp:
  1051                           	opt stack 0
  1052  000004                     ___ftge@ff2:
  1053                           	opt stack 0
  1054                           
  1055                           ; 3 bytes @ 0x3
  1056  000004                     	ds	1
  1057  000005                     setAddrWindow@x1:
  1058                           	opt stack 0
  1059  000005                     ___awdiv@counter:
  1060                           	opt stack 0
  1061  000005                     ___awmod@counter:
  1062                           	opt stack 0
  1063  000005                     ___ftpack@sign:
  1064                           	opt stack 0
  1065  000005                     get_full_ADC@result:
  1066                           	opt stack 0
  1067  000005                     ___wmul@product:
  1068                           	opt stack 0
  1069  000005                     strcpy@cp:
  1070                           	opt stack 0
  1071  000005                     strlen@cp:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x4
  1075  000005                     	ds	1
  1076  000006                     ??___ftpack:
  1077  000006                     setAddrWindow@y1:
  1078                           	opt stack 0
  1079  000006                     ___awdiv@sign:
  1080                           	opt stack 0
  1081  000006                     ___awmod@sign:
  1082                           	opt stack 0
  1083                           
  1084                           ; 1 bytes @ 0x5
  1085  000006                     	ds	1
  1086  000007                     ??___ftge:
  1087  000007                     setAddrWindow@x0:
  1088                           	opt stack 0
  1089  000007                     delay_ms@ms:
  1090                           	opt stack 0
  1091  000007                     ___awdiv@quotient:
  1092                           	opt stack 0
  1093                           
  1094                           ; 2 bytes @ 0x6
  1095  000007                     	ds	1
  1096  000008                     drawPixel@y:
  1097                           	opt stack 0
  1098  000008                     drawFastVLine@y:
  1099                           	opt stack 0
  1100  000008                     fillRectangle@y:
  1101                           	opt stack 0
  1102  000008                     drawFastHLine@y:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x7
  1106  000008                     	ds	1
  1107  000009                     ??_delay_ms:
  1108  000009                     ?___awtoft:
  1109                           	opt stack 0
  1110  000009                     drawFastVLine@h:
  1111                           	opt stack 0
  1112  000009                     fillRectangle@w:
  1113                           	opt stack 0
  1114  000009                     drawFastHLine@w:
  1115                           	opt stack 0
  1116  000009                     drawPixel@color:
  1117                           	opt stack 0
  1118  000009                     ___awtoft@c:
  1119                           	opt stack 0
  1120                           
  1121                           ; 2 bytes @ 0x8
  1122  000009                     	ds	1
  1123  00000A                     fillRectangle@h:
  1124                           	opt stack 0
  1125  00000A                     drawFastVLine@color:
  1126                           	opt stack 0
  1127  00000A                     drawFastHLine@color:
  1128                           	opt stack 0
  1129                           
  1130                           ; 2 bytes @ 0x9
  1131  00000A                     	ds	1
  1132  00000B                     drawPixel@x:
  1133                           	opt stack 0
  1134  00000B                     delay_ms@count:
  1135                           	opt stack 0
  1136  00000B                     fillRectangle@color:
  1137                           	opt stack 0
  1138                           
  1139                           ; 2 bytes @ 0xA
  1140  00000B                     	ds	1
  1141  00000C                     ??_drawFastVLine:
  1142  00000C                     ??_drawFastHLine:
  1143  00000C                     ___awtoft@sign:
  1144                           	opt stack 0
  1145  00000C                     drawCircle@x0:
  1146                           	opt stack 0
  1147                           
  1148                           ; 2 bytes @ 0xB
  1149  00000C                     	ds	1
  1150  00000D                     ??_fillRectangle:
  1151  00000D                     ?___ftdiv:
  1152                           	opt stack 0
  1153  00000D                     ___ftdiv@f1:
  1154                           	opt stack 0
  1155                           
  1156                           ; 3 bytes @ 0xC
  1157  00000D                     	ds	1
  1158  00000E                     drawCircle@y0:
  1159                           	opt stack 0
  1160                           
  1161                           ; 2 bytes @ 0xD
  1162  00000E                     	ds	2
  1163  000010                     drawFastVLine@hi:
  1164                           	opt stack 0
  1165  000010                     drawFastHLine@hi:
  1166                           	opt stack 0
  1167  000010                     drawCircle@r:
  1168                           	opt stack 0
  1169  000010                     ___ftdiv@f2:
  1170                           	opt stack 0
  1171                           
  1172                           ; 3 bytes @ 0xF
  1173  000010                     	ds	1
  1174  000011                     drawFastVLine@lo:
  1175                           	opt stack 0
  1176  000011                     fillRectangle@hi:
  1177                           	opt stack 0
  1178  000011                     drawFastHLine@lo:
  1179                           	opt stack 0
  1180                           
  1181                           ; 1 bytes @ 0x10
  1182  000011                     	ds	1
  1183  000012                     drawFastVLine@x:
  1184                           	opt stack 0
  1185  000012                     fillRectangle@lo:
  1186                           	opt stack 0
  1187  000012                     drawFastHLine@x:
  1188                           	opt stack 0
  1189  000012                     drawCircle@color:
  1190                           	opt stack 0
  1191                           
  1192                           ; 2 bytes @ 0x11
  1193  000012                     	ds	1
  1194  000013                     ??___ftdiv:
  1195  000013                     fillRect@y:
  1196                           	opt stack 0
  1197  000013                     fillRectangle@x:
  1198                           	opt stack 0
  1199  000013                     fillCircleHelper@x0:
  1200                           	opt stack 0
  1201  000013                     drawRect@x:
  1202                           	opt stack 0
  1203                           
  1204                           ; 2 bytes @ 0x12
  1205  000013                     	ds	1
  1206  000014                     ??_drawCircle:
  1207  000014                     fillRect@w:
  1208                           	opt stack 0
  1209  000014                     fillScreen@color:
  1210                           	opt stack 0
  1211                           
  1212                           ; 2 bytes @ 0x13
  1213  000014                     	ds	1
  1214  000015                     fillRect@h:
  1215                           	opt stack 0
  1216  000015                     fillCircleHelper@y0:
  1217                           	opt stack 0
  1218  000015                     drawRect@y:
  1219                           	opt stack 0
  1220                           
  1221                           ; 2 bytes @ 0x14
  1222  000015                     	ds	1
  1223  000016                     ___ftdiv@cntr:
  1224                           	opt stack 0
  1225  000016                     fillRect@color:
  1226                           	opt stack 0
  1227  000016                     drawCircle@ddF_x:
  1228                           	opt stack 0
  1229                           
  1230                           ; 2 bytes @ 0x15
  1231  000016                     	ds	1
  1232  000017                     fillCircleHelper@r:
  1233                           	opt stack 0
  1234  000017                     drawRect@w:
  1235                           	opt stack 0
  1236  000017                     ___ftdiv@f3:
  1237                           	opt stack 0
  1238                           
  1239                           ; 3 bytes @ 0x16
  1240  000017                     	ds	1
  1241  000018                     ??_fillRect:
  1242  000018                     drawCircle@ddF_y:
  1243                           	opt stack 0
  1244                           
  1245                           ; 2 bytes @ 0x17
  1246  000018                     	ds	1
  1247  000019                     fillCircleHelper@cornername:
  1248                           	opt stack 0
  1249  000019                     drawRect@h:
  1250                           	opt stack 0
  1251                           
  1252                           ; 2 bytes @ 0x18
  1253  000019                     	ds	1
  1254  00001A                     ___ftdiv@exp:
  1255                           	opt stack 0
  1256  00001A                     drawCircle@f:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x19
  1260  00001A                     	ds	1
  1261  00001B                     fillRect@x:
  1262                           	opt stack 0
  1263  00001B                     ___ftdiv@sign:
  1264                           	opt stack 0
  1265  00001B                     fillCircleHelper@delta:
  1266                           	opt stack 0
  1267  00001B                     drawRect@color:
  1268                           	opt stack 0
  1269                           
  1270                           ; 2 bytes @ 0x1A
  1271  00001B                     	ds	1
  1272  00001C                     fillRect@i:
  1273                           	opt stack 0
  1274  00001C                     drawCircle@x:
  1275                           	opt stack 0
  1276                           
  1277                           ; 2 bytes @ 0x1B
  1278  00001C                     	ds	1
  1279  00001D                     ??_drawRect:
  1280  00001D                     fillCircleHelper@color:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0x1C
  1284  00001D                     	ds	1
  1285  00001E                     drawChar@y:
  1286                           	opt stack 0
  1287  00001E                     drawCircle@y:
  1288                           	opt stack 0
  1289                           
  1290                           ; 2 bytes @ 0x1D
  1291  00001E                     	ds	1
  1292  00001F                     ??_fillCircleHelper:
  1293  00001F                     drawChar@c:
  1294                           	opt stack 0
  1295                           
  1296                           ; 1 bytes @ 0x1E
  1297  00001F                     	ds	1
  1298  000020                     drawChar@color:
  1299                           	opt stack 0
  1300                           
  1301                           ; 2 bytes @ 0x1F
  1302  000020                     	ds	1
  1303  000021                     fillCircleHelper@ddF_x:
  1304                           	opt stack 0
  1305                           
  1306                           ; 2 bytes @ 0x20
  1307  000021                     	ds	1
  1308  000022                     drawChar@bg:
  1309                           	opt stack 0
  1310                           
  1311                           ; 2 bytes @ 0x21
  1312  000022                     	ds	1
  1313  000023                     fillCircleHelper@ddF_y:
  1314                           	opt stack 0
  1315                           
  1316                           ; 2 bytes @ 0x22
  1317  000023                     	ds	1
  1318  000024                     drawChar@size:
  1319                           	opt stack 0
  1320                           
  1321                           ; 1 bytes @ 0x23
  1322  000024                     	ds	1
  1323  000025                     drawChar@line:
  1324                           	opt stack 0
  1325  000025                     fillCircleHelper@f:
  1326                           	opt stack 0
  1327                           
  1328                           ; 2 bytes @ 0x24
  1329  000025                     	ds	1
  1330  000026                     drawChar@x:
  1331                           	opt stack 0
  1332                           
  1333                           ; 1 bytes @ 0x25
  1334  000026                     	ds	1
  1335  000027                     drawChar@j:
  1336                           	opt stack 0
  1337  000027                     fillCircleHelper@x:
  1338                           	opt stack 0
  1339                           
  1340                           ; 2 bytes @ 0x26
  1341  000027                     	ds	1
  1342  000028                     drawChar@i:
  1343                           	opt stack 0
  1344                           
  1345                           ; 1 bytes @ 0x27
  1346  000028                     	ds	1
  1347  000029                     drawtext@y:
  1348                           	opt stack 0
  1349  000029                     fillCircleHelper@y:
  1350                           	opt stack 0
  1351                           
  1352                           ; 2 bytes @ 0x28
  1353  000029                     	ds	1
  1354  00002A                     drawtext@_text:
  1355                           	opt stack 0
  1356                           
  1357                           ; 2 bytes @ 0x29
  1358  00002A                     	ds	1
  1359  00002B                     fillCircle@x0:
  1360                           	opt stack 0
  1361                           
  1362                           ; 2 bytes @ 0x2A
  1363  00002B                     	ds	1
  1364  00002C                     drawtext@color:
  1365                           	opt stack 0
  1366                           
  1367                           ; 2 bytes @ 0x2B
  1368  00002C                     	ds	1
  1369  00002D                     fillCircle@y0:
  1370                           	opt stack 0
  1371                           
  1372                           ; 2 bytes @ 0x2C
  1373  00002D                     	ds	1
  1374  00002E                     drawtext@bg:
  1375                           	opt stack 0
  1376                           
  1377                           ; 2 bytes @ 0x2D
  1378  00002E                     	ds	1
  1379  00002F                     fillCircle@r:
  1380                           	opt stack 0
  1381                           
  1382                           ; 2 bytes @ 0x2E
  1383  00002F                     	ds	1
  1384  000030                     drawtext@size:
  1385                           	opt stack 0
  1386                           
  1387                           ; 1 bytes @ 0x2F
  1388  000030                     	ds	1
  1389  000031                     ??_drawtext:
  1390  000031                     fillCircle@color:
  1391                           	opt stack 0
  1392                           
  1393                           ; 2 bytes @ 0x30
  1394  000031                     	ds	2
  1395  000033                     update_LCD_color@color:
  1396                           	opt stack 0
  1397  000033                     drawtext@textsize:
  1398                           	opt stack 0
  1399                           
  1400                           ; 2 bytes @ 0x32
  1401  000033                     	ds	1
  1402  000034                     update_LCD_color@direction:
  1403                           	opt stack 0
  1404                           
  1405                           ; 1 bytes @ 0x33
  1406  000034                     	ds	1
  1407  000035                     drawtext@x:
  1408                           	opt stack 0
  1409  000035                     update_LCD_color@Circle_Y:
  1410                           	opt stack 0
  1411                           
  1412                           ; 1 bytes @ 0x34
  1413  000035                     	ds	1
  1414  000036                     Set_NS@color:
  1415                           	opt stack 0
  1416  000036                     Set_NS_LT@color:
  1417                           	opt stack 0
  1418  000036                     Set_EW@color:
  1419                           	opt stack 0
  1420  000036                     Set_EW_LT@color:
  1421                           	opt stack 0
  1422  000036                     drawtext@i:
  1423                           	opt stack 0
  1424                           
  1425                           ; 2 bytes @ 0x35
  1426  000036                     	ds	2
  1427  000038                     drawtext@cursor_y:
  1428                           	opt stack 0
  1429                           
  1430                           ; 1 bytes @ 0x37
  1431  000038                     	ds	1
  1432  000039                     drawtext@cursor_x:
  1433                           	opt stack 0
  1434                           
  1435                           ; 1 bytes @ 0x38
  1436  000039                     	ds	1
  1437  00003A                     update_LCD_count@count:
  1438                           	opt stack 0
  1439  00003A                     update_LCD_PED_Count@count:
  1440                           	opt stack 0
  1441  00003A                     update_LCD_misc@nStep:
  1442                           	opt stack 0
  1443                           
  1444                           ; 2 bytes @ 0x39
  1445  00003A                     	ds	1
  1446  00003B                     update_LCD_count@direction:
  1447                           	opt stack 0
  1448  00003B                     update_LCD_PED_Count@direction:
  1449                           	opt stack 0
  1450                           
  1451                           ; 1 bytes @ 0x3A
  1452  00003B                     	ds	1
  1453  00003C                     PED_Control@Num_Sec:
  1454                           	opt stack 0
  1455  00003C                     update_LCD_misc@ch:
  1456                           	opt stack 0
  1457                           
  1458                           ; 1 bytes @ 0x3B
  1459  00003C                     	ds	1
  1460  00003D                     PED_Control@direction:
  1461                           	opt stack 0
  1462  00003D                     Wait_N_Seconds@seconds:
  1463                           	opt stack 0
  1464                           
  1465                           ; 1 bytes @ 0x3C
  1466  00003D                     	ds	1
  1467  00003E                     PED_Control@i:
  1468                           	opt stack 0
  1469  00003E                     Wait_N_Seconds@I:
  1470                           	opt stack 0
  1471                           
  1472                           ; 1 bytes @ 0x3D
  1473  00003E                     	ds	1
  1474  00003F                     main@nStep:
  1475                           	opt stack 0
  1476                           
  1477                           ; 2 bytes @ 0x3E
  1478  00003F                     	ds	2
  1479                           tblptru	equ	0xFF8
  1480                           tblptrh	equ	0xFF7
  1481                           tblptrl	equ	0xFF6
  1482                           tablat	equ	0xFF5
  1483                           postinc0	equ	0xFEE
  1484                           wreg	equ	0xFE8
  1485                           postdec1	equ	0xFE5
  1486                           fsr1l	equ	0xFE1
  1487                           
  1488 ;;
  1489 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1490 ;;
  1491 ;; *************** function _main *****************
  1492 ;; Defined at:
  1493 ;;		line 1069 in file "Lab8.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;		None
  1496 ;; Auto vars:     Size  Location     Type
  1497 ;;  nStep           2   62[COMRAM] int 
  1498 ;; Return value:  Size  Location     Type
  1499 ;;		None               void
  1500 ;; Registers used:
  1501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1502 ;; Tracked objects:
  1503 ;;		On entry : 0/0
  1504 ;;		On exit  : 0/0
  1505 ;;		Unchanged: 0/0
  1506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1508 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1510 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1511 ;;Total ram usage:        2 bytes
  1512 ;; Hardware stack levels required when called:   11
  1513 ;; This function calls:
  1514 ;;		_Day_Mode
  1515 ;;		_Init_ADC
  1516 ;;		_Initialize_Screen
  1517 ;;		_Night_Mode
  1518 ;;		___awtoft
  1519 ;;		___ftdiv
  1520 ;;		___ftge
  1521 ;;		___wmul
  1522 ;;		_get_full_ADC
  1523 ;;		_init_IO
  1524 ;;		_init_UART
  1525 ;; This function is called by:
  1526 ;;		Startup code after reset
  1527 ;; This function uses a non-reentrant model
  1528 ;;
  1529                           
  1530                           	psect	text0
  1531  00E4EA                     __ptext0:
  1532                           	opt stack 0
  1533  00E4EA                     _main:
  1534                           	opt stack 20
  1535                           
  1536                           ;Lab8.c: 1071: init_IO();
  1537                           
  1538                           ;incstack = 0
  1539  00E4EA  EC9F  F06D         	call	_init_IO	;wreg free
  1540                           
  1541                           ;Lab8.c: 1072: Init_ADC();
  1542  00E4EE  EC59  F06D         	call	_Init_ADC	;wreg free
  1543                           
  1544                           ;Lab8.c: 1073: init_UART();
  1545  00E4F2  EC8A  F06D         	call	_init_UART	;wreg free
  1546                           
  1547                           ;Lab8.c: 1074: OSCCON = 0x70;
  1548  00E4F6  0E70               	movlw	112
  1549  00E4F8  6ED3               	movwf	4051,c	;volatile
  1550                           
  1551                           ;Lab8.c: 1075: RBPU = 0;
  1552  00E4FA  9EF1               	bcf	intcon2,7,c	;volatile
  1553                           
  1554                           ;Lab8.c: 1077: Initialize_Screen();
  1555  00E4FC  EC4E  F07B         	call	_Initialize_Screen	;wreg free
  1556                           
  1557                           ;Lab8.c: 1080: int nStep = get_full_ADC();
  1558  00E500  ECD7  F06D         	call	_get_full_ADC	;wreg free
  1559  00E504  C001  F03F         	movff	?_get_full_ADC,main@nStep
  1560  00E508  C002  F040         	movff	?_get_full_ADC+1,main@nStep+1
  1561                           
  1562                           ;Lab8.c: 1081: volt = nStep * 5 /1024.0;
  1563  00E50C  C03F  F001         	movff	main@nStep,___wmul@multiplier
  1564  00E510  C040  F002         	movff	main@nStep+1,___wmul@multiplier+1
  1565  00E514  0E00               	movlw	0
  1566  00E516  6E04               	movwf	___wmul@multiplicand+1,c
  1567  00E518  0E05               	movlw	5
  1568  00E51A  6E03               	movwf	___wmul@multiplicand,c
  1569  00E51C  ECEA  F06D         	call	___wmul	;wreg free
  1570  00E520  C001  F009         	movff	?___wmul,___awtoft@c
  1571  00E524  C002  F00A         	movff	?___wmul+1,___awtoft@c+1
  1572  00E528  EC74  F06E         	call	___awtoft	;wreg free
  1573  00E52C  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  1574  00E530  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  1575  00E534  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  1576  00E538  0E00               	movlw	0
  1577  00E53A  6E10               	movwf	___ftdiv@f2,c
  1578  00E53C  0E80               	movlw	128
  1579  00E53E  6E11               	movwf	___ftdiv@f2+1,c
  1580  00E540  0E44               	movlw	68
  1581  00E542  6E12               	movwf	___ftdiv@f2+2,c
  1582  00E544  EC2F  F075         	call	___ftdiv	;wreg free
  1583  00E548  C00D  F064         	movff	?___ftdiv,_volt
  1584  00E54C  C00E  F065         	movff	?___ftdiv+1,_volt+1
  1585  00E550  C00F  F066         	movff	?___ftdiv+2,_volt+2
  1586                           
  1587                           ;Lab8.c: 1082: SW_MODE = volt < 3.5 ? 1:0;
  1588  00E554  C064  F001         	movff	_volt,___ftge@ff1
  1589  00E558  C065  F002         	movff	_volt+1,___ftge@ff1+1
  1590  00E55C  C066  F003         	movff	_volt+2,___ftge@ff1+2
  1591  00E560  0E00               	movlw	0
  1592  00E562  6E04               	movwf	___ftge@ff2,c
  1593  00E564  0E60               	movlw	96
  1594  00E566  6E05               	movwf	___ftge@ff2+1,c
  1595  00E568  0E40               	movlw	64
  1596  00E56A  6E06               	movwf	___ftge@ff2+2,c
  1597  00E56C  ECD7  F071         	call	___ftge	;wreg free
  1598  00E570  B0D8               	btfsc	status,0,c
  1599  00E572  D002               	goto	u2500
  1600  00E574  0E01               	movlw	1
  1601  00E576  D001               	goto	u2510
  1602  00E578                     u2500:
  1603  00E578  0E00               	movlw	0
  1604  00E57A                     u2510:
  1605  00E57A  6E73               	movwf	_SW_MODE,c
  1606  00E57C  D000               	goto	l3877
  1607  00E57E                     l3877:
  1608                           
  1609                           ;Lab8.c: 1085: {
  1610                           ;Lab8.c: 1086: if (SW_MODE)
  1611  00E57E  5073               	movf	_SW_MODE,w,c
  1612  00E580  B4D8               	btfsc	status,2,c
  1613  00E582  D003               	goto	l3881
  1614                           
  1615                           ;Lab8.c: 1087: {
  1616                           ;Lab8.c: 1088: Day_Mode();
  1617  00E584  ECCA  F072         	call	_Day_Mode	;wreg free
  1618                           
  1619                           ;Lab8.c: 1089: }
  1620  00E588  D7FA               	goto	l3877
  1621  00E58A                     l3881:
  1622                           
  1623                           ;Lab8.c: 1090: else
  1624                           ;Lab8.c: 1091: {
  1625                           ;Lab8.c: 1092: Night_Mode();
  1626  00E58A  EC22  F072         	call	_Night_Mode	;wreg free
  1627  00E58E  D7F7               	goto	l3877
  1628  00E590  EF00  F000         	goto	start
  1629  00E594                     __end_of_main:
  1630                           	opt stack 0
  1631                           tblptru	equ	0xFF8
  1632                           tblptrh	equ	0xFF7
  1633                           tblptrl	equ	0xFF6
  1634                           tablat	equ	0xFF5
  1635                           intcon2	equ	0xFF1
  1636                           postinc0	equ	0xFEE
  1637                           wreg	equ	0xFE8
  1638                           postdec1	equ	0xFE5
  1639                           fsr1l	equ	0xFE1
  1640                           status	equ	0xFD8
  1641                           
  1642 ;; *************** function _init_UART *****************
  1643 ;; Defined at:
  1644 ;;		line 1055 in file "Lab8.c"
  1645 ;; Parameters:    Size  Location     Type
  1646 ;;		None
  1647 ;; Auto vars:     Size  Location     Type
  1648 ;;		None
  1649 ;; Return value:  Size  Location     Type
  1650 ;;		None               void
  1651 ;; Registers used:
  1652 ;;		wreg, status,2, cstack
  1653 ;; Tracked objects:
  1654 ;;		On entry : 0/0
  1655 ;;		On exit  : 0/0
  1656 ;;		Unchanged: 0/0
  1657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1662 ;;Total ram usage:        0 bytes
  1663 ;; Hardware stack levels used:    1
  1664 ;; Hardware stack levels required when called:    1
  1665 ;; This function calls:
  1666 ;;		_OpenUSART
  1667 ;; This function is called by:
  1668 ;;		_main
  1669 ;; This function uses a non-reentrant model
  1670 ;;
  1671                           
  1672                           	psect	text1
  1673  00DB14                     __ptext1:
  1674                           	opt stack 0
  1675  00DB14                     _init_UART:
  1676                           	opt stack 29
  1677                           
  1678                           ;Lab8.c: 1057: OpenUSART (0b01111111 & 0b10111111 &
  1679                           ;Lab8.c: 1058: 0b11111110 & 0b11111101 & 0b11111111 &
  1680                           ;Lab8.c: 1059: 0b11111111, 25);
  1681                           
  1682                           ;incstack = 0
  1683  00DB14  0E00               	movlw	0
  1684  00DB16  6E02               	movwf	OpenUSART@spbrg+1,c
  1685  00DB18  0E19               	movlw	25
  1686  00DB1A  6E01               	movwf	OpenUSART@spbrg,c
  1687  00DB1C  0E3C               	movlw	60
  1688  00DB1E  EC4A  F070         	call	_OpenUSART
  1689                           
  1690                           ;Lab8.c: 1060: OSCCON = 0x60;
  1691  00DB22  0E60               	movlw	96
  1692  00DB24  6ED3               	movwf	4051,c	;volatile
  1693  00DB26  0012               	return		;funcret
  1694  00DB28                     __end_of_init_UART:
  1695                           	opt stack 0
  1696                           tblptru	equ	0xFF8
  1697                           tblptrh	equ	0xFF7
  1698                           tblptrl	equ	0xFF6
  1699                           tablat	equ	0xFF5
  1700                           intcon2	equ	0xFF1
  1701                           postinc0	equ	0xFEE
  1702                           wreg	equ	0xFE8
  1703                           postdec1	equ	0xFE5
  1704                           fsr1l	equ	0xFE1
  1705                           status	equ	0xFD8
  1706                           
  1707 ;; *************** function _OpenUSART *****************
  1708 ;; Defined at:
  1709 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;  config          1    wreg     unsigned char 
  1712 ;;  spbrg           2    0[COMRAM] unsigned int 
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;  config          1    2[COMRAM] unsigned char 
  1715 ;; Return value:  Size  Location     Type
  1716 ;;		None               void
  1717 ;; Registers used:
  1718 ;;		wreg, status,2
  1719 ;; Tracked objects:
  1720 ;;		On entry : 0/0
  1721 ;;		On exit  : 0/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1724 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1725 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1727 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1728 ;;Total ram usage:        3 bytes
  1729 ;; Hardware stack levels used:    1
  1730 ;; This function calls:
  1731 ;;		Nothing
  1732 ;; This function is called by:
  1733 ;;		_init_UART
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737                           	psect	text2
  1738  00E094                     __ptext2:
  1739                           	opt stack 0
  1740  00E094                     _OpenUSART:
  1741                           	opt stack 29
  1742                           
  1743                           ;incstack = 0
  1744                           ;OpenUSART@config stored from wreg
  1745  00E094  6E03               	movwf	OpenUSART@config,c
  1746  00E096  0E00               	movlw	0
  1747  00E098  6EAC               	movwf	4012,c	;volatile
  1748  00E09A  0E00               	movlw	0
  1749  00E09C  6EAB               	movwf	4011,c	;volatile
  1750  00E09E  A003               	btfss	OpenUSART@config,0,c
  1751  00E0A0  D002               	goto	l3303
  1752  00E0A2  88AC               	bsf	4012,4,c	;volatile
  1753  00E0A4  D000               	goto	l3303
  1754  00E0A6                     l3303:
  1755  00E0A6  A203               	btfss	OpenUSART@config,1,c
  1756  00E0A8  D003               	goto	l3307
  1757  00E0AA  8CAC               	bsf	4012,6,c	;volatile
  1758  00E0AC  8CAB               	bsf	4011,6,c	;volatile
  1759  00E0AE  D000               	goto	l3307
  1760  00E0B0                     l3307:
  1761  00E0B0  A403               	btfss	OpenUSART@config,2,c
  1762  00E0B2  D002               	goto	l3311
  1763  00E0B4  8EAC               	bsf	4012,7,c	;volatile
  1764  00E0B6  D000               	goto	l3311
  1765  00E0B8                     l3311:
  1766  00E0B8  A603               	btfss	OpenUSART@config,3,c
  1767  00E0BA  D002               	goto	l516
  1768  00E0BC  88AB               	bsf	4011,4,c	;volatile
  1769  00E0BE  D002               	goto	l3315
  1770  00E0C0                     l516:
  1771  00E0C0  8AAB               	bsf	4011,5,c	;volatile
  1772  00E0C2  D000               	goto	l3315
  1773  00E0C4                     l3315:
  1774  00E0C4  B803               	btfsc	OpenUSART@config,4,c
  1775  00E0C6  84AC               	bsf	4012,2,c	;volatile
  1776  00E0C8  989E               	bcf	3998,4,c	;volatile
  1777  00E0CA  AA03               	btfss	OpenUSART@config,5,c
  1778  00E0CC  D002               	goto	l3323
  1779  00E0CE  86AB               	bsf	4011,3,c	;volatile
  1780  00E0D0  D000               	goto	l3323
  1781  00E0D2                     l3323:
  1782  00E0D2  AC03               	btfss	OpenUSART@config,6,c
  1783  00E0D4  D002               	goto	l520
  1784  00E0D6  8A9D               	bsf	3997,5,c	;volatile
  1785  00E0D8  D001               	goto	l521
  1786  00E0DA                     l520:
  1787  00E0DA  9A9D               	bcf	3997,5,c	;volatile
  1788  00E0DC                     l521:
  1789  00E0DC  9A9E               	bcf	3998,5,c	;volatile
  1790  00E0DE  AE03               	btfss	OpenUSART@config,7,c
  1791  00E0E0  D002               	goto	l522
  1792  00E0E2  889D               	bsf	3997,4,c	;volatile
  1793  00E0E4  D001               	goto	l523
  1794  00E0E6                     l522:
  1795  00E0E6  989D               	bcf	3997,4,c	;volatile
  1796  00E0E8                     l523:
  1797  00E0E8  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  1798  00E0EC  5002               	movf	OpenUSART@spbrg+1,w,c
  1799  00E0EE  6EB0               	movwf	4016,c	;volatile
  1800  00E0F0  8AAC               	bsf	4012,5,c	;volatile
  1801  00E0F2  8EAB               	bsf	4011,7,c	;volatile
  1802  00E0F4  9C94               	bcf	3988,6,c	;volatile
  1803  00E0F6  8E94               	bsf	3988,7,c	;volatile
  1804  00E0F8  B8AC               	btfsc	4012,4,c	;volatile
  1805  00E0FA  BEAC               	btfsc	4012,7,c	;volatile
  1806  00E0FC  D002               	goto	l525
  1807  00E0FE  8C94               	bsf	3988,6,c	;volatile
  1808  00E100  D000               	goto	l525
  1809  00E102                     l525:
  1810  00E102  0012               	return		;funcret
  1811  00E104                     __end_of_OpenUSART:
  1812                           	opt stack 0
  1813                           tblptru	equ	0xFF8
  1814                           tblptrh	equ	0xFF7
  1815                           tblptrl	equ	0xFF6
  1816                           tablat	equ	0xFF5
  1817                           intcon2	equ	0xFF1
  1818                           postinc0	equ	0xFEE
  1819                           wreg	equ	0xFE8
  1820                           postdec1	equ	0xFE5
  1821                           fsr1l	equ	0xFE1
  1822                           status	equ	0xFD8
  1823                           
  1824 ;; *************** function _init_IO *****************
  1825 ;; Defined at:
  1826 ;;		line 1098 in file "Lab8.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;		None
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;		None
  1831 ;; Return value:  Size  Location     Type
  1832 ;;		None               void
  1833 ;; Registers used:
  1834 ;;		wreg, status,2
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;Total ram usage:        0 bytes
  1845 ;; Hardware stack levels used:    1
  1846 ;; This function calls:
  1847 ;;		Nothing
  1848 ;; This function is called by:
  1849 ;;		_main
  1850 ;; This function uses a non-reentrant model
  1851 ;;
  1852                           
  1853                           	psect	text3
  1854  00DB3E                     __ptext3:
  1855                           	opt stack 0
  1856  00DB3E                     _init_IO:
  1857                           	opt stack 30
  1858                           
  1859                           ;Lab8.c: 1100: TRISA = 0x0F;
  1860                           
  1861                           ;incstack = 0
  1862  00DB3E  0E0F               	movlw	15
  1863  00DB40  6E92               	movwf	3986,c	;volatile
  1864                           
  1865                           ;Lab8.c: 1101: TRISB = 0x07;
  1866  00DB42  0E07               	movlw	7
  1867  00DB44  6E93               	movwf	3987,c	;volatile
  1868                           
  1869                           ;Lab8.c: 1102: TRISC = 0x00;
  1870  00DB46  0E00               	movlw	0
  1871  00DB48  6E94               	movwf	3988,c	;volatile
  1872                           
  1873                           ;Lab8.c: 1103: TRISD = 0x00;
  1874  00DB4A  0E00               	movlw	0
  1875  00DB4C  6E95               	movwf	3989,c	;volatile
  1876                           
  1877                           ;Lab8.c: 1104: TRISE = 0x00;
  1878  00DB4E  0E00               	movlw	0
  1879  00DB50  6E96               	movwf	3990,c	;volatile
  1880  00DB52  0012               	return		;funcret
  1881  00DB54                     __end_of_init_IO:
  1882                           	opt stack 0
  1883                           tblptru	equ	0xFF8
  1884                           tblptrh	equ	0xFF7
  1885                           tblptrl	equ	0xFF6
  1886                           tablat	equ	0xFF5
  1887                           intcon2	equ	0xFF1
  1888                           postinc0	equ	0xFEE
  1889                           wreg	equ	0xFE8
  1890                           postdec1	equ	0xFE5
  1891                           fsr1l	equ	0xFE1
  1892                           status	equ	0xFD8
  1893                           
  1894 ;; *************** function _Night_Mode *****************
  1895 ;; Defined at:
  1896 ;;		line 1258 in file "Lab8.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;		None
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;		None
  1901 ;; Return value:  Size  Location     Type
  1902 ;;		None               void
  1903 ;; Registers used:
  1904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1914 ;;Total ram usage:        0 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:   10
  1917 ;; This function calls:
  1918 ;;		_Set_EW
  1919 ;;		_Set_EW_LT
  1920 ;;		_Set_NS
  1921 ;;		_Set_NS_LT
  1922 ;;		_Wait_N_Seconds
  1923 ;; This function is called by:
  1924 ;;		_main
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928                           	psect	text4
  1929  00E444                     __ptext4:
  1930                           	opt stack 0
  1931  00E444                     _Night_Mode:
  1932                           	opt stack 20
  1933                           
  1934                           ;Lab8.c: 1260: MODE = 0;
  1935                           
  1936                           ;incstack = 0
  1937  00E444  0E00               	movlw	0
  1938  00E446  6E68               	movwf	_MODE+1,c
  1939  00E448  0E00               	movlw	0
  1940  00E44A  6E67               	movwf	_MODE,c
  1941                           
  1942                           ;Lab8.c: 1261: PORTEbits.RE1 = 0;
  1943  00E44C  9284               	bcf	3972,1,c	;volatile
  1944                           
  1945                           ;Lab8.c: 1262: Act_Mode_Txt[0] = 'N';
  1946  00E44E  0E4E               	movlw	78
  1947  00E450  6E54               	movwf	_Act_Mode_Txt,c
  1948                           
  1949                           ;Lab8.c: 1264: Set_NS_LT(1);
  1950  00E452  0E01               	movlw	1
  1951  00E454  EC57  F06F         	call	_Set_NS_LT
  1952                           
  1953                           ;Lab8.c: 1265: Set_EW(1);
  1954  00E458  0E01               	movlw	1
  1955  00E45A  ECF1  F06E         	call	_Set_EW
  1956                           
  1957                           ;Lab8.c: 1266: Set_EW_LT(1);
  1958  00E45E  0E01               	movlw	1
  1959  00E460  EC13  F06F         	call	_Set_EW_LT
  1960                           
  1961                           ;Lab8.c: 1267: Set_NS(2);
  1962  00E464  0E02               	movlw	2
  1963  00E466  EC35  F06F         	call	_Set_NS
  1964                           
  1965                           ;Lab8.c: 1269: Wait_N_Seconds(6);
  1966  00E46A  0E06               	movlw	6
  1967  00E46C  EC13  F06E         	call	_Wait_N_Seconds
  1968                           
  1969                           ;Lab8.c: 1271: Set_NS(3);
  1970  00E470  0E03               	movlw	3
  1971  00E472  EC35  F06F         	call	_Set_NS
  1972                           
  1973                           ;Lab8.c: 1272: Wait_N_Seconds(3);
  1974  00E476  0E03               	movlw	3
  1975  00E478  EC13  F06E         	call	_Wait_N_Seconds
  1976                           
  1977                           ;Lab8.c: 1274: Set_NS(1);
  1978  00E47C  0E01               	movlw	1
  1979  00E47E  EC35  F06F         	call	_Set_NS
  1980                           
  1981                           ;Lab8.c: 1276: if (PORTAbits.RA4 == 1)
  1982  00E482  A880               	btfss	3968,4,c	;volatile
  1983  00E484  D010               	goto	l3611
  1984                           
  1985                           ;Lab8.c: 1277: {
  1986                           ;Lab8.c: 1278: Set_EW_LT(2);
  1987  00E486  0E02               	movlw	2
  1988  00E488  EC13  F06F         	call	_Set_EW_LT
  1989                           
  1990                           ;Lab8.c: 1279: Wait_N_Seconds(6);
  1991  00E48C  0E06               	movlw	6
  1992  00E48E  EC13  F06E         	call	_Wait_N_Seconds
  1993                           
  1994                           ;Lab8.c: 1280: Set_EW_LT(3);
  1995  00E492  0E03               	movlw	3
  1996  00E494  EC13  F06F         	call	_Set_EW_LT
  1997                           
  1998                           ;Lab8.c: 1281: Wait_N_Seconds(3);
  1999  00E498  0E03               	movlw	3
  2000  00E49A  EC13  F06E         	call	_Wait_N_Seconds
  2001                           
  2002                           ;Lab8.c: 1282: Set_EW_LT(1);
  2003  00E49E  0E01               	movlw	1
  2004  00E4A0  EC13  F06F         	call	_Set_EW_LT
  2005  00E4A4  D000               	goto	l3611
  2006  00E4A6                     l3611:
  2007                           
  2008                           ;Lab8.c: 1283: }
  2009                           ;Lab8.c: 1285: Set_EW(2);
  2010  00E4A6  0E02               	movlw	2
  2011  00E4A8  ECF1  F06E         	call	_Set_EW
  2012                           
  2013                           ;Lab8.c: 1286: Wait_N_Seconds(6);
  2014  00E4AC  0E06               	movlw	6
  2015  00E4AE  EC13  F06E         	call	_Wait_N_Seconds
  2016                           
  2017                           ;Lab8.c: 1288: Set_EW(3);
  2018  00E4B2  0E03               	movlw	3
  2019  00E4B4  ECF1  F06E         	call	_Set_EW
  2020                           
  2021                           ;Lab8.c: 1289: Wait_N_Seconds(3);
  2022  00E4B8  0E03               	movlw	3
  2023  00E4BA  EC13  F06E         	call	_Wait_N_Seconds
  2024                           
  2025                           ;Lab8.c: 1291: Set_EW(1);
  2026  00E4BE  0E01               	movlw	1
  2027  00E4C0  ECF1  F06E         	call	_Set_EW
  2028                           
  2029                           ;Lab8.c: 1293: if (PORTAbits.RA2 == 1)
  2030  00E4C4  A480               	btfss	3968,2,c	;volatile
  2031  00E4C6  D010               	goto	l440
  2032                           
  2033                           ;Lab8.c: 1294: {
  2034                           ;Lab8.c: 1295: Set_NS_LT(2);
  2035  00E4C8  0E02               	movlw	2
  2036  00E4CA  EC57  F06F         	call	_Set_NS_LT
  2037                           
  2038                           ;Lab8.c: 1296: Wait_N_Seconds(8);
  2039  00E4CE  0E08               	movlw	8
  2040  00E4D0  EC13  F06E         	call	_Wait_N_Seconds
  2041                           
  2042                           ;Lab8.c: 1297: Set_NS_LT(3);
  2043  00E4D4  0E03               	movlw	3
  2044  00E4D6  EC57  F06F         	call	_Set_NS_LT
  2045                           
  2046                           ;Lab8.c: 1298: Wait_N_Seconds(3);
  2047  00E4DA  0E03               	movlw	3
  2048  00E4DC  EC13  F06E         	call	_Wait_N_Seconds
  2049                           
  2050                           ;Lab8.c: 1299: Set_NS_LT(1);
  2051  00E4E0  0E01               	movlw	1
  2052  00E4E2  EC57  F06F         	call	_Set_NS_LT
  2053  00E4E6  D000               	goto	l440
  2054  00E4E8                     l440:
  2055  00E4E8  0012               	return		;funcret
  2056  00E4EA                     __end_of_Night_Mode:
  2057                           	opt stack 0
  2058                           tblptru	equ	0xFF8
  2059                           tblptrh	equ	0xFF7
  2060                           tblptrl	equ	0xFF6
  2061                           tablat	equ	0xFF5
  2062                           intcon2	equ	0xFF1
  2063                           postinc0	equ	0xFEE
  2064                           wreg	equ	0xFE8
  2065                           postdec1	equ	0xFE5
  2066                           fsr1l	equ	0xFE1
  2067                           status	equ	0xFD8
  2068                           
  2069 ;; *************** function _Initialize_Screen *****************
  2070 ;; Defined at:
  2071 ;;		line 967 in file "Lab8.c"
  2072 ;; Parameters:    Size  Location     Type
  2073 ;;		None
  2074 ;; Auto vars:     Size  Location     Type
  2075 ;;		None
  2076 ;; Return value:  Size  Location     Type
  2077 ;;		None               void
  2078 ;; Registers used:
  2079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2080 ;; Tracked objects:
  2081 ;;		On entry : 0/0
  2082 ;;		On exit  : 0/0
  2083 ;;		Unchanged: 0/0
  2084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2089 ;;Total ram usage:        0 bytes
  2090 ;; Hardware stack levels used:    1
  2091 ;; Hardware stack levels required when called:    7
  2092 ;; This function calls:
  2093 ;;		_LCD_Reset
  2094 ;;		_TFT_GreenTab_Initialize
  2095 ;;		_drawCircle
  2096 ;;		_drawRect
  2097 ;;		_drawtext
  2098 ;;		_fillCircle
  2099 ;;		_fillScreen
  2100 ;;		_strcpy
  2101 ;; This function is called by:
  2102 ;;		_main
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           	psect	text5
  2107  00F69C                     __ptext5:
  2108                           	opt stack 0
  2109  00F69C                     _Initialize_Screen:
  2110                           	opt stack 23
  2111                           
  2112                           ;Lab8.c: 969: LCD_Reset();
  2113                           
  2114                           ;incstack = 0
  2115  00F69C  EC77  F06D         	call	_LCD_Reset	;wreg free
  2116                           
  2117                           ;Lab8.c: 970: TFT_GreenTab_Initialize();
  2118  00F6A0  ECFE  F06D         	call	_TFT_GreenTab_Initialize	;wreg free
  2119                           
  2120                           ;Lab8.c: 971: fillScreen(0x0000);
  2121  00F6A4  0E00               	movlw	0
  2122  00F6A6  6E15               	movwf	fillScreen@color+1,c
  2123  00F6A8  0E00               	movlw	0
  2124  00F6AA  6E14               	movwf	fillScreen@color,c
  2125  00F6AC  ECB7  F06D         	call	_fillScreen	;wreg free
  2126                           
  2127                           ;Lab8.c: 974: txt = buffer;
  2128  00F6B0  0E80               	movlw	low _buffer
  2129  00F6B2  6E6B               	movwf	_txt,c
  2130  00F6B4  0E00               	movlw	high _buffer
  2131  00F6B6  6E6C               	movwf	_txt+1,c
  2132                           
  2133                           ;Lab8.c: 975: strcpy(txt, "ECE3301L Spring 21-S3");
  2134  00F6B8  C06B  F001         	movff	_txt,strcpy@to
  2135  00F6BC  C06C  F002         	movff	_txt+1,strcpy@to+1
  2136  00F6C0  0E96               	movlw	low STR_1
  2137  00F6C2  6E03               	movwf	strcpy@from,c
  2138  00F6C4  0EFF               	movlw	high STR_1
  2139  00F6C6  6E04               	movwf	strcpy@from+1,c
  2140  00F6C8  EC5B  F06E         	call	_strcpy	;wreg free
  2141                           
  2142                           ;Lab8.c: 976: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2143  00F6CC  0E02               	movlw	2
  2144  00F6CE  6E29               	movwf	drawtext@y,c
  2145  00F6D0  C06B  F02A         	movff	_txt,drawtext@_text
  2146  00F6D4  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2147  00F6D8  0EFF               	movlw	255
  2148  00F6DA  6E2D               	movwf	drawtext@color+1,c
  2149  00F6DC  682C               	setf	drawtext@color,c
  2150  00F6DE  0E00               	movlw	0
  2151  00F6E0  6E2F               	movwf	drawtext@bg+1,c
  2152  00F6E2  0E00               	movlw	0
  2153  00F6E4  6E2E               	movwf	drawtext@bg,c
  2154  00F6E6  0E01               	movlw	1
  2155  00F6E8  6E30               	movwf	drawtext@size,c
  2156  00F6EA  0E02               	movlw	2
  2157  00F6EC  ECC0  F074         	call	_drawtext
  2158                           
  2159                           ;Lab8.c: 979: strcpy(txt, "Mode:");
  2160  00F6F0  C06B  F001         	movff	_txt,strcpy@to
  2161  00F6F4  C06C  F002         	movff	_txt+1,strcpy@to+1
  2162  00F6F8  0EE5               	movlw	low STR_2
  2163  00F6FA  6E03               	movwf	strcpy@from,c
  2164  00F6FC  0EFF               	movlw	high STR_2
  2165  00F6FE  6E04               	movwf	strcpy@from+1,c
  2166  00F700  EC5B  F06E         	call	_strcpy	;wreg free
  2167                           
  2168                           ;Lab8.c: 980: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  2169  00F704  0E0A               	movlw	10
  2170  00F706  6E29               	movwf	drawtext@y,c
  2171  00F708  C06B  F02A         	movff	_txt,drawtext@_text
  2172  00F70C  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2173  00F710  0EFF               	movlw	255
  2174  00F712  6E2D               	movwf	drawtext@color+1,c
  2175  00F714  682C               	setf	drawtext@color,c
  2176  00F716  0E00               	movlw	0
  2177  00F718  6E2F               	movwf	drawtext@bg+1,c
  2178  00F71A  0E00               	movlw	0
  2179  00F71C  6E2E               	movwf	drawtext@bg,c
  2180  00F71E  0E01               	movlw	1
  2181  00F720  6E30               	movwf	drawtext@size,c
  2182  00F722  0E02               	movlw	2
  2183  00F724  ECC0  F074         	call	_drawtext
  2184                           
  2185                           ;Lab8.c: 981: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2186  00F728  0E0A               	movlw	10
  2187  00F72A  6E29               	movwf	drawtext@y,c
  2188  00F72C  0E54               	movlw	low _Act_Mode_Txt
  2189  00F72E  6E2A               	movwf	drawtext@_text,c
  2190  00F730  0E00               	movlw	high _Act_Mode_Txt
  2191  00F732  6E2B               	movwf	drawtext@_text+1,c
  2192  00F734  0EFF               	movlw	255
  2193  00F736  6E2D               	movwf	drawtext@color+1,c
  2194  00F738  682C               	setf	drawtext@color,c
  2195  00F73A  0E00               	movlw	0
  2196  00F73C  6E2F               	movwf	drawtext@bg+1,c
  2197  00F73E  0E00               	movlw	0
  2198  00F740  6E2E               	movwf	drawtext@bg,c
  2199  00F742  0E01               	movlw	1
  2200  00F744  6E30               	movwf	drawtext@size,c
  2201  00F746  0E23               	movlw	35
  2202  00F748  ECC0  F074         	call	_drawtext
  2203                           
  2204                           ;Lab8.c: 984: strcpy(txt, "FR:");
  2205  00F74C  C06B  F001         	movff	_txt,strcpy@to
  2206  00F750  C06C  F002         	movff	_txt+1,strcpy@to+1
  2207  00F754  0EEB               	movlw	low STR_3
  2208  00F756  6E03               	movwf	strcpy@from,c
  2209  00F758  0EFF               	movlw	high STR_3
  2210  00F75A  6E04               	movwf	strcpy@from+1,c
  2211  00F75C  EC5B  F06E         	call	_strcpy	;wreg free
  2212                           
  2213                           ;Lab8.c: 985: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  2214  00F760  0E0A               	movlw	10
  2215  00F762  6E29               	movwf	drawtext@y,c
  2216  00F764  C06B  F02A         	movff	_txt,drawtext@_text
  2217  00F768  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2218  00F76C  0EFF               	movlw	255
  2219  00F76E  6E2D               	movwf	drawtext@color+1,c
  2220  00F770  682C               	setf	drawtext@color,c
  2221  00F772  0E00               	movlw	0
  2222  00F774  6E2F               	movwf	drawtext@bg+1,c
  2223  00F776  0E00               	movlw	0
  2224  00F778  6E2E               	movwf	drawtext@bg,c
  2225  00F77A  0E01               	movlw	1
  2226  00F77C  6E30               	movwf	drawtext@size,c
  2227  00F77E  0E32               	movlw	50
  2228  00F780  ECC0  F074         	call	_drawtext
  2229                           
  2230                           ;Lab8.c: 986: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2231  00F784  0E0A               	movlw	10
  2232  00F786  6E29               	movwf	drawtext@y,c
  2233  00F788  0E56               	movlw	low _FlashingR_Txt
  2234  00F78A  6E2A               	movwf	drawtext@_text,c
  2235  00F78C  0E00               	movlw	high _FlashingR_Txt
  2236  00F78E  6E2B               	movwf	drawtext@_text+1,c
  2237  00F790  0EFF               	movlw	255
  2238  00F792  6E2D               	movwf	drawtext@color+1,c
  2239  00F794  682C               	setf	drawtext@color,c
  2240  00F796  0E00               	movlw	0
  2241  00F798  6E2F               	movwf	drawtext@bg+1,c
  2242  00F79A  0E00               	movlw	0
  2243  00F79C  6E2E               	movwf	drawtext@bg,c
  2244  00F79E  0E01               	movlw	1
  2245  00F7A0  6E30               	movwf	drawtext@size,c
  2246  00F7A2  0E46               	movlw	70
  2247  00F7A4  ECC0  F074         	call	_drawtext
  2248                           
  2249                           ;Lab8.c: 989: strcpy(txt, "FS:");
  2250  00F7A8  C06B  F001         	movff	_txt,strcpy@to
  2251  00F7AC  C06C  F002         	movff	_txt+1,strcpy@to+1
  2252  00F7B0  0EEF               	movlw	low STR_4
  2253  00F7B2  6E03               	movwf	strcpy@from,c
  2254  00F7B4  0EFF               	movlw	high STR_4
  2255  00F7B6  6E04               	movwf	strcpy@from+1,c
  2256  00F7B8  EC5B  F06E         	call	_strcpy	;wreg free
  2257                           
  2258                           ;Lab8.c: 990: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  2259  00F7BC  0E0A               	movlw	10
  2260  00F7BE  6E29               	movwf	drawtext@y,c
  2261  00F7C0  C06B  F02A         	movff	_txt,drawtext@_text
  2262  00F7C4  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2263  00F7C8  0EFF               	movlw	255
  2264  00F7CA  6E2D               	movwf	drawtext@color+1,c
  2265  00F7CC  682C               	setf	drawtext@color,c
  2266  00F7CE  0E00               	movlw	0
  2267  00F7D0  6E2F               	movwf	drawtext@bg+1,c
  2268  00F7D2  0E00               	movlw	0
  2269  00F7D4  6E2E               	movwf	drawtext@bg,c
  2270  00F7D6  0E01               	movlw	1
  2271  00F7D8  6E30               	movwf	drawtext@size,c
  2272  00F7DA  0E50               	movlw	80
  2273  00F7DC  ECC0  F074         	call	_drawtext
  2274                           
  2275                           ;Lab8.c: 991: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  2276  00F7E0  0E0A               	movlw	10
  2277  00F7E2  6E29               	movwf	drawtext@y,c
  2278  00F7E4  0E58               	movlw	low _FlashingS_Txt
  2279  00F7E6  6E2A               	movwf	drawtext@_text,c
  2280  00F7E8  0E00               	movlw	high _FlashingS_Txt
  2281  00F7EA  6E2B               	movwf	drawtext@_text+1,c
  2282  00F7EC  0EFF               	movlw	255
  2283  00F7EE  6E2D               	movwf	drawtext@color+1,c
  2284  00F7F0  682C               	setf	drawtext@color,c
  2285  00F7F2  0E00               	movlw	0
  2286  00F7F4  6E2F               	movwf	drawtext@bg+1,c
  2287  00F7F6  0E00               	movlw	0
  2288  00F7F8  6E2E               	movwf	drawtext@bg,c
  2289  00F7FA  0E01               	movlw	1
  2290  00F7FC  6E30               	movwf	drawtext@size,c
  2291  00F7FE  0E64               	movlw	100
  2292  00F800  ECC0  F074         	call	_drawtext
  2293                           
  2294                           ;Lab8.c: 994: strcpy(txt, "*");
  2295  00F804  C06B  F001         	movff	_txt,strcpy@to
  2296  00F808  C06C  F002         	movff	_txt+1,strcpy@to+1
  2297  00F80C  0EFD               	movlw	low STR_5
  2298  00F80E  6E03               	movwf	strcpy@from,c
  2299  00F810  0EFF               	movlw	high STR_5
  2300  00F812  6E04               	movwf	strcpy@from+1,c
  2301  00F814  EC5B  F06E         	call	_strcpy	;wreg free
  2302                           
  2303                           ;Lab8.c: 995: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  2304  00F818  0E0A               	movlw	10
  2305  00F81A  6E29               	movwf	drawtext@y,c
  2306  00F81C  C06B  F02A         	movff	_txt,drawtext@_text
  2307  00F820  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2308  00F824  0EFF               	movlw	255
  2309  00F826  6E2D               	movwf	drawtext@color+1,c
  2310  00F828  682C               	setf	drawtext@color,c
  2311  00F82A  0E00               	movlw	0
  2312  00F82C  6E2F               	movwf	drawtext@bg+1,c
  2313  00F82E  0E00               	movlw	0
  2314  00F830  6E2E               	movwf	drawtext@bg,c
  2315  00F832  0E01               	movlw	1
  2316  00F834  6E30               	movwf	drawtext@size,c
  2317  00F836  0E78               	movlw	120
  2318  00F838  ECC0  F074         	call	_drawtext
  2319                           
  2320                           ;Lab8.c: 998: strcpy(txt, "EAST/WEST");
  2321  00F83C  C06B  F001         	movff	_txt,strcpy@to
  2322  00F840  C06C  F002         	movff	_txt+1,strcpy@to+1
  2323  00F844  0ECD               	movlw	low STR_6
  2324  00F846  6E03               	movwf	strcpy@from,c
  2325  00F848  0EFF               	movlw	high STR_6
  2326  00F84A  6E04               	movwf	strcpy@from+1,c
  2327  00F84C  EC5B  F06E         	call	_strcpy	;wreg free
  2328                           
  2329                           ;Lab8.c: 999: drawtext (30, 20, txt, 0x07FF, 0x0000, 1);
  2330  00F850  0E14               	movlw	20
  2331  00F852  6E29               	movwf	drawtext@y,c
  2332  00F854  C06B  F02A         	movff	_txt,drawtext@_text
  2333  00F858  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2334  00F85C  0E07               	movlw	7
  2335  00F85E  6E2D               	movwf	drawtext@color+1,c
  2336  00F860  682C               	setf	drawtext@color,c
  2337  00F862  0E00               	movlw	0
  2338  00F864  6E2F               	movwf	drawtext@bg+1,c
  2339  00F866  0E00               	movlw	0
  2340  00F868  6E2E               	movwf	drawtext@bg,c
  2341  00F86A  0E01               	movlw	1
  2342  00F86C  6E30               	movwf	drawtext@size,c
  2343  00F86E  0E1E               	movlw	30
  2344  00F870  ECC0  F074         	call	_drawtext
  2345                           
  2346                           ;Lab8.c: 1000: drawRect (30, 20 + 15-8, 60, 18, 0x07FF);
  2347  00F874  0E00               	movlw	0
  2348  00F876  6E14               	movwf	drawRect@x+1,c
  2349  00F878  0E1E               	movlw	30
  2350  00F87A  6E13               	movwf	drawRect@x,c
  2351  00F87C  0E00               	movlw	0
  2352  00F87E  6E16               	movwf	drawRect@y+1,c
  2353  00F880  0E1B               	movlw	27
  2354  00F882  6E15               	movwf	drawRect@y,c
  2355  00F884  0E00               	movlw	0
  2356  00F886  6E18               	movwf	drawRect@w+1,c
  2357  00F888  0E3C               	movlw	60
  2358  00F88A  6E17               	movwf	drawRect@w,c
  2359  00F88C  0E00               	movlw	0
  2360  00F88E  6E1A               	movwf	drawRect@h+1,c
  2361  00F890  0E12               	movlw	18
  2362  00F892  6E19               	movwf	drawRect@h,c
  2363  00F894  0E07               	movlw	7
  2364  00F896  6E1C               	movwf	drawRect@color+1,c
  2365  00F898  681B               	setf	drawRect@color,c
  2366  00F89A  EC17  F070         	call	_drawRect	;wreg free
  2367                           
  2368                           ;Lab8.c: 1001: drawCircle(40, 20 + 15, 7, 0xF800);
  2369  00F89E  0E00               	movlw	0
  2370  00F8A0  6E0D               	movwf	drawCircle@x0+1,c
  2371  00F8A2  0E28               	movlw	40
  2372  00F8A4  6E0C               	movwf	drawCircle@x0,c
  2373  00F8A6  0E00               	movlw	0
  2374  00F8A8  6E0F               	movwf	drawCircle@y0+1,c
  2375  00F8AA  0E23               	movlw	35
  2376  00F8AC  6E0E               	movwf	drawCircle@y0,c
  2377  00F8AE  0E00               	movlw	0
  2378  00F8B0  6E11               	movwf	drawCircle@r+1,c
  2379  00F8B2  0E07               	movlw	7
  2380  00F8B4  6E10               	movwf	drawCircle@r,c
  2381  00F8B6  0EF8               	movlw	248
  2382  00F8B8  6E13               	movwf	drawCircle@color+1,c
  2383  00F8BA  0E00               	movlw	0
  2384  00F8BC  6E12               	movwf	drawCircle@color,c
  2385  00F8BE  ECE8  F077         	call	_drawCircle	;wreg free
  2386                           
  2387                           ;Lab8.c: 1002: drawCircle(60, 20 + 15, 7, 0xFFE0);
  2388  00F8C2  0E00               	movlw	0
  2389  00F8C4  6E0D               	movwf	drawCircle@x0+1,c
  2390  00F8C6  0E3C               	movlw	60
  2391  00F8C8  6E0C               	movwf	drawCircle@x0,c
  2392  00F8CA  0E00               	movlw	0
  2393  00F8CC  6E0F               	movwf	drawCircle@y0+1,c
  2394  00F8CE  0E23               	movlw	35
  2395  00F8D0  6E0E               	movwf	drawCircle@y0,c
  2396  00F8D2  0E00               	movlw	0
  2397  00F8D4  6E11               	movwf	drawCircle@r+1,c
  2398  00F8D6  0E07               	movlw	7
  2399  00F8D8  6E10               	movwf	drawCircle@r,c
  2400  00F8DA  0EFF               	movlw	255
  2401  00F8DC  6E13               	movwf	drawCircle@color+1,c
  2402  00F8DE  0EE0               	movlw	224
  2403  00F8E0  6E12               	movwf	drawCircle@color,c
  2404  00F8E2  ECE8  F077         	call	_drawCircle	;wreg free
  2405                           
  2406                           ;Lab8.c: 1003: fillCircle(80, 20 + 15, 7, 0x07E0);
  2407  00F8E6  0E00               	movlw	0
  2408  00F8E8  6E2C               	movwf	fillCircle@x0+1,c
  2409  00F8EA  0E50               	movlw	80
  2410  00F8EC  6E2B               	movwf	fillCircle@x0,c
  2411  00F8EE  0E00               	movlw	0
  2412  00F8F0  6E2E               	movwf	fillCircle@y0+1,c
  2413  00F8F2  0E23               	movlw	35
  2414  00F8F4  6E2D               	movwf	fillCircle@y0,c
  2415  00F8F6  0E00               	movlw	0
  2416  00F8F8  6E30               	movwf	fillCircle@r+1,c
  2417  00F8FA  0E07               	movlw	7
  2418  00F8FC  6E2F               	movwf	fillCircle@r,c
  2419  00F8FE  0E07               	movlw	7
  2420  00F900  6E32               	movwf	fillCircle@color+1,c
  2421  00F902  0EE0               	movlw	224
  2422  00F904  6E31               	movwf	fillCircle@color,c
  2423  00F906  ECC5  F06F         	call	_fillCircle	;wreg free
  2424                           
  2425                           ;Lab8.c: 1004: drawtext (100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2426  00F90A  0E1E               	movlw	30
  2427  00F90C  6E29               	movwf	drawtext@y,c
  2428  00F90E  0E45               	movlw	low _EW_Count
  2429  00F910  6E2A               	movwf	drawtext@_text,c
  2430  00F912  0E00               	movlw	high _EW_Count
  2431  00F914  6E2B               	movwf	drawtext@_text+1,c
  2432  00F916  0E07               	movlw	7
  2433  00F918  6E2D               	movwf	drawtext@color+1,c
  2434  00F91A  682C               	setf	drawtext@color,c
  2435  00F91C  0E00               	movlw	0
  2436  00F91E  6E2F               	movwf	drawtext@bg+1,c
  2437  00F920  0E00               	movlw	0
  2438  00F922  6E2E               	movwf	drawtext@bg,c
  2439  00F924  0E02               	movlw	2
  2440  00F926  6E30               	movwf	drawtext@size,c
  2441  00F928  0E64               	movlw	100
  2442  00F92A  ECC0  F074         	call	_drawtext
  2443                           
  2444                           ;Lab8.c: 1008: strcpy(txt, "E/W LT");
  2445  00F92E  C06B  F001         	movff	_txt,strcpy@to
  2446  00F932  C06C  F002         	movff	_txt+1,strcpy@to+1
  2447  00F936  0EDE               	movlw	low STR_7
  2448  00F938  6E03               	movwf	strcpy@from,c
  2449  00F93A  0EFF               	movlw	high STR_7
  2450  00F93C  6E04               	movwf	strcpy@from+1,c
  2451  00F93E  EC5B  F06E         	call	_strcpy	;wreg free
  2452                           
  2453                           ;Lab8.c: 1009: drawtext (30, 50, txt, 0xFFFF, 0x0000, 1);
  2454  00F942  0E32               	movlw	50
  2455  00F944  6E29               	movwf	drawtext@y,c
  2456  00F946  C06B  F02A         	movff	_txt,drawtext@_text
  2457  00F94A  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2458  00F94E  0EFF               	movlw	255
  2459  00F950  6E2D               	movwf	drawtext@color+1,c
  2460  00F952  682C               	setf	drawtext@color,c
  2461  00F954  0E00               	movlw	0
  2462  00F956  6E2F               	movwf	drawtext@bg+1,c
  2463  00F958  0E00               	movlw	0
  2464  00F95A  6E2E               	movwf	drawtext@bg,c
  2465  00F95C  0E01               	movlw	1
  2466  00F95E  6E30               	movwf	drawtext@size,c
  2467  00F960  0E1E               	movlw	30
  2468  00F962  ECC0  F074         	call	_drawtext
  2469                           
  2470                           ;Lab8.c: 1010: drawRect (30, 50 + 15-8, 60, 18, 0xFFFF);
  2471  00F966  0E00               	movlw	0
  2472  00F968  6E14               	movwf	drawRect@x+1,c
  2473  00F96A  0E1E               	movlw	30
  2474  00F96C  6E13               	movwf	drawRect@x,c
  2475  00F96E  0E00               	movlw	0
  2476  00F970  6E16               	movwf	drawRect@y+1,c
  2477  00F972  0E39               	movlw	57
  2478  00F974  6E15               	movwf	drawRect@y,c
  2479  00F976  0E00               	movlw	0
  2480  00F978  6E18               	movwf	drawRect@w+1,c
  2481  00F97A  0E3C               	movlw	60
  2482  00F97C  6E17               	movwf	drawRect@w,c
  2483  00F97E  0E00               	movlw	0
  2484  00F980  6E1A               	movwf	drawRect@h+1,c
  2485  00F982  0E12               	movlw	18
  2486  00F984  6E19               	movwf	drawRect@h,c
  2487  00F986  0EFF               	movlw	255
  2488  00F988  6E1C               	movwf	drawRect@color+1,c
  2489  00F98A  681B               	setf	drawRect@color,c
  2490  00F98C  EC17  F070         	call	_drawRect	;wreg free
  2491                           
  2492                           ;Lab8.c: 1011: fillCircle(40, 50 + 15, 7, 0xF800);
  2493  00F990  0E00               	movlw	0
  2494  00F992  6E2C               	movwf	fillCircle@x0+1,c
  2495  00F994  0E28               	movlw	40
  2496  00F996  6E2B               	movwf	fillCircle@x0,c
  2497  00F998  0E00               	movlw	0
  2498  00F99A  6E2E               	movwf	fillCircle@y0+1,c
  2499  00F99C  0E41               	movlw	65
  2500  00F99E  6E2D               	movwf	fillCircle@y0,c
  2501  00F9A0  0E00               	movlw	0
  2502  00F9A2  6E30               	movwf	fillCircle@r+1,c
  2503  00F9A4  0E07               	movlw	7
  2504  00F9A6  6E2F               	movwf	fillCircle@r,c
  2505  00F9A8  0EF8               	movlw	248
  2506  00F9AA  6E32               	movwf	fillCircle@color+1,c
  2507  00F9AC  0E00               	movlw	0
  2508  00F9AE  6E31               	movwf	fillCircle@color,c
  2509  00F9B0  ECC5  F06F         	call	_fillCircle	;wreg free
  2510                           
  2511                           ;Lab8.c: 1012: drawCircle(60, 50 + 15, 7, 0xFFE0);
  2512  00F9B4  0E00               	movlw	0
  2513  00F9B6  6E0D               	movwf	drawCircle@x0+1,c
  2514  00F9B8  0E3C               	movlw	60
  2515  00F9BA  6E0C               	movwf	drawCircle@x0,c
  2516  00F9BC  0E00               	movlw	0
  2517  00F9BE  6E0F               	movwf	drawCircle@y0+1,c
  2518  00F9C0  0E41               	movlw	65
  2519  00F9C2  6E0E               	movwf	drawCircle@y0,c
  2520  00F9C4  0E00               	movlw	0
  2521  00F9C6  6E11               	movwf	drawCircle@r+1,c
  2522  00F9C8  0E07               	movlw	7
  2523  00F9CA  6E10               	movwf	drawCircle@r,c
  2524  00F9CC  0EFF               	movlw	255
  2525  00F9CE  6E13               	movwf	drawCircle@color+1,c
  2526  00F9D0  0EE0               	movlw	224
  2527  00F9D2  6E12               	movwf	drawCircle@color,c
  2528  00F9D4  ECE8  F077         	call	_drawCircle	;wreg free
  2529                           
  2530                           ;Lab8.c: 1013: drawCircle(80, 50 + 15, 7, 0x07E0);
  2531  00F9D8  0E00               	movlw	0
  2532  00F9DA  6E0D               	movwf	drawCircle@x0+1,c
  2533  00F9DC  0E50               	movlw	80
  2534  00F9DE  6E0C               	movwf	drawCircle@x0,c
  2535  00F9E0  0E00               	movlw	0
  2536  00F9E2  6E0F               	movwf	drawCircle@y0+1,c
  2537  00F9E4  0E41               	movlw	65
  2538  00F9E6  6E0E               	movwf	drawCircle@y0,c
  2539  00F9E8  0E00               	movlw	0
  2540  00F9EA  6E11               	movwf	drawCircle@r+1,c
  2541  00F9EC  0E07               	movlw	7
  2542  00F9EE  6E10               	movwf	drawCircle@r,c
  2543  00F9F0  0E07               	movlw	7
  2544  00F9F2  6E13               	movwf	drawCircle@color+1,c
  2545  00F9F4  0EE0               	movlw	224
  2546  00F9F6  6E12               	movwf	drawCircle@color,c
  2547  00F9F8  ECE8  F077         	call	_drawCircle	;wreg free
  2548                           
  2549                           ;Lab8.c: 1014: drawtext (100, 50 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2550  00F9FC  0E3C               	movlw	60
  2551  00F9FE  6E29               	movwf	drawtext@y,c
  2552  00FA00  0E42               	movlw	low _EWLT_Count
  2553  00FA02  6E2A               	movwf	drawtext@_text,c
  2554  00FA04  0E00               	movlw	high _EWLT_Count
  2555  00FA06  6E2B               	movwf	drawtext@_text+1,c
  2556  00FA08  0EFF               	movlw	255
  2557  00FA0A  6E2D               	movwf	drawtext@color+1,c
  2558  00FA0C  682C               	setf	drawtext@color,c
  2559  00FA0E  0E00               	movlw	0
  2560  00FA10  6E2F               	movwf	drawtext@bg+1,c
  2561  00FA12  0E00               	movlw	0
  2562  00FA14  6E2E               	movwf	drawtext@bg,c
  2563  00FA16  0E02               	movlw	2
  2564  00FA18  6E30               	movwf	drawtext@size,c
  2565  00FA1A  0E64               	movlw	100
  2566  00FA1C  ECC0  F074         	call	_drawtext
  2567                           
  2568                           ;Lab8.c: 1017: strcpy(txt, "NORTH/SOUTH");
  2569  00FA20  C06B  F001         	movff	_txt,strcpy@to
  2570  00FA24  C06C  F002         	movff	_txt+1,strcpy@to+1
  2571  00FA28  0EC1               	movlw	low STR_8
  2572  00FA2A  6E03               	movwf	strcpy@from,c
  2573  00FA2C  0EFF               	movlw	high STR_8
  2574  00FA2E  6E04               	movwf	strcpy@from+1,c
  2575  00FA30  EC5B  F06E         	call	_strcpy	;wreg free
  2576                           
  2577                           ;Lab8.c: 1018: drawtext (30, 80 , txt, 0x001F, 0x0000, 1);
  2578  00FA34  0E50               	movlw	80
  2579  00FA36  6E29               	movwf	drawtext@y,c
  2580  00FA38  C06B  F02A         	movff	_txt,drawtext@_text
  2581  00FA3C  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2582  00FA40  0E00               	movlw	0
  2583  00FA42  6E2D               	movwf	drawtext@color+1,c
  2584  00FA44  0E1F               	movlw	31
  2585  00FA46  6E2C               	movwf	drawtext@color,c
  2586  00FA48  0E00               	movlw	0
  2587  00FA4A  6E2F               	movwf	drawtext@bg+1,c
  2588  00FA4C  0E00               	movlw	0
  2589  00FA4E  6E2E               	movwf	drawtext@bg,c
  2590  00FA50  0E01               	movlw	1
  2591  00FA52  6E30               	movwf	drawtext@size,c
  2592  00FA54  0E1E               	movlw	30
  2593  00FA56  ECC0  F074         	call	_drawtext
  2594                           
  2595                           ;Lab8.c: 1019: drawRect (30, 80 + 15-8, 60, 18, 0x001F);
  2596  00FA5A  0E00               	movlw	0
  2597  00FA5C  6E14               	movwf	drawRect@x+1,c
  2598  00FA5E  0E1E               	movlw	30
  2599  00FA60  6E13               	movwf	drawRect@x,c
  2600  00FA62  0E00               	movlw	0
  2601  00FA64  6E16               	movwf	drawRect@y+1,c
  2602  00FA66  0E57               	movlw	87
  2603  00FA68  6E15               	movwf	drawRect@y,c
  2604  00FA6A  0E00               	movlw	0
  2605  00FA6C  6E18               	movwf	drawRect@w+1,c
  2606  00FA6E  0E3C               	movlw	60
  2607  00FA70  6E17               	movwf	drawRect@w,c
  2608  00FA72  0E00               	movlw	0
  2609  00FA74  6E1A               	movwf	drawRect@h+1,c
  2610  00FA76  0E12               	movlw	18
  2611  00FA78  6E19               	movwf	drawRect@h,c
  2612  00FA7A  0E00               	movlw	0
  2613  00FA7C  6E1C               	movwf	drawRect@color+1,c
  2614  00FA7E  0E1F               	movlw	31
  2615  00FA80  6E1B               	movwf	drawRect@color,c
  2616  00FA82  EC17  F070         	call	_drawRect	;wreg free
  2617                           
  2618                           ;Lab8.c: 1020: drawCircle(40, 80 + 15 , 7, 0xF800);
  2619  00FA86  0E00               	movlw	0
  2620  00FA88  6E0D               	movwf	drawCircle@x0+1,c
  2621  00FA8A  0E28               	movlw	40
  2622  00FA8C  6E0C               	movwf	drawCircle@x0,c
  2623  00FA8E  0E00               	movlw	0
  2624  00FA90  6E0F               	movwf	drawCircle@y0+1,c
  2625  00FA92  0E5F               	movlw	95
  2626  00FA94  6E0E               	movwf	drawCircle@y0,c
  2627  00FA96  0E00               	movlw	0
  2628  00FA98  6E11               	movwf	drawCircle@r+1,c
  2629  00FA9A  0E07               	movlw	7
  2630  00FA9C  6E10               	movwf	drawCircle@r,c
  2631  00FA9E  0EF8               	movlw	248
  2632  00FAA0  6E13               	movwf	drawCircle@color+1,c
  2633  00FAA2  0E00               	movlw	0
  2634  00FAA4  6E12               	movwf	drawCircle@color,c
  2635  00FAA6  ECE8  F077         	call	_drawCircle	;wreg free
  2636                           
  2637                           ;Lab8.c: 1021: drawCircle(60, 80 + 15 , 7, 0xFFE0);
  2638  00FAAA  0E00               	movlw	0
  2639  00FAAC  6E0D               	movwf	drawCircle@x0+1,c
  2640  00FAAE  0E3C               	movlw	60
  2641  00FAB0  6E0C               	movwf	drawCircle@x0,c
  2642  00FAB2  0E00               	movlw	0
  2643  00FAB4  6E0F               	movwf	drawCircle@y0+1,c
  2644  00FAB6  0E5F               	movlw	95
  2645  00FAB8  6E0E               	movwf	drawCircle@y0,c
  2646  00FABA  0E00               	movlw	0
  2647  00FABC  6E11               	movwf	drawCircle@r+1,c
  2648  00FABE  0E07               	movlw	7
  2649  00FAC0  6E10               	movwf	drawCircle@r,c
  2650  00FAC2  0EFF               	movlw	255
  2651  00FAC4  6E13               	movwf	drawCircle@color+1,c
  2652  00FAC6  0EE0               	movlw	224
  2653  00FAC8  6E12               	movwf	drawCircle@color,c
  2654  00FACA  ECE8  F077         	call	_drawCircle	;wreg free
  2655                           
  2656                           ;Lab8.c: 1022: fillCircle(80, 80 + 15 , 7, 0x07E0);
  2657  00FACE  0E00               	movlw	0
  2658  00FAD0  6E2C               	movwf	fillCircle@x0+1,c
  2659  00FAD2  0E50               	movlw	80
  2660  00FAD4  6E2B               	movwf	fillCircle@x0,c
  2661  00FAD6  0E00               	movlw	0
  2662  00FAD8  6E2E               	movwf	fillCircle@y0+1,c
  2663  00FADA  0E5F               	movlw	95
  2664  00FADC  6E2D               	movwf	fillCircle@y0,c
  2665  00FADE  0E00               	movlw	0
  2666  00FAE0  6E30               	movwf	fillCircle@r+1,c
  2667  00FAE2  0E07               	movlw	7
  2668  00FAE4  6E2F               	movwf	fillCircle@r,c
  2669  00FAE6  0E07               	movlw	7
  2670  00FAE8  6E32               	movwf	fillCircle@color+1,c
  2671  00FAEA  0EE0               	movlw	224
  2672  00FAEC  6E31               	movwf	fillCircle@color,c
  2673  00FAEE  ECC5  F06F         	call	_fillCircle	;wreg free
  2674                           
  2675                           ;Lab8.c: 1023: drawtext (100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  2676  00FAF2  0E5A               	movlw	90
  2677  00FAF4  6E29               	movwf	drawtext@y,c
  2678  00FAF6  0E4B               	movlw	low _NS_Count
  2679  00FAF8  6E2A               	movwf	drawtext@_text,c
  2680  00FAFA  0E00               	movlw	high _NS_Count
  2681  00FAFC  6E2B               	movwf	drawtext@_text+1,c
  2682  00FAFE  0E00               	movlw	0
  2683  00FB00  6E2D               	movwf	drawtext@color+1,c
  2684  00FB02  0E1F               	movlw	31
  2685  00FB04  6E2C               	movwf	drawtext@color,c
  2686  00FB06  0E00               	movlw	0
  2687  00FB08  6E2F               	movwf	drawtext@bg+1,c
  2688  00FB0A  0E00               	movlw	0
  2689  00FB0C  6E2E               	movwf	drawtext@bg,c
  2690  00FB0E  0E02               	movlw	2
  2691  00FB10  6E30               	movwf	drawtext@size,c
  2692  00FB12  0E64               	movlw	100
  2693  00FB14  ECC0  F074         	call	_drawtext
  2694                           
  2695                           ;Lab8.c: 1026: strcpy(txt, "N/S LT");
  2696  00FB18  C06B  F001         	movff	_txt,strcpy@to
  2697  00FB1C  C06C  F002         	movff	_txt+1,strcpy@to+1
  2698  00FB20  0ED7               	movlw	low STR_9
  2699  00FB22  6E03               	movwf	strcpy@from,c
  2700  00FB24  0EFF               	movlw	high STR_9
  2701  00FB26  6E04               	movwf	strcpy@from+1,c
  2702  00FB28  EC5B  F06E         	call	_strcpy	;wreg free
  2703                           
  2704                           ;Lab8.c: 1027: drawtext (30, 110, txt, 0xF81F, 0x0000, 1);
  2705  00FB2C  0E6E               	movlw	110
  2706  00FB2E  6E29               	movwf	drawtext@y,c
  2707  00FB30  C06B  F02A         	movff	_txt,drawtext@_text
  2708  00FB34  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2709  00FB38  0EF8               	movlw	248
  2710  00FB3A  6E2D               	movwf	drawtext@color+1,c
  2711  00FB3C  0E1F               	movlw	31
  2712  00FB3E  6E2C               	movwf	drawtext@color,c
  2713  00FB40  0E00               	movlw	0
  2714  00FB42  6E2F               	movwf	drawtext@bg+1,c
  2715  00FB44  0E00               	movlw	0
  2716  00FB46  6E2E               	movwf	drawtext@bg,c
  2717  00FB48  0E01               	movlw	1
  2718  00FB4A  6E30               	movwf	drawtext@size,c
  2719  00FB4C  0E1E               	movlw	30
  2720  00FB4E  ECC0  F074         	call	_drawtext
  2721                           
  2722                           ;Lab8.c: 1028: drawRect (30, 110 + 15-8, 60, 18, 0xF81F);
  2723  00FB52  0E00               	movlw	0
  2724  00FB54  6E14               	movwf	drawRect@x+1,c
  2725  00FB56  0E1E               	movlw	30
  2726  00FB58  6E13               	movwf	drawRect@x,c
  2727  00FB5A  0E00               	movlw	0
  2728  00FB5C  6E16               	movwf	drawRect@y+1,c
  2729  00FB5E  0E75               	movlw	117
  2730  00FB60  6E15               	movwf	drawRect@y,c
  2731  00FB62  0E00               	movlw	0
  2732  00FB64  6E18               	movwf	drawRect@w+1,c
  2733  00FB66  0E3C               	movlw	60
  2734  00FB68  6E17               	movwf	drawRect@w,c
  2735  00FB6A  0E00               	movlw	0
  2736  00FB6C  6E1A               	movwf	drawRect@h+1,c
  2737  00FB6E  0E12               	movlw	18
  2738  00FB70  6E19               	movwf	drawRect@h,c
  2739  00FB72  0EF8               	movlw	248
  2740  00FB74  6E1C               	movwf	drawRect@color+1,c
  2741  00FB76  0E1F               	movlw	31
  2742  00FB78  6E1B               	movwf	drawRect@color,c
  2743  00FB7A  EC17  F070         	call	_drawRect	;wreg free
  2744                           
  2745                           ;Lab8.c: 1029: fillCircle(40, 110 + 15, 7, 0xF800);
  2746  00FB7E  0E00               	movlw	0
  2747  00FB80  6E2C               	movwf	fillCircle@x0+1,c
  2748  00FB82  0E28               	movlw	40
  2749  00FB84  6E2B               	movwf	fillCircle@x0,c
  2750  00FB86  0E00               	movlw	0
  2751  00FB88  6E2E               	movwf	fillCircle@y0+1,c
  2752  00FB8A  0E7D               	movlw	125
  2753  00FB8C  6E2D               	movwf	fillCircle@y0,c
  2754  00FB8E  0E00               	movlw	0
  2755  00FB90  6E30               	movwf	fillCircle@r+1,c
  2756  00FB92  0E07               	movlw	7
  2757  00FB94  6E2F               	movwf	fillCircle@r,c
  2758  00FB96  0EF8               	movlw	248
  2759  00FB98  6E32               	movwf	fillCircle@color+1,c
  2760  00FB9A  0E00               	movlw	0
  2761  00FB9C  6E31               	movwf	fillCircle@color,c
  2762  00FB9E  ECC5  F06F         	call	_fillCircle	;wreg free
  2763                           
  2764                           ;Lab8.c: 1030: drawCircle(60, 110 + 15, 7, 0xFFE0);
  2765  00FBA2  0E00               	movlw	0
  2766  00FBA4  6E0D               	movwf	drawCircle@x0+1,c
  2767  00FBA6  0E3C               	movlw	60
  2768  00FBA8  6E0C               	movwf	drawCircle@x0,c
  2769  00FBAA  0E00               	movlw	0
  2770  00FBAC  6E0F               	movwf	drawCircle@y0+1,c
  2771  00FBAE  0E7D               	movlw	125
  2772  00FBB0  6E0E               	movwf	drawCircle@y0,c
  2773  00FBB2  0E00               	movlw	0
  2774  00FBB4  6E11               	movwf	drawCircle@r+1,c
  2775  00FBB6  0E07               	movlw	7
  2776  00FBB8  6E10               	movwf	drawCircle@r,c
  2777  00FBBA  0EFF               	movlw	255
  2778  00FBBC  6E13               	movwf	drawCircle@color+1,c
  2779  00FBBE  0EE0               	movlw	224
  2780  00FBC0  6E12               	movwf	drawCircle@color,c
  2781  00FBC2  ECE8  F077         	call	_drawCircle	;wreg free
  2782                           
  2783                           ;Lab8.c: 1031: drawCircle(80, 110 + 15, 7, 0x07E0);
  2784  00FBC6  0E00               	movlw	0
  2785  00FBC8  6E0D               	movwf	drawCircle@x0+1,c
  2786  00FBCA  0E50               	movlw	80
  2787  00FBCC  6E0C               	movwf	drawCircle@x0,c
  2788  00FBCE  0E00               	movlw	0
  2789  00FBD0  6E0F               	movwf	drawCircle@y0+1,c
  2790  00FBD2  0E7D               	movlw	125
  2791  00FBD4  6E0E               	movwf	drawCircle@y0,c
  2792  00FBD6  0E00               	movlw	0
  2793  00FBD8  6E11               	movwf	drawCircle@r+1,c
  2794  00FBDA  0E07               	movlw	7
  2795  00FBDC  6E10               	movwf	drawCircle@r,c
  2796  00FBDE  0E07               	movlw	7
  2797  00FBE0  6E13               	movwf	drawCircle@color+1,c
  2798  00FBE2  0EE0               	movlw	224
  2799  00FBE4  6E12               	movwf	drawCircle@color,c
  2800  00FBE6  ECE8  F077         	call	_drawCircle	;wreg free
  2801                           
  2802                           ;Lab8.c: 1032: drawtext (100, 110 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  2803  00FBEA  0E78               	movlw	120
  2804  00FBEC  6E29               	movwf	drawtext@y,c
  2805  00FBEE  0E48               	movlw	low _NSLT_Count
  2806  00FBF0  6E2A               	movwf	drawtext@_text,c
  2807  00FBF2  0E00               	movlw	high _NSLT_Count
  2808  00FBF4  6E2B               	movwf	drawtext@_text+1,c
  2809  00FBF6  0EF8               	movlw	248
  2810  00FBF8  6E2D               	movwf	drawtext@color+1,c
  2811  00FBFA  0E1F               	movlw	31
  2812  00FBFC  6E2C               	movwf	drawtext@color,c
  2813  00FBFE  0E00               	movlw	0
  2814  00FC00  6E2F               	movwf	drawtext@bg+1,c
  2815  00FC02  0E00               	movlw	0
  2816  00FC04  6E2E               	movwf	drawtext@bg,c
  2817  00FC06  0E02               	movlw	2
  2818  00FC08  6E30               	movwf	drawtext@size,c
  2819  00FC0A  0E64               	movlw	100
  2820  00FC0C  ECC0  F074         	call	_drawtext
  2821                           
  2822                           ;Lab8.c: 1035: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  2823  00FC10  0E1E               	movlw	30
  2824  00FC12  6E29               	movwf	drawtext@y,c
  2825  00FC14  0E4E               	movlw	low _PED_EW_Count
  2826  00FC16  6E2A               	movwf	drawtext@_text,c
  2827  00FC18  0E00               	movlw	high _PED_EW_Count
  2828  00FC1A  6E2B               	movwf	drawtext@_text+1,c
  2829  00FC1C  0E07               	movlw	7
  2830  00FC1E  6E2D               	movwf	drawtext@color+1,c
  2831  00FC20  682C               	setf	drawtext@color,c
  2832  00FC22  0E00               	movlw	0
  2833  00FC24  6E2F               	movwf	drawtext@bg+1,c
  2834  00FC26  0E00               	movlw	0
  2835  00FC28  6E2E               	movwf	drawtext@bg,c
  2836  00FC2A  0E02               	movlw	2
  2837  00FC2C  6E30               	movwf	drawtext@size,c
  2838  00FC2E  0E02               	movlw	2
  2839  00FC30  ECC0  F074         	call	_drawtext
  2840                           
  2841                           ;Lab8.c: 1036: strcpy(txt, "PEW");
  2842  00FC34  C06B  F001         	movff	_txt,strcpy@to
  2843  00FC38  C06C  F002         	movff	_txt+1,strcpy@to+1
  2844  00FC3C  0EF7               	movlw	low STR_10
  2845  00FC3E  6E03               	movwf	strcpy@from,c
  2846  00FC40  0EFF               	movlw	high STR_10
  2847  00FC42  6E04               	movwf	strcpy@from+1,c
  2848  00FC44  EC5B  F06E         	call	_strcpy	;wreg free
  2849                           
  2850                           ;Lab8.c: 1037: drawtext(3, 20, txt, 0x07FF, 0x0000, 1);
  2851  00FC48  0E14               	movlw	20
  2852  00FC4A  6E29               	movwf	drawtext@y,c
  2853  00FC4C  C06B  F02A         	movff	_txt,drawtext@_text
  2854  00FC50  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2855  00FC54  0E07               	movlw	7
  2856  00FC56  6E2D               	movwf	drawtext@color+1,c
  2857  00FC58  682C               	setf	drawtext@color,c
  2858  00FC5A  0E00               	movlw	0
  2859  00FC5C  6E2F               	movwf	drawtext@bg+1,c
  2860  00FC5E  0E00               	movlw	0
  2861  00FC60  6E2E               	movwf	drawtext@bg,c
  2862  00FC62  0E01               	movlw	1
  2863  00FC64  6E30               	movwf	drawtext@size,c
  2864  00FC66  0E03               	movlw	3
  2865  00FC68  ECC0  F074         	call	_drawtext
  2866                           
  2867                           ;Lab8.c: 1040: strcpy(txt, "PNS");
  2868  00FC6C  C06B  F001         	movff	_txt,strcpy@to
  2869  00FC70  C06C  F002         	movff	_txt+1,strcpy@to+1
  2870  00FC74  0EF3               	movlw	low STR_11
  2871  00FC76  6E03               	movwf	strcpy@from,c
  2872  00FC78  0EFF               	movlw	high STR_11
  2873  00FC7A  6E04               	movwf	strcpy@from+1,c
  2874  00FC7C  EC5B  F06E         	call	_strcpy	;wreg free
  2875                           
  2876                           ;Lab8.c: 1041: drawtext(3, 80, txt, 0x001F, 0x0000, 1);
  2877  00FC80  0E50               	movlw	80
  2878  00FC82  6E29               	movwf	drawtext@y,c
  2879  00FC84  C06B  F02A         	movff	_txt,drawtext@_text
  2880  00FC88  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2881  00FC8C  0E00               	movlw	0
  2882  00FC8E  6E2D               	movwf	drawtext@color+1,c
  2883  00FC90  0E1F               	movlw	31
  2884  00FC92  6E2C               	movwf	drawtext@color,c
  2885  00FC94  0E00               	movlw	0
  2886  00FC96  6E2F               	movwf	drawtext@bg+1,c
  2887  00FC98  0E00               	movlw	0
  2888  00FC9A  6E2E               	movwf	drawtext@bg,c
  2889  00FC9C  0E01               	movlw	1
  2890  00FC9E  6E30               	movwf	drawtext@size,c
  2891  00FCA0  0E03               	movlw	3
  2892  00FCA2  ECC0  F074         	call	_drawtext
  2893                           
  2894                           ;Lab8.c: 1042: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
  2895  00FCA6  0E5A               	movlw	90
  2896  00FCA8  6E29               	movwf	drawtext@y,c
  2897  00FCAA  0E51               	movlw	low _PED_NS_Count
  2898  00FCAC  6E2A               	movwf	drawtext@_text,c
  2899  00FCAE  0E00               	movlw	high _PED_NS_Count
  2900  00FCB0  6E2B               	movwf	drawtext@_text+1,c
  2901  00FCB2  0E00               	movlw	0
  2902  00FCB4  6E2D               	movwf	drawtext@color+1,c
  2903  00FCB6  0E1F               	movlw	31
  2904  00FCB8  6E2C               	movwf	drawtext@color,c
  2905  00FCBA  0E00               	movlw	0
  2906  00FCBC  6E2F               	movwf	drawtext@bg+1,c
  2907  00FCBE  0E00               	movlw	0
  2908  00FCC0  6E2E               	movwf	drawtext@bg,c
  2909  00FCC2  0E02               	movlw	2
  2910  00FCC4  6E30               	movwf	drawtext@size,c
  2911  00FCC6  0E02               	movlw	2
  2912  00FCC8  ECC0  F074         	call	_drawtext
  2913                           
  2914                           ;Lab8.c: 1045: strcpy(txt, "EWP EWLT NSP NSLT MR");
  2915  00FCCC  C06B  F001         	movff	_txt,strcpy@to
  2916  00FCD0  C06C  F002         	movff	_txt+1,strcpy@to+1
  2917  00FCD4  0EAC               	movlw	low STR_12
  2918  00FCD6  6E03               	movwf	strcpy@from,c
  2919  00FCD8  0EFF               	movlw	high STR_12
  2920  00FCDA  6E04               	movwf	strcpy@from+1,c
  2921  00FCDC  EC5B  F06E         	call	_strcpy	;wreg free
  2922                           
  2923                           ;Lab8.c: 1046: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  2924  00FCE0  0E8C               	movlw	140
  2925  00FCE2  6E29               	movwf	drawtext@y,c
  2926  00FCE4  C06B  F02A         	movff	_txt,drawtext@_text
  2927  00FCE8  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2928  00FCEC  0EFF               	movlw	255
  2929  00FCEE  6E2D               	movwf	drawtext@color+1,c
  2930  00FCF0  682C               	setf	drawtext@color,c
  2931  00FCF2  0E00               	movlw	0
  2932  00FCF4  6E2F               	movwf	drawtext@bg+1,c
  2933  00FCF6  0E00               	movlw	0
  2934  00FCF8  6E2E               	movwf	drawtext@bg,c
  2935  00FCFA  0E01               	movlw	1
  2936  00FCFC  6E30               	movwf	drawtext@size,c
  2937  00FCFE  0E01               	movlw	1
  2938  00FD00  ECC0  F074         	call	_drawtext
  2939                           
  2940                           ;Lab8.c: 1047: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  2941  00FD04  0E95               	movlw	149
  2942  00FD06  6E29               	movwf	drawtext@y,c
  2943  00FD08  0E5C               	movlw	low _SW_EWPED_Txt
  2944  00FD0A  6E2A               	movwf	drawtext@_text,c
  2945  00FD0C  0E00               	movlw	high _SW_EWPED_Txt
  2946  00FD0E  6E2B               	movwf	drawtext@_text+1,c
  2947  00FD10  0EFF               	movlw	255
  2948  00FD12  6E2D               	movwf	drawtext@color+1,c
  2949  00FD14  682C               	setf	drawtext@color,c
  2950  00FD16  0E00               	movlw	0
  2951  00FD18  6E2F               	movwf	drawtext@bg+1,c
  2952  00FD1A  0E00               	movlw	0
  2953  00FD1C  6E2E               	movwf	drawtext@bg,c
  2954  00FD1E  0E01               	movlw	1
  2955  00FD20  6E30               	movwf	drawtext@size,c
  2956  00FD22  0E06               	movlw	6
  2957  00FD24  ECC0  F074         	call	_drawtext
  2958                           
  2959                           ;Lab8.c: 1048: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  2960  00FD28  0E95               	movlw	149
  2961  00FD2A  6E29               	movwf	drawtext@y,c
  2962  00FD2C  0E5A               	movlw	low _SW_EWLT_Txt
  2963  00FD2E  6E2A               	movwf	drawtext@_text,c
  2964  00FD30  0E00               	movlw	high _SW_EWLT_Txt
  2965  00FD32  6E2B               	movwf	drawtext@_text+1,c
  2966  00FD34  0EFF               	movlw	255
  2967  00FD36  6E2D               	movwf	drawtext@color+1,c
  2968  00FD38  682C               	setf	drawtext@color,c
  2969  00FD3A  0E00               	movlw	0
  2970  00FD3C  6E2F               	movwf	drawtext@bg+1,c
  2971  00FD3E  0E00               	movlw	0
  2972  00FD40  6E2E               	movwf	drawtext@bg,c
  2973  00FD42  0E01               	movlw	1
  2974  00FD44  6E30               	movwf	drawtext@size,c
  2975  00FD46  0E20               	movlw	32
  2976  00FD48  ECC0  F074         	call	_drawtext
  2977                           
  2978                           ;Lab8.c: 1049: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  2979  00FD4C  0E95               	movlw	149
  2980  00FD4E  6E29               	movwf	drawtext@y,c
  2981  00FD50  0E62               	movlw	low _SW_NSPED_Txt
  2982  00FD52  6E2A               	movwf	drawtext@_text,c
  2983  00FD54  0E00               	movlw	high _SW_NSPED_Txt
  2984  00FD56  6E2B               	movwf	drawtext@_text+1,c
  2985  00FD58  0EFF               	movlw	255
  2986  00FD5A  6E2D               	movwf	drawtext@color+1,c
  2987  00FD5C  682C               	setf	drawtext@color,c
  2988  00FD5E  0E00               	movlw	0
  2989  00FD60  6E2F               	movwf	drawtext@bg+1,c
  2990  00FD62  0E00               	movlw	0
  2991  00FD64  6E2E               	movwf	drawtext@bg,c
  2992  00FD66  0E01               	movlw	1
  2993  00FD68  6E30               	movwf	drawtext@size,c
  2994  00FD6A  0E3A               	movlw	58
  2995  00FD6C  ECC0  F074         	call	_drawtext
  2996                           
  2997                           ;Lab8.c: 1050: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  2998  00FD70  0E95               	movlw	149
  2999  00FD72  6E29               	movwf	drawtext@y,c
  3000  00FD74  0E60               	movlw	low _SW_NSLT_Txt
  3001  00FD76  6E2A               	movwf	drawtext@_text,c
  3002  00FD78  0E00               	movlw	high _SW_NSLT_Txt
  3003  00FD7A  6E2B               	movwf	drawtext@_text+1,c
  3004  00FD7C  0EFF               	movlw	255
  3005  00FD7E  6E2D               	movwf	drawtext@color+1,c
  3006  00FD80  682C               	setf	drawtext@color,c
  3007  00FD82  0E00               	movlw	0
  3008  00FD84  6E2F               	movwf	drawtext@bg+1,c
  3009  00FD86  0E00               	movlw	0
  3010  00FD88  6E2E               	movwf	drawtext@bg,c
  3011  00FD8A  0E01               	movlw	1
  3012  00FD8C  6E30               	movwf	drawtext@size,c
  3013  00FD8E  0E57               	movlw	87
  3014  00FD90  ECC0  F074         	call	_drawtext
  3015                           
  3016                           ;Lab8.c: 1052: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  3017  00FD94  0E95               	movlw	149
  3018  00FD96  6E29               	movwf	drawtext@y,c
  3019  00FD98  0E5E               	movlw	low _SW_MODE_Txt
  3020  00FD9A  6E2A               	movwf	drawtext@_text,c
  3021  00FD9C  0E00               	movlw	high _SW_MODE_Txt
  3022  00FD9E  6E2B               	movwf	drawtext@_text+1,c
  3023  00FDA0  0EFF               	movlw	255
  3024  00FDA2  6E2D               	movwf	drawtext@color+1,c
  3025  00FDA4  682C               	setf	drawtext@color,c
  3026  00FDA6  0E00               	movlw	0
  3027  00FDA8  6E2F               	movwf	drawtext@bg+1,c
  3028  00FDAA  0E00               	movlw	0
  3029  00FDAC  6E2E               	movwf	drawtext@bg,c
  3030  00FDAE  0E01               	movlw	1
  3031  00FDB0  6E30               	movwf	drawtext@size,c
  3032  00FDB2  0E70               	movlw	112
  3033  00FDB4  ECC0  F074         	call	_drawtext
  3034  00FDB8  0012               	return		;funcret
  3035  00FDBA                     __end_of_Initialize_Screen:
  3036                           	opt stack 0
  3037                           tblptru	equ	0xFF8
  3038                           tblptrh	equ	0xFF7
  3039                           tblptrl	equ	0xFF6
  3040                           tablat	equ	0xFF5
  3041                           intcon2	equ	0xFF1
  3042                           postinc0	equ	0xFEE
  3043                           wreg	equ	0xFE8
  3044                           postdec1	equ	0xFE5
  3045                           fsr1l	equ	0xFE1
  3046                           status	equ	0xFD8
  3047                           
  3048 ;; *************** function _fillScreen *****************
  3049 ;; Defined at:
  3050 ;;		line 745 in file "Lab8.c"
  3051 ;; Parameters:    Size  Location     Type
  3052 ;;  color           2   19[COMRAM] unsigned int 
  3053 ;; Auto vars:     Size  Location     Type
  3054 ;;		None
  3055 ;; Return value:  Size  Location     Type
  3056 ;;		None               void
  3057 ;; Registers used:
  3058 ;;		wreg, status,2, status,0, cstack
  3059 ;; Tracked objects:
  3060 ;;		On entry : 0/0
  3061 ;;		On exit  : 0/0
  3062 ;;		Unchanged: 0/0
  3063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3064 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3067 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3068 ;;Total ram usage:        2 bytes
  3069 ;; Hardware stack levels used:    1
  3070 ;; Hardware stack levels required when called:    4
  3071 ;; This function calls:
  3072 ;;		_fillRectangle
  3073 ;; This function is called by:
  3074 ;;		_Initialize_Screen
  3075 ;; This function uses a non-reentrant model
  3076 ;;
  3077                           
  3078                           	psect	text6
  3079  00DB6E                     __ptext6:
  3080                           	opt stack 0
  3081  00DB6E                     _fillScreen:
  3082                           	opt stack 25
  3083                           
  3084                           ;Lab8.c: 747: fillRectangle(0, 0, 128, 160, color);
  3085                           
  3086                           ;incstack = 0
  3087  00DB6E  0E00               	movlw	0
  3088  00DB70  6E08               	movwf	fillRectangle@y,c
  3089  00DB72  0E80               	movlw	128
  3090  00DB74  6E09               	movwf	fillRectangle@w,c
  3091  00DB76  0EA0               	movlw	160
  3092  00DB78  6E0A               	movwf	fillRectangle@h,c
  3093  00DB7A  C014  F00B         	movff	fillScreen@color,fillRectangle@color
  3094  00DB7E  C015  F00C         	movff	fillScreen@color+1,fillRectangle@color+1
  3095  00DB82  0E00               	movlw	0
  3096  00DB84  EC52  F074         	call	_fillRectangle
  3097  00DB88  0012               	return		;funcret
  3098  00DB8A                     __end_of_fillScreen:
  3099                           	opt stack 0
  3100                           tblptru	equ	0xFF8
  3101                           tblptrh	equ	0xFF7
  3102                           tblptrl	equ	0xFF6
  3103                           tablat	equ	0xFF5
  3104                           intcon2	equ	0xFF1
  3105                           postinc0	equ	0xFEE
  3106                           wreg	equ	0xFE8
  3107                           postdec1	equ	0xFE5
  3108                           fsr1l	equ	0xFE1
  3109                           status	equ	0xFD8
  3110                           
  3111 ;; *************** function _fillRectangle *****************
  3112 ;; Defined at:
  3113 ;;		line 629 in file "Lab8.c"
  3114 ;; Parameters:    Size  Location     Type
  3115 ;;  x               1    wreg     unsigned char 
  3116 ;;  y               1    7[COMRAM] unsigned char 
  3117 ;;  w               1    8[COMRAM] unsigned char 
  3118 ;;  h               1    9[COMRAM] unsigned char 
  3119 ;;  color           2   10[COMRAM] unsigned int 
  3120 ;; Auto vars:     Size  Location     Type
  3121 ;;  x               1   18[COMRAM] unsigned char 
  3122 ;;  lo              1   17[COMRAM] unsigned char 
  3123 ;;  hi              1   16[COMRAM] unsigned char 
  3124 ;; Return value:  Size  Location     Type
  3125 ;;		None               void
  3126 ;; Registers used:
  3127 ;;		wreg, status,2, status,0, cstack
  3128 ;; Tracked objects:
  3129 ;;		On entry : 0/0
  3130 ;;		On exit  : 0/0
  3131 ;;		Unchanged: 0/0
  3132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3133 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3134 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3135 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3136 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3137 ;;Total ram usage:       12 bytes
  3138 ;; Hardware stack levels used:    1
  3139 ;; Hardware stack levels required when called:    3
  3140 ;; This function calls:
  3141 ;;		_setAddrWindow
  3142 ;;		_spiwrite
  3143 ;; This function is called by:
  3144 ;;		_fillScreen
  3145 ;; This function uses a non-reentrant model
  3146 ;;
  3147                           
  3148                           	psect	text7
  3149  00E8A4                     __ptext7:
  3150                           	opt stack 0
  3151  00E8A4                     _fillRectangle:
  3152                           	opt stack 25
  3153                           
  3154                           ;incstack = 0
  3155                           ;fillRectangle@x stored from wreg
  3156  00E8A4  6E13               	movwf	fillRectangle@x,c
  3157                           
  3158                           ;Lab8.c: 631: unsigned char hi, lo;
  3159                           ;Lab8.c: 632: if((x >= 128) || (y >= 160))
  3160  00E8A6  0E80               	movlw	128
  3161  00E8A8  6013               	cpfslt	fillRectangle@x,c
  3162  00E8AA  D069               	goto	l228
  3163  00E8AC  0E9F               	movlw	159
  3164  00E8AE  6408               	cpfsgt	fillRectangle@y,c
  3165  00E8B0  D001               	goto	l3151
  3166                           
  3167                           ;Lab8.c: 633: return;
  3168  00E8B2  D065               	goto	l228
  3169  00E8B4                     l3151:
  3170                           
  3171                           ;Lab8.c: 634: if((x + w - 1) >= 128)
  3172  00E8B4  0EFF               	movlw	255
  3173  00E8B6  6E0D               	movwf	??_fillRectangle& (0+255),c
  3174  00E8B8  0EFF               	movlw	255
  3175  00E8BA  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3176  00E8BC  5009               	movf	fillRectangle@w,w,c
  3177  00E8BE  C013  F00F         	movff	fillRectangle@x,??_fillRectangle+2
  3178  00E8C2  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3179  00E8C4  260F               	addwf	??_fillRectangle+2,f,c
  3180  00E8C6  0E00               	movlw	0
  3181  00E8C8  2210               	addwfc	??_fillRectangle+3,f,c
  3182  00E8CA  500D               	movf	??_fillRectangle,w,c
  3183  00E8CC  260F               	addwf	??_fillRectangle+2,f,c
  3184  00E8CE  500E               	movf	??_fillRectangle+1,w,c
  3185  00E8D0  2210               	addwfc	??_fillRectangle+3,f,c
  3186  00E8D2  BE10               	btfsc	??_fillRectangle+3,7,c
  3187  00E8D4  D00A               	goto	l229
  3188  00E8D6  5010               	movf	??_fillRectangle+3,w,c
  3189  00E8D8  E104               	bnz	u2030
  3190  00E8DA  0E80               	movlw	128
  3191  00E8DC  5C0F               	subwf	??_fillRectangle+2,w,c
  3192  00E8DE  A0D8               	btfss	status,0,c
  3193  00E8E0  D004               	goto	l229
  3194  00E8E2                     u2030:
  3195                           
  3196                           ;Lab8.c: 635: w = 128 - x;
  3197  00E8E2  5013               	movf	fillRectangle@x,w,c
  3198  00E8E4  0800               	sublw	0
  3199  00E8E6  0F80               	addlw	128
  3200  00E8E8  6E09               	movwf	fillRectangle@w,c
  3201  00E8EA                     l229:
  3202                           
  3203                           ;Lab8.c: 636: if((y + h - 1) >= 160)
  3204  00E8EA  0EFF               	movlw	255
  3205  00E8EC  6E0D               	movwf	??_fillRectangle& (0+255),c
  3206  00E8EE  0EFF               	movlw	255
  3207  00E8F0  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3208  00E8F2  500A               	movf	fillRectangle@h,w,c
  3209  00E8F4  C008  F00F         	movff	fillRectangle@y,??_fillRectangle+2
  3210  00E8F8  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3211  00E8FA  260F               	addwf	??_fillRectangle+2,f,c
  3212  00E8FC  0E00               	movlw	0
  3213  00E8FE  2210               	addwfc	??_fillRectangle+3,f,c
  3214  00E900  500D               	movf	??_fillRectangle,w,c
  3215  00E902  260F               	addwf	??_fillRectangle+2,f,c
  3216  00E904  500E               	movf	??_fillRectangle+1,w,c
  3217  00E906  2210               	addwfc	??_fillRectangle+3,f,c
  3218  00E908  BE10               	btfsc	??_fillRectangle+3,7,c
  3219  00E90A  D00B               	goto	l3157
  3220  00E90C  5010               	movf	??_fillRectangle+3,w,c
  3221  00E90E  E104               	bnz	u2040
  3222  00E910  0EA0               	movlw	160
  3223  00E912  5C0F               	subwf	??_fillRectangle+2,w,c
  3224  00E914  A0D8               	btfss	status,0,c
  3225  00E916  D005               	goto	l3157
  3226  00E918                     u2040:
  3227                           
  3228                           ;Lab8.c: 637: h = 160 - y;
  3229  00E918  5008               	movf	fillRectangle@y,w,c
  3230  00E91A  0800               	sublw	0
  3231  00E91C  0FA0               	addlw	160
  3232  00E91E  6E0A               	movwf	fillRectangle@h,c
  3233  00E920  D000               	goto	l3157
  3234  00E922                     l3157:
  3235                           
  3236                           ;Lab8.c: 638: setAddrWindow(x, y, x+w-1, y+h-1);
  3237  00E922  C008  F004         	movff	fillRectangle@y,setAddrWindow@y0
  3238  00E926  5013               	movf	fillRectangle@x,w,c
  3239  00E928  2409               	addwf	fillRectangle@w,w,c
  3240  00E92A  6E0D               	movwf	??_fillRectangle& (0+255),c
  3241  00E92C  040D               	decf	??_fillRectangle,w,c
  3242  00E92E  6E05               	movwf	setAddrWindow@x1,c
  3243  00E930  5008               	movf	fillRectangle@y,w,c
  3244  00E932  240A               	addwf	fillRectangle@h,w,c
  3245  00E934  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3246  00E936  040E               	decf	??_fillRectangle+1,w,c
  3247  00E938  6E06               	movwf	setAddrWindow@y1,c
  3248  00E93A  5013               	movf	fillRectangle@x,w,c
  3249  00E93C  EC9E  F06F         	call	_setAddrWindow
  3250                           
  3251                           ;Lab8.c: 639: hi = color >> 8; lo = color;
  3252  00E940  500C               	movf	fillRectangle@color+1,w,c
  3253  00E942  6E11               	movwf	fillRectangle@hi,c
  3254  00E944  C00B  F012         	movff	fillRectangle@color,fillRectangle@lo
  3255                           
  3256                           ;Lab8.c: 640: PORTDbits.RD0 = 1;
  3257  00E948  8083               	bsf	3971,0,c	;volatile
  3258                           
  3259                           ;Lab8.c: 641: PORTDbits.RD1 = 0;
  3260  00E94A  9283               	bcf	3971,1,c	;volatile
  3261                           
  3262                           ;Lab8.c: 643: for(y=h; y>0; y--) {
  3263  00E94C  C00A  F008         	movff	fillRectangle@h,fillRectangle@y
  3264  00E950                     l3169:
  3265  00E950  5008               	movf	fillRectangle@y,w,c
  3266  00E952  B4D8               	btfsc	status,2,c
  3267  00E954  D013               	goto	l232
  3268  00E956  D001               	goto	l231
  3269  00E958  D011               	goto	l232
  3270  00E95A                     l231:
  3271                           
  3272                           ;Lab8.c: 644: for(x = w; x > 0; x--) {
  3273  00E95A  C009  F013         	movff	fillRectangle@w,fillRectangle@x
  3274  00E95E                     l3173:
  3275  00E95E  5013               	movf	fillRectangle@x,w,c
  3276  00E960  B4D8               	btfsc	status,2,c
  3277  00E962  D00A               	goto	l3183
  3278  00E964  D001               	goto	l3177
  3279  00E966  D008               	goto	l3183
  3280  00E968                     l3177:
  3281                           
  3282                           ;Lab8.c: 645: spiwrite(hi);
  3283  00E968  5011               	movf	fillRectangle@hi,w,c
  3284  00E96A  EC80  F06D         	call	_spiwrite
  3285                           
  3286                           ;Lab8.c: 646: spiwrite(lo);
  3287  00E96E  5012               	movf	fillRectangle@lo,w,c
  3288  00E970  EC80  F06D         	call	_spiwrite
  3289  00E974  0613               	decf	fillRectangle@x,f,c
  3290  00E976  D7F3               	goto	l3173
  3291  00E978                     l3183:
  3292  00E978  0608               	decf	fillRectangle@y,f,c
  3293  00E97A  D7EA               	goto	l3169
  3294  00E97C                     l232:
  3295                           
  3296                           ;Lab8.c: 647: }
  3297                           ;Lab8.c: 648: }
  3298                           ;Lab8.c: 649: PORTDbits.RD1 = 1;
  3299  00E97C  8283               	bsf	3971,1,c	;volatile
  3300  00E97E                     l228:
  3301  00E97E  0012               	return		;funcret
  3302  00E980                     __end_of_fillRectangle:
  3303                           	opt stack 0
  3304                           tblptru	equ	0xFF8
  3305                           tblptrh	equ	0xFF7
  3306                           tblptrl	equ	0xFF6
  3307                           tablat	equ	0xFF5
  3308                           intcon2	equ	0xFF1
  3309                           postinc0	equ	0xFEE
  3310                           wreg	equ	0xFE8
  3311                           postdec1	equ	0xFE5
  3312                           fsr1l	equ	0xFE1
  3313                           status	equ	0xFD8
  3314                           
  3315 ;; *************** function _drawRect *****************
  3316 ;; Defined at:
  3317 ;;		line 811 in file "Lab8.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;  x               2   18[COMRAM] unsigned int 
  3320 ;;  y               2   20[COMRAM] unsigned int 
  3321 ;;  w               2   22[COMRAM] unsigned int 
  3322 ;;  h               2   24[COMRAM] unsigned int 
  3323 ;;  color           2   26[COMRAM] unsigned int 
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;		None
  3326 ;; Return value:  Size  Location     Type
  3327 ;;		None               void
  3328 ;; Registers used:
  3329 ;;		wreg, status,2, status,0, cstack
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3335 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3337 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3338 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3339 ;;Total ram usage:       11 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; Hardware stack levels required when called:    4
  3342 ;; This function calls:
  3343 ;;		_drawFastHLine
  3344 ;;		_drawFastVLine
  3345 ;; This function is called by:
  3346 ;;		_Initialize_Screen
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           	psect	text8
  3351  00E02E                     __ptext8:
  3352                           	opt stack 0
  3353  00E02E                     _drawRect:
  3354                           	opt stack 25
  3355                           
  3356                           ;Lab8.c: 813: drawFastHLine(x, y, w, color);
  3357                           
  3358                           ;incstack = 0
  3359  00E02E  C015  F008         	movff	drawRect@y,drawFastHLine@y
  3360  00E032  C017  F009         	movff	drawRect@w,drawFastHLine@w
  3361  00E036  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  3362  00E03A  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  3363  00E03E  5013               	movf	drawRect@x,w,c
  3364  00E040  EC48  F071         	call	_drawFastHLine
  3365                           
  3366                           ;Lab8.c: 814: drawFastHLine(x, y + h - 1, w, color);
  3367  00E044  5015               	movf	drawRect@y,w,c
  3368  00E046  2419               	addwf	drawRect@h,w,c
  3369  00E048  6E1D               	movwf	??_drawRect& (0+255),c
  3370  00E04A  041D               	decf	??_drawRect,w,c
  3371  00E04C  6E08               	movwf	drawFastHLine@y,c
  3372  00E04E  C017  F009         	movff	drawRect@w,drawFastHLine@w
  3373  00E052  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  3374  00E056  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  3375  00E05A  5013               	movf	drawRect@x,w,c
  3376  00E05C  EC48  F071         	call	_drawFastHLine
  3377                           
  3378                           ;Lab8.c: 815: drawFastVLine(x, y, h, color);
  3379  00E060  C015  F008         	movff	drawRect@y,drawFastVLine@y
  3380  00E064  C019  F009         	movff	drawRect@h,drawFastVLine@h
  3381  00E068  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  3382  00E06C  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  3383  00E070  5013               	movf	drawRect@x,w,c
  3384  00E072  EC04  F071         	call	_drawFastVLine
  3385                           
  3386                           ;Lab8.c: 816: drawFastVLine(x + w - 1, y, h, color);
  3387  00E076  C015  F008         	movff	drawRect@y,drawFastVLine@y
  3388  00E07A  C019  F009         	movff	drawRect@h,drawFastVLine@h
  3389  00E07E  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  3390  00E082  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  3391  00E086  5013               	movf	drawRect@x,w,c
  3392  00E088  2417               	addwf	drawRect@w,w,c
  3393  00E08A  6E1D               	movwf	??_drawRect& (0+255),c
  3394  00E08C  041D               	decf	??_drawRect,w,c
  3395  00E08E  EC04  F071         	call	_drawFastVLine
  3396  00E092  0012               	return		;funcret
  3397  00E094                     __end_of_drawRect:
  3398                           	opt stack 0
  3399                           tblptru	equ	0xFF8
  3400                           tblptrh	equ	0xFF7
  3401                           tblptrl	equ	0xFF6
  3402                           tablat	equ	0xFF5
  3403                           intcon2	equ	0xFF1
  3404                           postinc0	equ	0xFEE
  3405                           wreg	equ	0xFE8
  3406                           postdec1	equ	0xFE5
  3407                           fsr1l	equ	0xFE1
  3408                           status	equ	0xFD8
  3409                           
  3410 ;; *************** function _drawFastHLine *****************
  3411 ;; Defined at:
  3412 ;;		line 750 in file "Lab8.c"
  3413 ;; Parameters:    Size  Location     Type
  3414 ;;  x               1    wreg     unsigned char 
  3415 ;;  y               1    7[COMRAM] unsigned char 
  3416 ;;  w               1    8[COMRAM] unsigned char 
  3417 ;;  color           2    9[COMRAM] unsigned int 
  3418 ;; Auto vars:     Size  Location     Type
  3419 ;;  x               1   17[COMRAM] unsigned char 
  3420 ;;  lo              1   16[COMRAM] unsigned char 
  3421 ;;  hi              1   15[COMRAM] unsigned char 
  3422 ;; Return value:  Size  Location     Type
  3423 ;;		None               void
  3424 ;; Registers used:
  3425 ;;		wreg, status,2, status,0, cstack
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3431 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3432 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3433 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3434 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3435 ;;Total ram usage:       11 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; Hardware stack levels required when called:    3
  3438 ;; This function calls:
  3439 ;;		_setAddrWindow
  3440 ;;		_spiwrite
  3441 ;; This function is called by:
  3442 ;;		_drawRect
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446                           	psect	text9
  3447  00E290                     __ptext9:
  3448                           	opt stack 0
  3449  00E290                     _drawFastHLine:
  3450                           	opt stack 25
  3451                           
  3452                           ;incstack = 0
  3453                           ;drawFastHLine@x stored from wreg
  3454  00E290  6E12               	movwf	drawFastHLine@x,c
  3455                           
  3456                           ;Lab8.c: 752: unsigned char hi, lo;
  3457                           ;Lab8.c: 753: if((x >= 128) || (y >= 160))
  3458  00E292  0E80               	movlw	128
  3459  00E294  6012               	cpfslt	drawFastHLine@x,c
  3460  00E296  D03F               	goto	l273
  3461  00E298  0E9F               	movlw	159
  3462  00E29A  6408               	cpfsgt	drawFastHLine@y,c
  3463  00E29C  D001               	goto	l3191
  3464                           
  3465                           ;Lab8.c: 754: return;
  3466  00E29E  D03B               	goto	l273
  3467  00E2A0                     l3191:
  3468                           
  3469                           ;Lab8.c: 755: if((x + w - 1) >= 128)
  3470  00E2A0  0EFF               	movlw	255
  3471  00E2A2  6E0C               	movwf	??_drawFastHLine& (0+255),c
  3472  00E2A4  0EFF               	movlw	255
  3473  00E2A6  6E0D               	movwf	(??_drawFastHLine+1)& (0+255),c
  3474  00E2A8  5009               	movf	drawFastHLine@w,w,c
  3475  00E2AA  C012  F00E         	movff	drawFastHLine@x,??_drawFastHLine+2
  3476  00E2AE  6A0F               	clrf	(??_drawFastHLine+3)& (0+255),c
  3477  00E2B0  260E               	addwf	??_drawFastHLine+2,f,c
  3478  00E2B2  0E00               	movlw	0
  3479  00E2B4  220F               	addwfc	??_drawFastHLine+3,f,c
  3480  00E2B6  500C               	movf	??_drawFastHLine,w,c
  3481  00E2B8  260E               	addwf	??_drawFastHLine+2,f,c
  3482  00E2BA  500D               	movf	??_drawFastHLine+1,w,c
  3483  00E2BC  220F               	addwfc	??_drawFastHLine+3,f,c
  3484  00E2BE  BE0F               	btfsc	??_drawFastHLine+3,7,c
  3485  00E2C0  D00B               	goto	l3195
  3486  00E2C2  500F               	movf	??_drawFastHLine+3,w,c
  3487  00E2C4  E104               	bnz	u2110
  3488  00E2C6  0E80               	movlw	128
  3489  00E2C8  5C0E               	subwf	??_drawFastHLine+2,w,c
  3490  00E2CA  A0D8               	btfss	status,0,c
  3491  00E2CC  D005               	goto	l3195
  3492  00E2CE                     u2110:
  3493                           
  3494                           ;Lab8.c: 756: w = 128 - x;
  3495  00E2CE  5012               	movf	drawFastHLine@x,w,c
  3496  00E2D0  0800               	sublw	0
  3497  00E2D2  0F80               	addlw	128
  3498  00E2D4  6E09               	movwf	drawFastHLine@w,c
  3499  00E2D6  D000               	goto	l3195
  3500  00E2D8                     l3195:
  3501                           
  3502                           ;Lab8.c: 757: hi = color >> 8; lo = color;
  3503  00E2D8  500B               	movf	drawFastHLine@color+1,w,c
  3504  00E2DA  6E10               	movwf	drawFastHLine@hi,c
  3505  00E2DC  C00A  F011         	movff	drawFastHLine@color,drawFastHLine@lo
  3506                           
  3507                           ;Lab8.c: 758: setAddrWindow(x, y, x + w - 1, y);
  3508  00E2E0  C008  F004         	movff	drawFastHLine@y,setAddrWindow@y0
  3509  00E2E4  5012               	movf	drawFastHLine@x,w,c
  3510  00E2E6  2409               	addwf	drawFastHLine@w,w,c
  3511  00E2E8  6E0C               	movwf	??_drawFastHLine& (0+255),c
  3512  00E2EA  040C               	decf	??_drawFastHLine,w,c
  3513  00E2EC  6E05               	movwf	setAddrWindow@x1,c
  3514  00E2EE  C008  F006         	movff	drawFastHLine@y,setAddrWindow@y1
  3515  00E2F2  5012               	movf	drawFastHLine@x,w,c
  3516  00E2F4  EC9E  F06F         	call	_setAddrWindow
  3517                           
  3518                           ;Lab8.c: 759: PORTDbits.RD0 = 1;
  3519  00E2F8  8083               	bsf	3971,0,c	;volatile
  3520                           
  3521                           ;Lab8.c: 760: PORTDbits.RD1 = 0;
  3522  00E2FA  9283               	bcf	3971,1,c	;volatile
  3523                           
  3524                           ;Lab8.c: 762: while (w--) {
  3525  00E2FC  D007               	goto	l3207
  3526  00E2FE                     l3205:
  3527                           
  3528                           ;Lab8.c: 763: spiwrite(hi);
  3529  00E2FE  5010               	movf	drawFastHLine@hi,w,c
  3530  00E300  EC80  F06D         	call	_spiwrite
  3531                           
  3532                           ;Lab8.c: 764: spiwrite(lo);
  3533  00E304  5011               	movf	drawFastHLine@lo,w,c
  3534  00E306  EC80  F06D         	call	_spiwrite
  3535  00E30A  D000               	goto	l3207
  3536  00E30C                     l3207:
  3537  00E30C  0609               	decf	drawFastHLine@w,f,c
  3538  00E30E  2809               	incf	drawFastHLine@w,w,c
  3539  00E310  A4D8               	btfss	status,2,c
  3540  00E312  D7F5               	goto	l3205
  3541                           
  3542                           ;Lab8.c: 765: }
  3543                           ;Lab8.c: 766: PORTDbits.RD1 = 1;
  3544  00E314  8283               	bsf	3971,1,c	;volatile
  3545  00E316                     l273:
  3546  00E316  0012               	return		;funcret
  3547  00E318                     __end_of_drawFastHLine:
  3548                           	opt stack 0
  3549                           tblptru	equ	0xFF8
  3550                           tblptrh	equ	0xFF7
  3551                           tblptrl	equ	0xFF6
  3552                           tablat	equ	0xFF5
  3553                           intcon2	equ	0xFF1
  3554                           postinc0	equ	0xFEE
  3555                           wreg	equ	0xFE8
  3556                           postdec1	equ	0xFE5
  3557                           fsr1l	equ	0xFE1
  3558                           status	equ	0xFD8
  3559                           
  3560 ;; *************** function _TFT_GreenTab_Initialize *****************
  3561 ;; Defined at:
  3562 ;;		line 770 in file "Lab8.c"
  3563 ;; Parameters:    Size  Location     Type
  3564 ;;		None
  3565 ;; Auto vars:     Size  Location     Type
  3566 ;;		None
  3567 ;; Return value:  Size  Location     Type
  3568 ;;		None               void
  3569 ;; Registers used:
  3570 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3571 ;; Tracked objects:
  3572 ;;		On entry : 0/0
  3573 ;;		On exit  : 0/0
  3574 ;;		Unchanged: 0/0
  3575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3580 ;;Total ram usage:        0 bytes
  3581 ;; Hardware stack levels used:    1
  3582 ;; Hardware stack levels required when called:    3
  3583 ;; This function calls:
  3584 ;;		_Rcmd1
  3585 ;;		_Rcmd2red
  3586 ;;		_Rcmd3
  3587 ;;		_write_command
  3588 ;;		_write_data
  3589 ;; This function is called by:
  3590 ;;		_Initialize_Screen
  3591 ;; This function uses a non-reentrant model
  3592 ;;
  3593                           
  3594                           	psect	text10
  3595  00DBFC                     __ptext10:
  3596                           	opt stack 0
  3597  00DBFC                     _TFT_GreenTab_Initialize:
  3598                           	opt stack 26
  3599                           
  3600                           ;Lab8.c: 772: PORTDbits.RD1 = 1;
  3601                           
  3602                           ;incstack = 0
  3603  00DBFC  8283               	bsf	3971,1,c	;volatile
  3604                           
  3605                           ;Lab8.c: 773: PORTDbits.RD0 = 0;
  3606  00DBFE  9083               	bcf	3971,0,c	;volatile
  3607                           
  3608                           ;Lab8.c: 775: SSPSTAT=0x80;
  3609  00DC00  0E80               	movlw	128
  3610  00DC02  6EC7               	movwf	4039,c	;volatile
  3611                           
  3612                           ;Lab8.c: 776: SSPCON1=0x30;
  3613  00DC04  0E30               	movlw	48
  3614  00DC06  6EC6               	movwf	4038,c	;volatile
  3615                           
  3616                           ;Lab8.c: 779: Rcmd1();
  3617  00DC08  EC19  F076         	call	_Rcmd1	;wreg free
  3618                           
  3619                           ;Lab8.c: 780: Rcmd2red();
  3620  00DC0C  ECB1  F06E         	call	_Rcmd2red	;wreg free
  3621                           
  3622                           ;Lab8.c: 781: Rcmd3();
  3623  00DC10  ECA0  F075         	call	_Rcmd3	;wreg free
  3624                           
  3625                           ;Lab8.c: 782: write_command(0x36);
  3626  00DC14  0E36               	movlw	54
  3627  00DC16  EC5E  F06D         	call	_write_command
  3628                           
  3629                           ;Lab8.c: 783: write_data(0xC0);
  3630  00DC1A  0EC0               	movlw	192
  3631  00DC1C  EC66  F06D         	call	_write_data
  3632                           
  3633                           ;Lab8.c: 784: _tft_type = 1;
  3634  00DC20  0E01               	movlw	1
  3635  00DC22  6E76               	movwf	__tft_type,c
  3636  00DC24  0012               	return		;funcret
  3637  00DC26                     __end_of_TFT_GreenTab_Initialize:
  3638                           	opt stack 0
  3639                           tblptru	equ	0xFF8
  3640                           tblptrh	equ	0xFF7
  3641                           tblptrl	equ	0xFF6
  3642                           tablat	equ	0xFF5
  3643                           intcon2	equ	0xFF1
  3644                           postinc0	equ	0xFEE
  3645                           wreg	equ	0xFE8
  3646                           postdec1	equ	0xFE5
  3647                           fsr1l	equ	0xFE1
  3648                           status	equ	0xFD8
  3649                           
  3650 ;; *************** function _Rcmd3 *****************
  3651 ;; Defined at:
  3652 ;;		line 464 in file "Lab8.c"
  3653 ;; Parameters:    Size  Location     Type
  3654 ;;		None
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;		None
  3657 ;; Return value:  Size  Location     Type
  3658 ;;		None               void
  3659 ;; Registers used:
  3660 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 0/0
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3670 ;;Total ram usage:        0 bytes
  3671 ;; Hardware stack levels used:    1
  3672 ;; Hardware stack levels required when called:    2
  3673 ;; This function calls:
  3674 ;;		_delay_ms
  3675 ;;		_write_command
  3676 ;;		_write_data
  3677 ;; This function is called by:
  3678 ;;		_TFT_GreenTab_Initialize
  3679 ;;		_TFT_BlackTab_Initialize
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           	psect	text11
  3684  00EB40                     __ptext11:
  3685                           	opt stack 0
  3686  00EB40                     _Rcmd3:
  3687                           	opt stack 26
  3688                           
  3689                           ;Lab8.c: 466: write_command(0xE0);
  3690                           
  3691                           ;incstack = 0
  3692  00EB40  0EE0               	movlw	224
  3693  00EB42  EC5E  F06D         	call	_write_command
  3694                           
  3695                           ;Lab8.c: 467: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x12);
  3696  00EB46  0E02               	movlw	2
  3697  00EB48  EC66  F06D         	call	_write_data
  3698  00EB4C  0E1C               	movlw	28
  3699  00EB4E  EC66  F06D         	call	_write_data
  3700  00EB52  0E07               	movlw	7
  3701  00EB54  EC66  F06D         	call	_write_data
  3702  00EB58  0E12               	movlw	18
  3703  00EB5A  EC66  F06D         	call	_write_data
  3704                           
  3705                           ;Lab8.c: 468: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2D);
  3706  00EB5E  0E37               	movlw	55
  3707  00EB60  EC66  F06D         	call	_write_data
  3708  00EB64  0E32               	movlw	50
  3709  00EB66  EC66  F06D         	call	_write_data
  3710  00EB6A  0E29               	movlw	41
  3711  00EB6C  EC66  F06D         	call	_write_data
  3712  00EB70  0E2D               	movlw	45
  3713  00EB72  EC66  F06D         	call	_write_data
  3714                           
  3715                           ;Lab8.c: 469: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x39);
  3716  00EB76  0E29               	movlw	41
  3717  00EB78  EC66  F06D         	call	_write_data
  3718  00EB7C  0E25               	movlw	37
  3719  00EB7E  EC66  F06D         	call	_write_data
  3720  00EB82  0E2B               	movlw	43
  3721  00EB84  EC66  F06D         	call	_write_data
  3722  00EB88  0E39               	movlw	57
  3723  00EB8A  EC66  F06D         	call	_write_data
  3724                           
  3725                           ;Lab8.c: 470: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x10);
  3726  00EB8E  0E00               	movlw	0
  3727  00EB90  EC66  F06D         	call	_write_data
  3728  00EB94  0E01               	movlw	1
  3729  00EB96  EC66  F06D         	call	_write_data
  3730  00EB9A  0E03               	movlw	3
  3731  00EB9C  EC66  F06D         	call	_write_data
  3732  00EBA0  0E10               	movlw	16
  3733  00EBA2  EC66  F06D         	call	_write_data
  3734                           
  3735                           ;Lab8.c: 471: write_command(0xE1);
  3736  00EBA6  0EE1               	movlw	225
  3737  00EBA8  EC5E  F06D         	call	_write_command
  3738                           
  3739                           ;Lab8.c: 472: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x06);
  3740  00EBAC  0E03               	movlw	3
  3741  00EBAE  EC66  F06D         	call	_write_data
  3742  00EBB2  0E1D               	movlw	29
  3743  00EBB4  EC66  F06D         	call	_write_data
  3744  00EBB8  0E07               	movlw	7
  3745  00EBBA  EC66  F06D         	call	_write_data
  3746  00EBBE  0E06               	movlw	6
  3747  00EBC0  EC66  F06D         	call	_write_data
  3748                           
  3749                           ;Lab8.c: 473: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2D);
  3750  00EBC4  0E2E               	movlw	46
  3751  00EBC6  EC66  F06D         	call	_write_data
  3752  00EBCA  0E2C               	movlw	44
  3753  00EBCC  EC66  F06D         	call	_write_data
  3754  00EBD0  0E29               	movlw	41
  3755  00EBD2  EC66  F06D         	call	_write_data
  3756  00EBD6  0E2D               	movlw	45
  3757  00EBD8  EC66  F06D         	call	_write_data
  3758                           
  3759                           ;Lab8.c: 474: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3F);
  3760  00EBDC  0E2E               	movlw	46
  3761  00EBDE  EC66  F06D         	call	_write_data
  3762  00EBE2  0E2E               	movlw	46
  3763  00EBE4  EC66  F06D         	call	_write_data
  3764  00EBE8  0E37               	movlw	55
  3765  00EBEA  EC66  F06D         	call	_write_data
  3766  00EBEE  0E3F               	movlw	63
  3767  00EBF0  EC66  F06D         	call	_write_data
  3768                           
  3769                           ;Lab8.c: 475: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x10);
  3770  00EBF4  0E00               	movlw	0
  3771  00EBF6  EC66  F06D         	call	_write_data
  3772  00EBFA  0E00               	movlw	0
  3773  00EBFC  EC66  F06D         	call	_write_data
  3774  00EC00  0E02               	movlw	2
  3775  00EC02  EC66  F06D         	call	_write_data
  3776  00EC06  0E10               	movlw	16
  3777  00EC08  EC66  F06D         	call	_write_data
  3778                           
  3779                           ;Lab8.c: 476: write_command(0x13);
  3780  00EC0C  0E13               	movlw	19
  3781  00EC0E  EC5E  F06D         	call	_write_command
  3782                           
  3783                           ;Lab8.c: 477: delay_ms(10);
  3784  00EC12  0E00               	movlw	0
  3785  00EC14  6E08               	movwf	delay_ms@ms+1,c
  3786  00EC16  0E0A               	movlw	10
  3787  00EC18  6E07               	movwf	delay_ms@ms,c
  3788  00EC1A  ECEE  F06F         	call	_delay_ms	;wreg free
  3789                           
  3790                           ;Lab8.c: 478: write_command(0x29);
  3791  00EC1E  0E29               	movlw	41
  3792  00EC20  EC5E  F06D         	call	_write_command
  3793                           
  3794                           ;Lab8.c: 479: delay_ms(100);
  3795  00EC24  0E00               	movlw	0
  3796  00EC26  6E08               	movwf	delay_ms@ms+1,c
  3797  00EC28  0E64               	movlw	100
  3798  00EC2A  6E07               	movwf	delay_ms@ms,c
  3799  00EC2C  ECEE  F06F         	call	_delay_ms	;wreg free
  3800  00EC30  0012               	return		;funcret
  3801  00EC32                     __end_of_Rcmd3:
  3802                           	opt stack 0
  3803                           tblptru	equ	0xFF8
  3804                           tblptrh	equ	0xFF7
  3805                           tblptrl	equ	0xFF6
  3806                           tablat	equ	0xFF5
  3807                           intcon2	equ	0xFF1
  3808                           postinc0	equ	0xFEE
  3809                           wreg	equ	0xFE8
  3810                           postdec1	equ	0xFE5
  3811                           fsr1l	equ	0xFE1
  3812                           status	equ	0xFD8
  3813                           
  3814 ;; *************** function _Rcmd2red *****************
  3815 ;; Defined at:
  3816 ;;		line 454 in file "Lab8.c"
  3817 ;; Parameters:    Size  Location     Type
  3818 ;;		None
  3819 ;; Auto vars:     Size  Location     Type
  3820 ;;		None
  3821 ;; Return value:  Size  Location     Type
  3822 ;;		None               void
  3823 ;; Registers used:
  3824 ;;		wreg, status,2, cstack
  3825 ;; Tracked objects:
  3826 ;;		On entry : 0/0
  3827 ;;		On exit  : 0/0
  3828 ;;		Unchanged: 0/0
  3829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3834 ;;Total ram usage:        0 bytes
  3835 ;; Hardware stack levels used:    1
  3836 ;; Hardware stack levels required when called:    2
  3837 ;; This function calls:
  3838 ;;		_write_command
  3839 ;;		_write_data
  3840 ;; This function is called by:
  3841 ;;		_TFT_GreenTab_Initialize
  3842 ;; This function uses a non-reentrant model
  3843 ;;
  3844                           
  3845                           	psect	text12
  3846  00DD62                     __ptext12:
  3847                           	opt stack 0
  3848  00DD62                     _Rcmd2red:
  3849                           	opt stack 26
  3850                           
  3851                           ;Lab8.c: 456: write_command(0x2A);
  3852                           
  3853                           ;incstack = 0
  3854  00DD62  0E2A               	movlw	42
  3855  00DD64  EC5E  F06D         	call	_write_command
  3856                           
  3857                           ;Lab8.c: 457: write_data(0x00); write_data(0x00);
  3858  00DD68  0E00               	movlw	0
  3859  00DD6A  EC66  F06D         	call	_write_data
  3860  00DD6E  0E00               	movlw	0
  3861  00DD70  EC66  F06D         	call	_write_data
  3862                           
  3863                           ;Lab8.c: 458: write_data(0x00); write_data(0x7F);
  3864  00DD74  0E00               	movlw	0
  3865  00DD76  EC66  F06D         	call	_write_data
  3866  00DD7A  0E7F               	movlw	127
  3867  00DD7C  EC66  F06D         	call	_write_data
  3868                           
  3869                           ;Lab8.c: 459: write_command(0x2B);
  3870  00DD80  0E2B               	movlw	43
  3871  00DD82  EC5E  F06D         	call	_write_command
  3872                           
  3873                           ;Lab8.c: 460: write_data(0x00); write_data(0x00);
  3874  00DD86  0E00               	movlw	0
  3875  00DD88  EC66  F06D         	call	_write_data
  3876  00DD8C  0E00               	movlw	0
  3877  00DD8E  EC66  F06D         	call	_write_data
  3878                           
  3879                           ;Lab8.c: 461: write_data(0x00); write_data(0x9F);
  3880  00DD92  0E00               	movlw	0
  3881  00DD94  EC66  F06D         	call	_write_data
  3882  00DD98  0E9F               	movlw	159
  3883  00DD9A  EC66  F06D         	call	_write_data
  3884  00DD9E  0012               	return		;funcret
  3885  00DDA0                     __end_of_Rcmd2red:
  3886                           	opt stack 0
  3887                           tblptru	equ	0xFF8
  3888                           tblptrh	equ	0xFF7
  3889                           tblptrl	equ	0xFF6
  3890                           tablat	equ	0xFF5
  3891                           intcon2	equ	0xFF1
  3892                           postinc0	equ	0xFEE
  3893                           wreg	equ	0xFE8
  3894                           postdec1	equ	0xFE5
  3895                           fsr1l	equ	0xFE1
  3896                           status	equ	0xFD8
  3897                           
  3898 ;; *************** function _Rcmd1 *****************
  3899 ;; Defined at:
  3900 ;;		line 407 in file "Lab8.c"
  3901 ;; Parameters:    Size  Location     Type
  3902 ;;		None
  3903 ;; Auto vars:     Size  Location     Type
  3904 ;;		None
  3905 ;; Return value:  Size  Location     Type
  3906 ;;		None               void
  3907 ;; Registers used:
  3908 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3909 ;; Tracked objects:
  3910 ;;		On entry : 0/0
  3911 ;;		On exit  : 0/0
  3912 ;;		Unchanged: 0/0
  3913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3918 ;;Total ram usage:        0 bytes
  3919 ;; Hardware stack levels used:    1
  3920 ;; Hardware stack levels required when called:    2
  3921 ;; This function calls:
  3922 ;;		_delay_ms
  3923 ;;		_write_command
  3924 ;;		_write_data
  3925 ;; This function is called by:
  3926 ;;		_TFT_GreenTab_Initialize
  3927 ;;		_TFT_BlackTab_Initialize
  3928 ;; This function uses a non-reentrant model
  3929 ;;
  3930                           
  3931                           	psect	text13
  3932  00EC32                     __ptext13:
  3933                           	opt stack 0
  3934  00EC32                     _Rcmd1:
  3935                           	opt stack 26
  3936                           
  3937                           ;Lab8.c: 409: write_command(0x01);
  3938                           
  3939                           ;incstack = 0
  3940  00EC32  0E01               	movlw	1
  3941  00EC34  EC5E  F06D         	call	_write_command
  3942                           
  3943                           ;Lab8.c: 410: delay_ms(150);
  3944  00EC38  0E00               	movlw	0
  3945  00EC3A  6E08               	movwf	delay_ms@ms+1,c
  3946  00EC3C  0E96               	movlw	150
  3947  00EC3E  6E07               	movwf	delay_ms@ms,c
  3948  00EC40  ECEE  F06F         	call	_delay_ms	;wreg free
  3949                           
  3950                           ;Lab8.c: 411: write_command(0x11);
  3951  00EC44  0E11               	movlw	17
  3952  00EC46  EC5E  F06D         	call	_write_command
  3953                           
  3954                           ;Lab8.c: 412: delay_ms(500);
  3955  00EC4A  0E01               	movlw	1
  3956  00EC4C  6E08               	movwf	delay_ms@ms+1,c
  3957  00EC4E  0EF4               	movlw	244
  3958  00EC50  6E07               	movwf	delay_ms@ms,c
  3959  00EC52  ECEE  F06F         	call	_delay_ms	;wreg free
  3960                           
  3961                           ;Lab8.c: 413: write_command(0xB1);
  3962  00EC56  0EB1               	movlw	177
  3963  00EC58  EC5E  F06D         	call	_write_command
  3964                           
  3965                           ;Lab8.c: 414: write_data(0x01);
  3966  00EC5C  0E01               	movlw	1
  3967  00EC5E  EC66  F06D         	call	_write_data
  3968                           
  3969                           ;Lab8.c: 415: write_data(0x2C);
  3970  00EC62  0E2C               	movlw	44
  3971  00EC64  EC66  F06D         	call	_write_data
  3972                           
  3973                           ;Lab8.c: 416: write_data(0x2D);
  3974  00EC68  0E2D               	movlw	45
  3975  00EC6A  EC66  F06D         	call	_write_data
  3976                           
  3977                           ;Lab8.c: 417: write_command(0xB2);
  3978  00EC6E  0EB2               	movlw	178
  3979  00EC70  EC5E  F06D         	call	_write_command
  3980                           
  3981                           ;Lab8.c: 418: write_data(0x01);
  3982  00EC74  0E01               	movlw	1
  3983  00EC76  EC66  F06D         	call	_write_data
  3984                           
  3985                           ;Lab8.c: 419: write_data(0x2C);
  3986  00EC7A  0E2C               	movlw	44
  3987  00EC7C  EC66  F06D         	call	_write_data
  3988                           
  3989                           ;Lab8.c: 420: write_data(0x2D);
  3990  00EC80  0E2D               	movlw	45
  3991  00EC82  EC66  F06D         	call	_write_data
  3992                           
  3993                           ;Lab8.c: 421: write_command(0xB3);
  3994  00EC86  0EB3               	movlw	179
  3995  00EC88  EC5E  F06D         	call	_write_command
  3996                           
  3997                           ;Lab8.c: 422: write_data(0x01);
  3998  00EC8C  0E01               	movlw	1
  3999  00EC8E  EC66  F06D         	call	_write_data
  4000                           
  4001                           ;Lab8.c: 423: write_data(0x2C);
  4002  00EC92  0E2C               	movlw	44
  4003  00EC94  EC66  F06D         	call	_write_data
  4004                           
  4005                           ;Lab8.c: 424: write_data(0x2D);
  4006  00EC98  0E2D               	movlw	45
  4007  00EC9A  EC66  F06D         	call	_write_data
  4008                           
  4009                           ;Lab8.c: 425: write_data(0x01);
  4010  00EC9E  0E01               	movlw	1
  4011  00ECA0  EC66  F06D         	call	_write_data
  4012                           
  4013                           ;Lab8.c: 426: write_data(0x2C);
  4014  00ECA4  0E2C               	movlw	44
  4015  00ECA6  EC66  F06D         	call	_write_data
  4016                           
  4017                           ;Lab8.c: 427: write_data(0x2D);
  4018  00ECAA  0E2D               	movlw	45
  4019  00ECAC  EC66  F06D         	call	_write_data
  4020                           
  4021                           ;Lab8.c: 428: write_command(0xB4);
  4022  00ECB0  0EB4               	movlw	180
  4023  00ECB2  EC5E  F06D         	call	_write_command
  4024                           
  4025                           ;Lab8.c: 429: write_data(0x07);
  4026  00ECB6  0E07               	movlw	7
  4027  00ECB8  EC66  F06D         	call	_write_data
  4028                           
  4029                           ;Lab8.c: 430: write_command(0xC0);
  4030  00ECBC  0EC0               	movlw	192
  4031  00ECBE  EC5E  F06D         	call	_write_command
  4032                           
  4033                           ;Lab8.c: 431: write_data(0xA2);
  4034  00ECC2  0EA2               	movlw	162
  4035  00ECC4  EC66  F06D         	call	_write_data
  4036                           
  4037                           ;Lab8.c: 432: write_data(0x02);
  4038  00ECC8  0E02               	movlw	2
  4039  00ECCA  EC66  F06D         	call	_write_data
  4040                           
  4041                           ;Lab8.c: 433: write_data(0x84);
  4042  00ECCE  0E84               	movlw	132
  4043  00ECD0  EC66  F06D         	call	_write_data
  4044                           
  4045                           ;Lab8.c: 434: write_command(0xC1);
  4046  00ECD4  0EC1               	movlw	193
  4047  00ECD6  EC5E  F06D         	call	_write_command
  4048                           
  4049                           ;Lab8.c: 435: write_data(0xC5);
  4050  00ECDA  0EC5               	movlw	197
  4051  00ECDC  EC66  F06D         	call	_write_data
  4052                           
  4053                           ;Lab8.c: 436: write_command(0xC2);
  4054  00ECE0  0EC2               	movlw	194
  4055  00ECE2  EC5E  F06D         	call	_write_command
  4056                           
  4057                           ;Lab8.c: 437: write_data(0x0A);
  4058  00ECE6  0E0A               	movlw	10
  4059  00ECE8  EC66  F06D         	call	_write_data
  4060                           
  4061                           ;Lab8.c: 438: write_data(0x00);
  4062  00ECEC  0E00               	movlw	0
  4063  00ECEE  EC66  F06D         	call	_write_data
  4064                           
  4065                           ;Lab8.c: 439: write_command(0xC3);
  4066  00ECF2  0EC3               	movlw	195
  4067  00ECF4  EC5E  F06D         	call	_write_command
  4068                           
  4069                           ;Lab8.c: 440: write_data(0x8A);
  4070  00ECF8  0E8A               	movlw	138
  4071  00ECFA  EC66  F06D         	call	_write_data
  4072                           
  4073                           ;Lab8.c: 441: write_data(0x2A);
  4074  00ECFE  0E2A               	movlw	42
  4075  00ED00  EC66  F06D         	call	_write_data
  4076                           
  4077                           ;Lab8.c: 442: write_command(0xC4);
  4078  00ED04  0EC4               	movlw	196
  4079  00ED06  EC5E  F06D         	call	_write_command
  4080                           
  4081                           ;Lab8.c: 443: write_data(0x8A);
  4082  00ED0A  0E8A               	movlw	138
  4083  00ED0C  EC66  F06D         	call	_write_data
  4084                           
  4085                           ;Lab8.c: 444: write_data(0xEE);
  4086  00ED10  0EEE               	movlw	238
  4087  00ED12  EC66  F06D         	call	_write_data
  4088                           
  4089                           ;Lab8.c: 445: write_command(0xC5);
  4090  00ED16  0EC5               	movlw	197
  4091  00ED18  EC5E  F06D         	call	_write_command
  4092                           
  4093                           ;Lab8.c: 446: write_data(0x0E);
  4094  00ED1C  0E0E               	movlw	14
  4095  00ED1E  EC66  F06D         	call	_write_data
  4096                           
  4097                           ;Lab8.c: 447: write_command(0x20);
  4098  00ED22  0E20               	movlw	32
  4099  00ED24  EC5E  F06D         	call	_write_command
  4100                           
  4101                           ;Lab8.c: 448: write_command(0x36);
  4102  00ED28  0E36               	movlw	54
  4103  00ED2A  EC5E  F06D         	call	_write_command
  4104                           
  4105                           ;Lab8.c: 449: write_data(0xC8);
  4106  00ED2E  0EC8               	movlw	200
  4107  00ED30  EC66  F06D         	call	_write_data
  4108                           
  4109                           ;Lab8.c: 450: write_command(0x3A);
  4110  00ED34  0E3A               	movlw	58
  4111  00ED36  EC5E  F06D         	call	_write_command
  4112                           
  4113                           ;Lab8.c: 451: write_data(0x05);
  4114  00ED3A  0E05               	movlw	5
  4115  00ED3C  EC66  F06D         	call	_write_data
  4116  00ED40  0012               	return		;funcret
  4117  00ED42                     __end_of_Rcmd1:
  4118                           	opt stack 0
  4119                           tblptru	equ	0xFF8
  4120                           tblptrh	equ	0xFF7
  4121                           tblptrl	equ	0xFF6
  4122                           tablat	equ	0xFF5
  4123                           intcon2	equ	0xFF1
  4124                           postinc0	equ	0xFEE
  4125                           wreg	equ	0xFE8
  4126                           postdec1	equ	0xFE5
  4127                           fsr1l	equ	0xFE1
  4128                           status	equ	0xFD8
  4129                           
  4130 ;; *************** function _LCD_Reset *****************
  4131 ;; Defined at:
  4132 ;;		line 343 in file "Lab8.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;		None
  4135 ;; Auto vars:     Size  Location     Type
  4136 ;;		None
  4137 ;; Return value:  Size  Location     Type
  4138 ;;		None               void
  4139 ;; Registers used:
  4140 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4141 ;; Tracked objects:
  4142 ;;		On entry : 0/0
  4143 ;;		On exit  : 0/0
  4144 ;;		Unchanged: 0/0
  4145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4150 ;;Total ram usage:        0 bytes
  4151 ;; Hardware stack levels used:    1
  4152 ;; Hardware stack levels required when called:    2
  4153 ;; This function calls:
  4154 ;;		_delay_ms
  4155 ;; This function is called by:
  4156 ;;		_Initialize_Screen
  4157 ;; This function uses a non-reentrant model
  4158 ;;
  4159                           
  4160                           	psect	text14
  4161  00DAEE                     __ptext14:
  4162                           	opt stack 0
  4163  00DAEE                     _LCD_Reset:
  4164                           	opt stack 27
  4165                           
  4166                           ;Lab8.c: 345: PORTDbits.RD2 = 0;
  4167                           
  4168                           ;incstack = 0
  4169  00DAEE  9483               	bcf	3971,2,c	;volatile
  4170                           
  4171                           ;Lab8.c: 346: delay_ms(100);
  4172  00DAF0  0E00               	movlw	0
  4173  00DAF2  6E08               	movwf	delay_ms@ms+1,c
  4174  00DAF4  0E64               	movlw	100
  4175  00DAF6  6E07               	movwf	delay_ms@ms,c
  4176  00DAF8  ECEE  F06F         	call	_delay_ms	;wreg free
  4177                           
  4178                           ;Lab8.c: 347: PORTDbits.RD2 = 1;
  4179  00DAFC  8483               	bsf	3971,2,c	;volatile
  4180  00DAFE  0012               	return		;funcret
  4181  00DB00                     __end_of_LCD_Reset:
  4182                           	opt stack 0
  4183                           tblptru	equ	0xFF8
  4184                           tblptrh	equ	0xFF7
  4185                           tblptrl	equ	0xFF6
  4186                           tablat	equ	0xFF5
  4187                           intcon2	equ	0xFF1
  4188                           postinc0	equ	0xFEE
  4189                           wreg	equ	0xFE8
  4190                           postdec1	equ	0xFE5
  4191                           fsr1l	equ	0xFE1
  4192                           status	equ	0xFD8
  4193                           
  4194 ;; *************** function _delay_ms *****************
  4195 ;; Defined at:
  4196 ;;		line 190 in file "Lab8.c"
  4197 ;; Parameters:    Size  Location     Type
  4198 ;;  ms              2    6[COMRAM] int 
  4199 ;; Auto vars:     Size  Location     Type
  4200 ;;  count           2   10[COMRAM] int 
  4201 ;; Return value:  Size  Location     Type
  4202 ;;		None               void
  4203 ;; Registers used:
  4204 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4205 ;; Tracked objects:
  4206 ;;		On entry : 0/0
  4207 ;;		On exit  : 0/0
  4208 ;;		Unchanged: 0/0
  4209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4210 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4211 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4212 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4213 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4214 ;;Total ram usage:        6 bytes
  4215 ;; Hardware stack levels used:    1
  4216 ;; Hardware stack levels required when called:    1
  4217 ;; This function calls:
  4218 ;;		___wmul
  4219 ;; This function is called by:
  4220 ;;		_LCD_Reset
  4221 ;;		_Rcmd1
  4222 ;;		_Rcmd3
  4223 ;;		_Bcmd
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226                           
  4227                           	psect	text15
  4228  00DFDC                     __ptext15:
  4229                           	opt stack 0
  4230  00DFDC                     _delay_ms:
  4231                           	opt stack 26
  4232                           
  4233                           ;Lab8.c: 196: int count;
  4234                           ;Lab8.c: 197: count = 8000000/4000/8 * ms;
  4235                           
  4236                           ;incstack = 0
  4237  00DFDC  C007  F001         	movff	delay_ms@ms,___wmul@multiplier
  4238  00DFE0  C008  F002         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4239  00DFE4  0E00               	movlw	0
  4240  00DFE6  6E04               	movwf	___wmul@multiplicand+1,c
  4241  00DFE8  0EFA               	movlw	250
  4242  00DFEA  6E03               	movwf	___wmul@multiplicand,c
  4243  00DFEC  ECEA  F06D         	call	___wmul	;wreg free
  4244  00DFF0  C001  F00B         	movff	?___wmul,delay_ms@count
  4245  00DFF4  C002  F00C         	movff	?___wmul+1,delay_ms@count+1
  4246                           
  4247                           ;Lab8.c: 198: count = (0xffff - count);
  4248  00DFF8  C00B  F009         	movff	delay_ms@count,??_delay_ms
  4249  00DFFC  C00C  F00A         	movff	delay_ms@count+1,??_delay_ms+1
  4250  00E000  1E09               	comf	??_delay_ms,f,c
  4251  00E002  1E0A               	comf	??_delay_ms+1,f,c
  4252  00E004  4A09               	infsnz	??_delay_ms,f,c
  4253  00E006  2A0A               	incf	??_delay_ms+1,f,c
  4254  00E008  0EFF               	movlw	255
  4255  00E00A  2409               	addwf	??_delay_ms,w,c
  4256  00E00C  6E0B               	movwf	delay_ms@count,c
  4257  00E00E  0EFF               	movlw	255
  4258  00E010  200A               	addwfc	??_delay_ms+1,w,c
  4259  00E012  6E0C               	movwf	delay_ms@count+1,c
  4260                           
  4261                           ;Lab8.c: 200: T3CON = 0xb8;
  4262  00E014  0EB8               	movlw	184
  4263  00E016  6EB1               	movwf	4017,c	;volatile
  4264                           
  4265                           ;Lab8.c: 202: TMR0L = count & 0x00ff;
  4266  00E018  C00B  FFD6         	movff	delay_ms@count,4054	;volatile
  4267                           
  4268                           ;Lab8.c: 203: TMR0H = count >> 8;
  4269  00E01C  500C               	movf	delay_ms@count+1,w,c
  4270  00E01E  6ED7               	movwf	4055,c	;volatile
  4271                           
  4272                           ;Lab8.c: 205: PIR2bits.TMR3IF = 0;
  4273  00E020  92A1               	bcf	4001,1,c	;volatile
  4274                           
  4275                           ;Lab8.c: 206: T3CONbits.TMR3ON = 1;
  4276  00E022  80B1               	bsf	4017,0,c	;volatile
  4277                           
  4278                           ;Lab8.c: 208: while (PIR2bits.TMR3IF == 0);
  4279  00E024  D000               	goto	l115
  4280  00E026                     l115:
  4281  00E026  A2A1               	btfss	4001,1,c	;volatile
  4282  00E028  D7FE               	goto	l115
  4283                           
  4284                           ;Lab8.c: 209: T3CONbits.TMR3ON = 0;
  4285  00E02A  90B1               	bcf	4017,0,c	;volatile
  4286  00E02C  0012               	return		;funcret
  4287  00E02E                     __end_of_delay_ms:
  4288                           	opt stack 0
  4289                           tblptru	equ	0xFF8
  4290                           tblptrh	equ	0xFF7
  4291                           tblptrl	equ	0xFF6
  4292                           tablat	equ	0xFF5
  4293                           intcon2	equ	0xFF1
  4294                           postinc0	equ	0xFEE
  4295                           wreg	equ	0xFE8
  4296                           postdec1	equ	0xFE5
  4297                           fsr1l	equ	0xFE1
  4298                           status	equ	0xFD8
  4299                           
  4300 ;; *************** function _Init_ADC *****************
  4301 ;; Defined at:
  4302 ;;		line 1107 in file "Lab8.c"
  4303 ;; Parameters:    Size  Location     Type
  4304 ;;		None
  4305 ;; Auto vars:     Size  Location     Type
  4306 ;;		None
  4307 ;; Return value:  Size  Location     Type
  4308 ;;		None               void
  4309 ;; Registers used:
  4310 ;;		wreg, status,2
  4311 ;; Tracked objects:
  4312 ;;		On entry : 0/0
  4313 ;;		On exit  : 0/0
  4314 ;;		Unchanged: 0/0
  4315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4320 ;;Total ram usage:        0 bytes
  4321 ;; Hardware stack levels used:    1
  4322 ;; This function calls:
  4323 ;;		Nothing
  4324 ;; This function is called by:
  4325 ;;		_main
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           	psect	text16
  4330  00DAB2                     __ptext16:
  4331                           	opt stack 0
  4332  00DAB2                     _Init_ADC:
  4333                           	opt stack 30
  4334                           
  4335                           ;Lab8.c: 1109: ADCON1= 0x0E;
  4336                           
  4337                           ;incstack = 0
  4338  00DAB2  0E0E               	movlw	14
  4339  00DAB4  6EC1               	movwf	4033,c	;volatile
  4340                           
  4341                           ;Lab8.c: 1110: ADCON2= 0xA9;
  4342  00DAB6  0EA9               	movlw	169
  4343  00DAB8  6EC0               	movwf	4032,c	;volatile
  4344  00DABA  0012               	return		;funcret
  4345  00DABC                     __end_of_Init_ADC:
  4346                           	opt stack 0
  4347                           tblptru	equ	0xFF8
  4348                           tblptrh	equ	0xFF7
  4349                           tblptrl	equ	0xFF6
  4350                           tablat	equ	0xFF5
  4351                           intcon2	equ	0xFF1
  4352                           postinc0	equ	0xFEE
  4353                           wreg	equ	0xFE8
  4354                           postdec1	equ	0xFE5
  4355                           fsr1l	equ	0xFE1
  4356                           status	equ	0xFD8
  4357                           
  4358 ;; *************** function _Day_Mode *****************
  4359 ;; Defined at:
  4360 ;;		line 1206 in file "Lab8.c"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;		None
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;		None
  4365 ;; Return value:  Size  Location     Type
  4366 ;;		None               void
  4367 ;; Registers used:
  4368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4369 ;; Tracked objects:
  4370 ;;		On entry : 0/0
  4371 ;;		On exit  : 0/0
  4372 ;;		Unchanged: 0/0
  4373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4378 ;;Total ram usage:        0 bytes
  4379 ;; Hardware stack levels used:    1
  4380 ;; Hardware stack levels required when called:   10
  4381 ;; This function calls:
  4382 ;;		_PED_Control
  4383 ;;		_Set_EW
  4384 ;;		_Set_EW_LT
  4385 ;;		_Set_NS
  4386 ;;		_Set_NS_LT
  4387 ;;		_Wait_N_Seconds
  4388 ;; This function is called by:
  4389 ;;		_main
  4390 ;; This function uses a non-reentrant model
  4391 ;;
  4392                           
  4393                           	psect	text17
  4394  00E594                     __ptext17:
  4395                           	opt stack 0
  4396  00E594                     _Day_Mode:
  4397                           	opt stack 20
  4398                           
  4399                           ;Lab8.c: 1208: MODE = 1;
  4400                           
  4401                           ;incstack = 0
  4402  00E594  0E00               	movlw	0
  4403  00E596  6E68               	movwf	_MODE+1,c
  4404  00E598  0E01               	movlw	1
  4405  00E59A  6E67               	movwf	_MODE,c
  4406                           
  4407                           ;Lab8.c: 1209: PORTEbits.RE1 = 1;
  4408  00E59C  8284               	bsf	3972,1,c	;volatile
  4409                           
  4410                           ;Lab8.c: 1210: Act_Mode_Txt[0] = 'D';
  4411  00E59E  0E44               	movlw	68
  4412  00E5A0  6E54               	movwf	_Act_Mode_Txt,c
  4413                           
  4414                           ;Lab8.c: 1212: Set_NS(2);
  4415  00E5A2  0E02               	movlw	2
  4416  00E5A4  EC35  F06F         	call	_Set_NS
  4417                           
  4418                           ;Lab8.c: 1213: Set_NS_LT(1);
  4419  00E5A8  0E01               	movlw	1
  4420  00E5AA  EC57  F06F         	call	_Set_NS_LT
  4421                           
  4422                           ;Lab8.c: 1214: Set_EW(1);
  4423  00E5AE  0E01               	movlw	1
  4424  00E5B0  ECF1  F06E         	call	_Set_EW
  4425                           
  4426                           ;Lab8.c: 1215: Set_EW_LT(1);
  4427  00E5B4  0E01               	movlw	1
  4428  00E5B6  EC13  F06F         	call	_Set_EW_LT
  4429                           
  4430                           ;Lab8.c: 1217: if (PORTAbits.RA1 == 1)
  4431  00E5BA  A280               	btfss	3968,1,c	;volatile
  4432  00E5BC  D005               	goto	l431
  4433                           
  4434                           ;Lab8.c: 1218: {
  4435                           ;Lab8.c: 1219: PED_Control(0, 8);
  4436  00E5BE  0E08               	movlw	8
  4437  00E5C0  6E3C               	movwf	PED_Control@Num_Sec,c
  4438  00E5C2  0E00               	movlw	0
  4439  00E5C4  EC42  F06E         	call	_PED_Control
  4440  00E5C8                     l431:
  4441                           
  4442                           ;Lab8.c: 1220: }
  4443                           ;Lab8.c: 1222: Wait_N_Seconds(7);
  4444  00E5C8  0E07               	movlw	7
  4445  00E5CA  EC13  F06E         	call	_Wait_N_Seconds
  4446                           
  4447                           ;Lab8.c: 1224: Set_NS(3);
  4448  00E5CE  0E03               	movlw	3
  4449  00E5D0  EC35  F06F         	call	_Set_NS
  4450                           
  4451                           ;Lab8.c: 1225: Wait_N_Seconds(3);
  4452  00E5D4  0E03               	movlw	3
  4453  00E5D6  EC13  F06E         	call	_Wait_N_Seconds
  4454                           
  4455                           ;Lab8.c: 1227: Set_NS(1);
  4456  00E5DA  0E01               	movlw	1
  4457  00E5DC  EC35  F06F         	call	_Set_NS
  4458                           
  4459                           ;Lab8.c: 1229: if (PORTAbits.RA4 == 1)
  4460  00E5E0  A880               	btfss	3968,4,c	;volatile
  4461  00E5E2  D010               	goto	l3561
  4462                           
  4463                           ;Lab8.c: 1230: {
  4464                           ;Lab8.c: 1231: Set_EW_LT(2);
  4465  00E5E4  0E02               	movlw	2
  4466  00E5E6  EC13  F06F         	call	_Set_EW_LT
  4467                           
  4468                           ;Lab8.c: 1232: Wait_N_Seconds(8);
  4469  00E5EA  0E08               	movlw	8
  4470  00E5EC  EC13  F06E         	call	_Wait_N_Seconds
  4471                           
  4472                           ;Lab8.c: 1233: Set_EW_LT(3);
  4473  00E5F0  0E03               	movlw	3
  4474  00E5F2  EC13  F06F         	call	_Set_EW_LT
  4475                           
  4476                           ;Lab8.c: 1234: Wait_N_Seconds(3);
  4477  00E5F6  0E03               	movlw	3
  4478  00E5F8  EC13  F06E         	call	_Wait_N_Seconds
  4479                           
  4480                           ;Lab8.c: 1235: Set_EW_LT(1);
  4481  00E5FC  0E01               	movlw	1
  4482  00E5FE  EC13  F06F         	call	_Set_EW_LT
  4483  00E602  D000               	goto	l3561
  4484  00E604                     l3561:
  4485                           
  4486                           ;Lab8.c: 1236: }
  4487                           ;Lab8.c: 1238: Set_EW(2);
  4488  00E604  0E02               	movlw	2
  4489  00E606  ECF1  F06E         	call	_Set_EW
  4490                           
  4491                           ;Lab8.c: 1239: if (PORTAbits.RA3 == 1)
  4492  00E60A  A680               	btfss	3968,3,c	;volatile
  4493  00E60C  D005               	goto	l433
  4494                           
  4495                           ;Lab8.c: 1240: {
  4496                           ;Lab8.c: 1241: PED_Control(1, 9);
  4497  00E60E  0E09               	movlw	9
  4498  00E610  6E3C               	movwf	PED_Control@Num_Sec,c
  4499  00E612  0E01               	movlw	1
  4500  00E614  EC42  F06E         	call	_PED_Control
  4501  00E618                     l433:
  4502                           
  4503                           ;Lab8.c: 1242: }
  4504                           ;Lab8.c: 1244: Wait_N_Seconds(9);
  4505  00E618  0E09               	movlw	9
  4506  00E61A  EC13  F06E         	call	_Wait_N_Seconds
  4507                           
  4508                           ;Lab8.c: 1245: Set_EW(3);
  4509  00E61E  0E03               	movlw	3
  4510  00E620  ECF1  F06E         	call	_Set_EW
  4511                           
  4512                           ;Lab8.c: 1246: Wait_N_Seconds(3);
  4513  00E624  0E03               	movlw	3
  4514  00E626  EC13  F06E         	call	_Wait_N_Seconds
  4515                           
  4516                           ;Lab8.c: 1247: Set_EW(1);
  4517  00E62A  0E01               	movlw	1
  4518  00E62C  ECF1  F06E         	call	_Set_EW
  4519                           
  4520                           ;Lab8.c: 1249: if (PORTAbits.RA2 ==1)
  4521  00E630  A480               	btfss	3968,2,c	;volatile
  4522  00E632  D010               	goto	l435
  4523                           
  4524                           ;Lab8.c: 1250: {
  4525                           ;Lab8.c: 1251: Set_NS_LT(2);
  4526  00E634  0E02               	movlw	2
  4527  00E636  EC57  F06F         	call	_Set_NS_LT
  4528                           
  4529                           ;Lab8.c: 1252: Wait_N_Seconds(8);
  4530  00E63A  0E08               	movlw	8
  4531  00E63C  EC13  F06E         	call	_Wait_N_Seconds
  4532                           
  4533                           ;Lab8.c: 1253: Set_NS_LT(3);
  4534  00E640  0E03               	movlw	3
  4535  00E642  EC57  F06F         	call	_Set_NS_LT
  4536                           
  4537                           ;Lab8.c: 1254: Wait_N_Seconds(3);
  4538  00E646  0E03               	movlw	3
  4539  00E648  EC13  F06E         	call	_Wait_N_Seconds
  4540                           
  4541                           ;Lab8.c: 1255: Set_NS_LT(1);
  4542  00E64C  0E01               	movlw	1
  4543  00E64E  EC57  F06F         	call	_Set_NS_LT
  4544  00E652  D000               	goto	l435
  4545  00E654                     l435:
  4546  00E654  0012               	return		;funcret
  4547  00E656                     __end_of_Day_Mode:
  4548                           	opt stack 0
  4549                           tblptru	equ	0xFF8
  4550                           tblptrh	equ	0xFF7
  4551                           tblptrl	equ	0xFF6
  4552                           tablat	equ	0xFF5
  4553                           intcon2	equ	0xFF1
  4554                           postinc0	equ	0xFEE
  4555                           wreg	equ	0xFE8
  4556                           postdec1	equ	0xFE5
  4557                           fsr1l	equ	0xFE1
  4558                           status	equ	0xFD8
  4559                           
  4560 ;; *************** function _Wait_N_Seconds *****************
  4561 ;; Defined at:
  4562 ;;		line 1348 in file "Lab8.c"
  4563 ;; Parameters:    Size  Location     Type
  4564 ;;  seconds         1    wreg     unsigned char 
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;  seconds         1   60[COMRAM] unsigned char 
  4567 ;;  I               1   61[COMRAM] unsigned char 
  4568 ;; Return value:  Size  Location     Type
  4569 ;;		None               void
  4570 ;; Registers used:
  4571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4572 ;; Tracked objects:
  4573 ;;		On entry : 0/0
  4574 ;;		On exit  : 0/0
  4575 ;;		Unchanged: 0/0
  4576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4578 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4580 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4581 ;;Total ram usage:        2 bytes
  4582 ;; Hardware stack levels used:    1
  4583 ;; Hardware stack levels required when called:    9
  4584 ;; This function calls:
  4585 ;;		_Wait_One_Second
  4586 ;;		_update_LCD_count
  4587 ;; This function is called by:
  4588 ;;		_Day_Mode
  4589 ;;		_Night_Mode
  4590 ;; This function uses a non-reentrant model
  4591 ;;
  4592                           
  4593                           	psect	text18
  4594  00DC26                     __ptext18:
  4595                           	opt stack 0
  4596  00DC26                     _Wait_N_Seconds:
  4597                           	opt stack 20
  4598                           
  4599                           ;incstack = 0
  4600                           ;Wait_N_Seconds@seconds stored from wreg
  4601  00DC26  6E3D               	movwf	Wait_N_Seconds@seconds,c
  4602                           
  4603                           ;Lab8.c: 1350: char I;
  4604                           ;Lab8.c: 1351: for (I = seconds; I> 0; I--)
  4605  00DC28  C03D  F03E         	movff	Wait_N_Seconds@seconds,Wait_N_Seconds@I
  4606  00DC2C                     l3399:
  4607  00DC2C  503E               	movf	Wait_N_Seconds@I,w,c
  4608  00DC2E  B4D8               	btfsc	status,2,c
  4609  00DC30  D00B               	goto	l3409
  4610  00DC32  D001               	goto	l3403
  4611  00DC34  D009               	goto	l3409
  4612  00DC36                     l3403:
  4613                           
  4614                           ;Lab8.c: 1352: {
  4615                           ;Lab8.c: 1353: update_LCD_count(direction, I);
  4616  00DC36  C03E  F03A         	movff	Wait_N_Seconds@I,update_LCD_count@count
  4617  00DC3A  5079               	movf	_direction,w,c
  4618  00DC3C  EC8D  F073         	call	_update_LCD_count
  4619                           
  4620                           ;Lab8.c: 1354: Wait_One_Second();
  4621  00DC40  ECC3  F070         	call	_Wait_One_Second	;wreg free
  4622  00DC44  063E               	decf	Wait_N_Seconds@I,f,c
  4623  00DC46  D7F2               	goto	l3399
  4624  00DC48                     l3409:
  4625                           
  4626                           ;Lab8.c: 1356: }
  4627                           ;Lab8.c: 1357: update_LCD_count(direction, 0);
  4628  00DC48  0E00               	movlw	0
  4629  00DC4A  6E3A               	movwf	update_LCD_count@count,c
  4630  00DC4C  5079               	movf	_direction,w,c
  4631  00DC4E  EC8D  F073         	call	_update_LCD_count
  4632  00DC52  0012               	return		;funcret
  4633  00DC54                     __end_of_Wait_N_Seconds:
  4634                           	opt stack 0
  4635                           tblptru	equ	0xFF8
  4636                           tblptrh	equ	0xFF7
  4637                           tblptrl	equ	0xFF6
  4638                           tablat	equ	0xFF5
  4639                           intcon2	equ	0xFF1
  4640                           postinc0	equ	0xFEE
  4641                           wreg	equ	0xFE8
  4642                           postdec1	equ	0xFE5
  4643                           fsr1l	equ	0xFE1
  4644                           status	equ	0xFD8
  4645                           
  4646 ;; *************** function _update_LCD_count *****************
  4647 ;; Defined at:
  4648 ;;		line 1406 in file "Lab8.c"
  4649 ;; Parameters:    Size  Location     Type
  4650 ;;  direction       1    wreg     unsigned char 
  4651 ;;  count           1   57[COMRAM] unsigned char 
  4652 ;; Auto vars:     Size  Location     Type
  4653 ;;  direction       1   58[COMRAM] unsigned char 
  4654 ;; Return value:  Size  Location     Type
  4655 ;;		None               void
  4656 ;; Registers used:
  4657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4658 ;; Tracked objects:
  4659 ;;		On entry : 0/0
  4660 ;;		On exit  : 0/0
  4661 ;;		Unchanged: 0/0
  4662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4663 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4667 ;;Total ram usage:        2 bytes
  4668 ;; Hardware stack levels used:    1
  4669 ;; Hardware stack levels required when called:    7
  4670 ;; This function calls:
  4671 ;;		___awdiv
  4672 ;;		___awmod
  4673 ;;		_drawtext
  4674 ;; This function is called by:
  4675 ;;		_Wait_N_Seconds
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           	psect	text19
  4680  00E71A                     __ptext19:
  4681                           	opt stack 0
  4682  00E71A                     _update_LCD_count:
  4683                           	opt stack 21
  4684                           
  4685                           ;incstack = 0
  4686                           ;update_LCD_count@direction stored from wreg
  4687  00E71A  6E3B               	movwf	update_LCD_count@direction,c
  4688                           
  4689                           ;Lab8.c: 1408: switch (direction)
  4690  00E71C  D057               	goto	l3269
  4691  00E71E                     l3259:
  4692                           
  4693                           ;Lab8.c: 1411: EW_Count[0] = count/10 + '0';
  4694  00E71E  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4695  00E722  6A02               	clrf	___awdiv@dividend+1,c
  4696  00E724  0E00               	movlw	0
  4697  00E726  6E04               	movwf	___awdiv@divisor+1,c
  4698  00E728  0E0A               	movlw	10
  4699  00E72A  6E03               	movwf	___awdiv@divisor,c
  4700  00E72C  EC8C  F071         	call	___awdiv	;wreg free
  4701  00E730  5001               	movf	?___awdiv,w,c
  4702  00E732  0F30               	addlw	48
  4703  00E734  6E45               	movwf	_EW_Count,c
  4704                           
  4705                           ;Lab8.c: 1412: EW_Count[1] = count%10 + '0';
  4706  00E736  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4707  00E73A  6A02               	clrf	___awmod@dividend+1,c
  4708  00E73C  0E00               	movlw	0
  4709  00E73E  6E04               	movwf	___awmod@divisor+1,c
  4710  00E740  0E0A               	movlw	10
  4711  00E742  6E03               	movwf	___awmod@divisor,c
  4712  00E744  EC82  F070         	call	___awmod	;wreg free
  4713  00E748  5001               	movf	?___awmod,w,c
  4714  00E74A  0F30               	addlw	48
  4715  00E74C  6E46               	movwf	_EW_Count+1,c
  4716                           
  4717                           ;Lab8.c: 1413: drawtext(100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  4718  00E74E  0E1E               	movlw	30
  4719  00E750  6E29               	movwf	drawtext@y,c
  4720  00E752  0E45               	movlw	low _EW_Count
  4721  00E754  6E2A               	movwf	drawtext@_text,c
  4722  00E756  0E00               	movlw	high _EW_Count
  4723  00E758  6E2B               	movwf	drawtext@_text+1,c
  4724  00E75A  0E07               	movlw	7
  4725  00E75C  6E2D               	movwf	drawtext@color+1,c
  4726  00E75E  682C               	setf	drawtext@color,c
  4727  00E760  0E00               	movlw	0
  4728  00E762  6E2F               	movwf	drawtext@bg+1,c
  4729  00E764  0E00               	movlw	0
  4730  00E766  6E2E               	movwf	drawtext@bg,c
  4731  00E768  0E02               	movlw	2
  4732  00E76A  6E30               	movwf	drawtext@size,c
  4733  00E76C  0E64               	movlw	100
  4734  00E76E  ECC0  F074         	call	_drawtext
  4735                           
  4736                           ;Lab8.c: 1414: break;
  4737  00E772  D034               	goto	l474
  4738  00E774                     l3263:
  4739                           
  4740                           ;Lab8.c: 1417: NS_Count[0] = count/10 + '0';
  4741  00E774  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4742  00E778  6A02               	clrf	___awdiv@dividend+1,c
  4743  00E77A  0E00               	movlw	0
  4744  00E77C  6E04               	movwf	___awdiv@divisor+1,c
  4745  00E77E  0E0A               	movlw	10
  4746  00E780  6E03               	movwf	___awdiv@divisor,c
  4747  00E782  EC8C  F071         	call	___awdiv	;wreg free
  4748  00E786  5001               	movf	?___awdiv,w,c
  4749  00E788  0F30               	addlw	48
  4750  00E78A  6E4B               	movwf	_NS_Count,c
  4751                           
  4752                           ;Lab8.c: 1418: NS_Count[1] = count%10 + '0';
  4753  00E78C  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4754  00E790  6A02               	clrf	___awmod@dividend+1,c
  4755  00E792  0E00               	movlw	0
  4756  00E794  6E04               	movwf	___awmod@divisor+1,c
  4757  00E796  0E0A               	movlw	10
  4758  00E798  6E03               	movwf	___awmod@divisor,c
  4759  00E79A  EC82  F070         	call	___awmod	;wreg free
  4760  00E79E  5001               	movf	?___awmod,w,c
  4761  00E7A0  0F30               	addlw	48
  4762  00E7A2  6E4C               	movwf	_NS_Count+1,c
  4763                           
  4764                           ;Lab8.c: 1419: drawtext(100,80 + 10, NS_Count, 0x001F, 0x0000, 2);
  4765  00E7A4  0E5A               	movlw	90
  4766  00E7A6  6E29               	movwf	drawtext@y,c
  4767  00E7A8  0E4B               	movlw	low _NS_Count
  4768  00E7AA  6E2A               	movwf	drawtext@_text,c
  4769  00E7AC  0E00               	movlw	high _NS_Count
  4770  00E7AE  6E2B               	movwf	drawtext@_text+1,c
  4771  00E7B0  0E00               	movlw	0
  4772  00E7B2  6E2D               	movwf	drawtext@color+1,c
  4773  00E7B4  0E1F               	movlw	31
  4774  00E7B6  6E2C               	movwf	drawtext@color,c
  4775  00E7B8  0E00               	movlw	0
  4776  00E7BA  6E2F               	movwf	drawtext@bg+1,c
  4777  00E7BC  0E00               	movlw	0
  4778  00E7BE  6E2E               	movwf	drawtext@bg,c
  4779  00E7C0  0E02               	movlw	2
  4780  00E7C2  6E30               	movwf	drawtext@size,c
  4781  00E7C4  0E64               	movlw	100
  4782  00E7C6  ECC0  F074         	call	_drawtext
  4783                           
  4784                           ;Lab8.c: 1421: }
  4785                           
  4786                           ;Lab8.c: 1420: break;
  4787  00E7CA  D008               	goto	l474
  4788  00E7CC                     l3269:
  4789  00E7CC  503B               	movf	update_LCD_count@direction,w,c
  4790                           
  4791                           ; Switch size 1, requested type "space"
  4792                           ; Number of cases is 2, Range of values is 0 to 2
  4793                           ; switch strategies available:
  4794                           ; Name         Instructions Cycles
  4795                           ; simple_byte            7     4 (average)
  4796                           ;	Chosen strategy is simple_byte
  4797  00E7CE  0A00               	xorlw	0	; case 0
  4798  00E7D0  B4D8               	btfsc	status,2,c
  4799  00E7D2  D7A5               	goto	l3259
  4800  00E7D4  0A02               	xorlw	2	; case 2
  4801  00E7D6  B4D8               	btfsc	status,2,c
  4802  00E7D8  D7CD               	goto	l3263
  4803  00E7DA  D000               	goto	l474
  4804  00E7DC                     l474:
  4805  00E7DC  0012               	return		;funcret
  4806  00E7DE                     __end_of_update_LCD_count:
  4807                           	opt stack 0
  4808                           tblptru	equ	0xFF8
  4809                           tblptrh	equ	0xFF7
  4810                           tblptrl	equ	0xFF6
  4811                           tablat	equ	0xFF5
  4812                           intcon2	equ	0xFF1
  4813                           postinc0	equ	0xFEE
  4814                           wreg	equ	0xFE8
  4815                           postdec1	equ	0xFE5
  4816                           fsr1l	equ	0xFE1
  4817                           status	equ	0xFD8
  4818                           
  4819 ;; *************** function _Wait_One_Second *****************
  4820 ;; Defined at:
  4821 ;;		line 1313 in file "Lab8.c"
  4822 ;; Parameters:    Size  Location     Type
  4823 ;;		None
  4824 ;; Auto vars:     Size  Location     Type
  4825 ;;		None
  4826 ;; Return value:  Size  Location     Type
  4827 ;;		None               void
  4828 ;; Registers used:
  4829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4830 ;; Tracked objects:
  4831 ;;		On entry : 0/0
  4832 ;;		On exit  : 0/0
  4833 ;;		Unchanged: 0/0
  4834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4839 ;;Total ram usage:        0 bytes
  4840 ;; Hardware stack levels used:    1
  4841 ;; Hardware stack levels required when called:    8
  4842 ;; This function calls:
  4843 ;;		_Wait_Half_Second
  4844 ;;		_drawtext
  4845 ;;		_strcpy
  4846 ;;		_update_LCD_misc
  4847 ;; This function is called by:
  4848 ;;		_Wait_N_Seconds
  4849 ;; This function uses a non-reentrant model
  4850 ;;
  4851                           
  4852                           	psect	text20
  4853  00E186                     __ptext20:
  4854                           	opt stack 0
  4855  00E186                     _Wait_One_Second:
  4856                           	opt stack 20
  4857                           
  4858                           ;Lab8.c: 1315: PORTDbits.RD7 = 1;
  4859                           
  4860                           ;incstack = 0
  4861  00E186  8E83               	bsf	3971,7,c	;volatile
  4862                           
  4863                           ;Lab8.c: 1316: strcpy(txt,"*");
  4864  00E188  C06B  F001         	movff	_txt,strcpy@to
  4865  00E18C  C06C  F002         	movff	_txt+1,strcpy@to+1
  4866  00E190  0EFD               	movlw	low STR_5
  4867  00E192  6E03               	movwf	strcpy@from,c
  4868  00E194  0EFF               	movlw	high STR_5
  4869  00E196  6E04               	movwf	strcpy@from+1,c
  4870  00E198  EC5B  F06E         	call	_strcpy	;wreg free
  4871                           
  4872                           ;Lab8.c: 1317: drawtext(120,10,txt,0xFFFF,0x0000,1);
  4873  00E19C  0E0A               	movlw	10
  4874  00E19E  6E29               	movwf	drawtext@y,c
  4875  00E1A0  C06B  F02A         	movff	_txt,drawtext@_text
  4876  00E1A4  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  4877  00E1A8  0EFF               	movlw	255
  4878  00E1AA  6E2D               	movwf	drawtext@color+1,c
  4879  00E1AC  682C               	setf	drawtext@color,c
  4880  00E1AE  0E00               	movlw	0
  4881  00E1B0  6E2F               	movwf	drawtext@bg+1,c
  4882  00E1B2  0E00               	movlw	0
  4883  00E1B4  6E2E               	movwf	drawtext@bg,c
  4884  00E1B6  0E01               	movlw	1
  4885  00E1B8  6E30               	movwf	drawtext@size,c
  4886  00E1BA  0E78               	movlw	120
  4887  00E1BC  ECC0  F074         	call	_drawtext
  4888                           
  4889                           ;Lab8.c: 1318: Wait_Half_Second();
  4890  00E1C0  ECAA  F06D         	call	_Wait_Half_Second	;wreg free
  4891                           
  4892                           ;Lab8.c: 1320: PORTDbits.RD7 = 0;
  4893  00E1C4  9E83               	bcf	3971,7,c	;volatile
  4894                           
  4895                           ;Lab8.c: 1321: strcpy(txt," ");
  4896  00E1C6  C06B  F001         	movff	_txt,strcpy@to
  4897  00E1CA  C06C  F002         	movff	_txt+1,strcpy@to+1
  4898  00E1CE  0EFB               	movlw	low STR_14
  4899  00E1D0  6E03               	movwf	strcpy@from,c
  4900  00E1D2  0EFF               	movlw	high STR_14
  4901  00E1D4  6E04               	movwf	strcpy@from+1,c
  4902  00E1D6  EC5B  F06E         	call	_strcpy	;wreg free
  4903                           
  4904                           ;Lab8.c: 1322: drawtext(120,10,txt,0xFFFF,0x0000,1);
  4905  00E1DA  0E0A               	movlw	10
  4906  00E1DC  6E29               	movwf	drawtext@y,c
  4907  00E1DE  C06B  F02A         	movff	_txt,drawtext@_text
  4908  00E1E2  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  4909  00E1E6  0EFF               	movlw	255
  4910  00E1E8  6E2D               	movwf	drawtext@color+1,c
  4911  00E1EA  682C               	setf	drawtext@color,c
  4912  00E1EC  0E00               	movlw	0
  4913  00E1EE  6E2F               	movwf	drawtext@bg+1,c
  4914  00E1F0  0E00               	movlw	0
  4915  00E1F2  6E2E               	movwf	drawtext@bg,c
  4916  00E1F4  0E01               	movlw	1
  4917  00E1F6  6E30               	movwf	drawtext@size,c
  4918  00E1F8  0E78               	movlw	120
  4919  00E1FA  ECC0  F074         	call	_drawtext
  4920                           
  4921                           ;Lab8.c: 1323: Wait_Half_Second();
  4922  00E1FE  ECAA  F06D         	call	_Wait_Half_Second	;wreg free
  4923                           
  4924                           ;Lab8.c: 1324: update_LCD_misc();
  4925  00E202  ECBF  F078         	call	_update_LCD_misc	;wreg free
  4926  00E206  0012               	return		;funcret
  4927  00E208                     __end_of_Wait_One_Second:
  4928                           	opt stack 0
  4929                           tblptru	equ	0xFF8
  4930                           tblptrh	equ	0xFF7
  4931                           tblptrl	equ	0xFF6
  4932                           tablat	equ	0xFF5
  4933                           intcon2	equ	0xFF1
  4934                           postinc0	equ	0xFEE
  4935                           wreg	equ	0xFE8
  4936                           postdec1	equ	0xFE5
  4937                           fsr1l	equ	0xFE1
  4938                           status	equ	0xFD8
  4939                           
  4940 ;; *************** function _update_LCD_misc *****************
  4941 ;; Defined at:
  4942 ;;		line 1445 in file "Lab8.c"
  4943 ;; Parameters:    Size  Location     Type
  4944 ;;		None
  4945 ;; Auto vars:     Size  Location     Type
  4946 ;;  nStep           2   57[COMRAM] int 
  4947 ;;  ch              1   59[COMRAM] unsigned char 
  4948 ;; Return value:  Size  Location     Type
  4949 ;;		None               void
  4950 ;; Registers used:
  4951 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4952 ;; Tracked objects:
  4953 ;;		On entry : 0/0
  4954 ;;		On exit  : 0/0
  4955 ;;		Unchanged: 0/0
  4956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4958 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4960 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4961 ;;Total ram usage:        3 bytes
  4962 ;; Hardware stack levels used:    1
  4963 ;; Hardware stack levels required when called:    7
  4964 ;; This function calls:
  4965 ;;		___awtoft
  4966 ;;		___ftdiv
  4967 ;;		___ftge
  4968 ;;		___wmul
  4969 ;;		_drawtext
  4970 ;;		_get_full_ADC
  4971 ;; This function is called by:
  4972 ;;		_Wait_One_Second
  4973 ;; This function uses a non-reentrant model
  4974 ;;
  4975                           
  4976                           	psect	text21
  4977  00F17E                     __ptext21:
  4978                           	opt stack 0
  4979  00F17E                     _update_LCD_misc:
  4980                           	opt stack 20
  4981                           
  4982                           ;Lab8.c: 1447: char ch = 0;
  4983                           
  4984                           ;incstack = 0
  4985  00F17E  0E00               	movlw	0
  4986  00F180  6E3C               	movwf	update_LCD_misc@ch,c
  4987                           
  4988                           ;Lab8.c: 1448: ADCON0 = ch*4+1;
  4989  00F182  503C               	movf	update_LCD_misc@ch,w,c
  4990  00F184  0D04               	mullw	4
  4991  00F186  28F3               	incf	prodl,w,c
  4992  00F188  6EC2               	movwf	4034,c	;volatile
  4993                           
  4994                           ;Lab8.c: 1449: int nStep = get_full_ADC();
  4995  00F18A  ECD7  F06D         	call	_get_full_ADC	;wreg free
  4996  00F18E  C001  F03A         	movff	?_get_full_ADC,update_LCD_misc@nStep
  4997  00F192  C002  F03B         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  4998                           
  4999                           ;Lab8.c: 1450: volt = nStep * 5 /1024.0;
  5000  00F196  C03A  F001         	movff	update_LCD_misc@nStep,___wmul@multiplier
  5001  00F19A  C03B  F002         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  5002  00F19E  0E00               	movlw	0
  5003  00F1A0  6E04               	movwf	___wmul@multiplicand+1,c
  5004  00F1A2  0E05               	movlw	5
  5005  00F1A4  6E03               	movwf	___wmul@multiplicand,c
  5006  00F1A6  ECEA  F06D         	call	___wmul	;wreg free
  5007  00F1AA  C001  F009         	movff	?___wmul,___awtoft@c
  5008  00F1AE  C002  F00A         	movff	?___wmul+1,___awtoft@c+1
  5009  00F1B2  EC74  F06E         	call	___awtoft	;wreg free
  5010  00F1B6  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  5011  00F1BA  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  5012  00F1BE  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  5013  00F1C2  0E00               	movlw	0
  5014  00F1C4  6E10               	movwf	___ftdiv@f2,c
  5015  00F1C6  0E80               	movlw	128
  5016  00F1C8  6E11               	movwf	___ftdiv@f2+1,c
  5017  00F1CA  0E44               	movlw	68
  5018  00F1CC  6E12               	movwf	___ftdiv@f2+2,c
  5019  00F1CE  EC2F  F075         	call	___ftdiv	;wreg free
  5020  00F1D2  C00D  F064         	movff	?___ftdiv,_volt
  5021  00F1D6  C00E  F065         	movff	?___ftdiv+1,_volt+1
  5022  00F1DA  C00F  F066         	movff	?___ftdiv+2,_volt+2
  5023                           
  5024                           ;Lab8.c: 1451: SW_MODE = volt < 3.5 ? 1:0;
  5025  00F1DE  C064  F001         	movff	_volt,___ftge@ff1
  5026  00F1E2  C065  F002         	movff	_volt+1,___ftge@ff1+1
  5027  00F1E6  C066  F003         	movff	_volt+2,___ftge@ff1+2
  5028  00F1EA  0E00               	movlw	0
  5029  00F1EC  6E04               	movwf	___ftge@ff2,c
  5030  00F1EE  0E60               	movlw	96
  5031  00F1F0  6E05               	movwf	___ftge@ff2+1,c
  5032  00F1F2  0E40               	movlw	64
  5033  00F1F4  6E06               	movwf	___ftge@ff2+2,c
  5034  00F1F6  ECD7  F071         	call	___ftge	;wreg free
  5035  00F1FA  B0D8               	btfsc	status,0,c
  5036  00F1FC  D002               	goto	u1830
  5037  00F1FE  0E01               	movlw	1
  5038  00F200  D001               	goto	u1840
  5039  00F202                     u1830:
  5040  00F202  0E00               	movlw	0
  5041  00F204                     u1840:
  5042  00F204  6E73               	movwf	_SW_MODE,c
  5043                           
  5044                           ;Lab8.c: 1453: SW_EWPED = PORTAbits.RA3;
  5045  00F206  0E00               	movlw	0
  5046  00F208  B680               	btfsc	3968,3,c	;volatile
  5047  00F20A  0E01               	movlw	1
  5048  00F20C  6E72               	movwf	_SW_EWPED,c
  5049                           
  5050                           ;Lab8.c: 1454: SW_EWLT = PORTAbits.RA4;
  5051  00F20E  0E00               	movlw	0
  5052  00F210  B880               	btfsc	3968,4,c	;volatile
  5053  00F212  0E01               	movlw	1
  5054  00F214  6E71               	movwf	_SW_EWLT,c
  5055                           
  5056                           ;Lab8.c: 1455: SW_NSPED = PORTAbits.RA1;
  5057  00F216  0E00               	movlw	0
  5058  00F218  B280               	btfsc	3968,1,c	;volatile
  5059  00F21A  0E01               	movlw	1
  5060  00F21C  6E75               	movwf	_SW_NSPED,c
  5061                           
  5062                           ;Lab8.c: 1456: SW_NSLT = PORTAbits.RA2;
  5063  00F21E  0E00               	movlw	0
  5064  00F220  B480               	btfsc	3968,2,c	;volatile
  5065  00F222  0E01               	movlw	1
  5066  00F224  6E74               	movwf	_SW_NSLT,c
  5067                           
  5068                           ;Lab8.c: 1458: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1';
  5069  00F226  5072               	movf	_SW_EWPED,w,c
  5070  00F228  A4D8               	btfss	status,2,c
  5071  00F22A  D002               	goto	l2949
  5072  00F22C  0E30               	movlw	48
  5073  00F22E  D001               	goto	L1
  5074  00F230                     l2949:
  5075  00F230  0E31               	movlw	49
  5076  00F232                     L1:
  5077  00F232  6E5C               	movwf	_SW_EWPED_Txt,c
  5078                           
  5079                           ;Lab8.c: 1459: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  5080  00F234  5071               	movf	_SW_EWLT,w,c
  5081  00F236  A4D8               	btfss	status,2,c
  5082  00F238  D002               	goto	l2953
  5083  00F23A  0E30               	movlw	48
  5084  00F23C  D001               	goto	L2
  5085  00F23E                     l2953:
  5086  00F23E  0E31               	movlw	49
  5087  00F240                     L2:
  5088  00F240  6E5A               	movwf	_SW_EWLT_Txt,c
  5089                           
  5090                           ;Lab8.c: 1460: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1';
  5091  00F242  5075               	movf	_SW_NSPED,w,c
  5092  00F244  A4D8               	btfss	status,2,c
  5093  00F246  D002               	goto	l2957
  5094  00F248  0E30               	movlw	48
  5095  00F24A  D001               	goto	L3
  5096  00F24C                     l2957:
  5097  00F24C  0E31               	movlw	49
  5098  00F24E                     L3:
  5099  00F24E  6E62               	movwf	_SW_NSPED_Txt,c
  5100                           
  5101                           ;Lab8.c: 1461: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  5102  00F250  5074               	movf	_SW_NSLT,w,c
  5103  00F252  A4D8               	btfss	status,2,c
  5104  00F254  D002               	goto	l2961
  5105  00F256  0E30               	movlw	48
  5106  00F258  D001               	goto	L4
  5107  00F25A                     l2961:
  5108  00F25A  0E31               	movlw	49
  5109  00F25C                     L4:
  5110  00F25C  6E60               	movwf	_SW_NSLT_Txt,c
  5111  00F25E  D000               	goto	l2963
  5112  00F260                     l2963:
  5113                           
  5114                           ;Lab8.c: 1463: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  5115  00F260  0E0A               	movlw	10
  5116  00F262  6E29               	movwf	drawtext@y,c
  5117  00F264  0E54               	movlw	low _Act_Mode_Txt
  5118  00F266  6E2A               	movwf	drawtext@_text,c
  5119  00F268  0E00               	movlw	high _Act_Mode_Txt
  5120  00F26A  6E2B               	movwf	drawtext@_text+1,c
  5121  00F26C  0EFF               	movlw	255
  5122  00F26E  6E2D               	movwf	drawtext@color+1,c
  5123  00F270  682C               	setf	drawtext@color,c
  5124  00F272  0E00               	movlw	0
  5125  00F274  6E2F               	movwf	drawtext@bg+1,c
  5126  00F276  0E00               	movlw	0
  5127  00F278  6E2E               	movwf	drawtext@bg,c
  5128  00F27A  0E01               	movlw	1
  5129  00F27C  6E30               	movwf	drawtext@size,c
  5130  00F27E  0E23               	movlw	35
  5131  00F280  ECC0  F074         	call	_drawtext
  5132                           
  5133                           ;Lab8.c: 1464: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  5134  00F284  0E95               	movlw	149
  5135  00F286  6E29               	movwf	drawtext@y,c
  5136  00F288  0E5C               	movlw	low _SW_EWPED_Txt
  5137  00F28A  6E2A               	movwf	drawtext@_text,c
  5138  00F28C  0E00               	movlw	high _SW_EWPED_Txt
  5139  00F28E  6E2B               	movwf	drawtext@_text+1,c
  5140  00F290  0EFF               	movlw	255
  5141  00F292  6E2D               	movwf	drawtext@color+1,c
  5142  00F294  682C               	setf	drawtext@color,c
  5143  00F296  0E00               	movlw	0
  5144  00F298  6E2F               	movwf	drawtext@bg+1,c
  5145  00F29A  0E00               	movlw	0
  5146  00F29C  6E2E               	movwf	drawtext@bg,c
  5147  00F29E  0E01               	movlw	1
  5148  00F2A0  6E30               	movwf	drawtext@size,c
  5149  00F2A2  0E06               	movlw	6
  5150  00F2A4  ECC0  F074         	call	_drawtext
  5151                           
  5152                           ;Lab8.c: 1465: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  5153  00F2A8  0E95               	movlw	149
  5154  00F2AA  6E29               	movwf	drawtext@y,c
  5155  00F2AC  0E5A               	movlw	low _SW_EWLT_Txt
  5156  00F2AE  6E2A               	movwf	drawtext@_text,c
  5157  00F2B0  0E00               	movlw	high _SW_EWLT_Txt
  5158  00F2B2  6E2B               	movwf	drawtext@_text+1,c
  5159  00F2B4  0EFF               	movlw	255
  5160  00F2B6  6E2D               	movwf	drawtext@color+1,c
  5161  00F2B8  682C               	setf	drawtext@color,c
  5162  00F2BA  0E00               	movlw	0
  5163  00F2BC  6E2F               	movwf	drawtext@bg+1,c
  5164  00F2BE  0E00               	movlw	0
  5165  00F2C0  6E2E               	movwf	drawtext@bg,c
  5166  00F2C2  0E01               	movlw	1
  5167  00F2C4  6E30               	movwf	drawtext@size,c
  5168  00F2C6  0E20               	movlw	32
  5169  00F2C8  ECC0  F074         	call	_drawtext
  5170                           
  5171                           ;Lab8.c: 1466: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  5172  00F2CC  0E95               	movlw	149
  5173  00F2CE  6E29               	movwf	drawtext@y,c
  5174  00F2D0  0E62               	movlw	low _SW_NSPED_Txt
  5175  00F2D2  6E2A               	movwf	drawtext@_text,c
  5176  00F2D4  0E00               	movlw	high _SW_NSPED_Txt
  5177  00F2D6  6E2B               	movwf	drawtext@_text+1,c
  5178  00F2D8  0EFF               	movlw	255
  5179  00F2DA  6E2D               	movwf	drawtext@color+1,c
  5180  00F2DC  682C               	setf	drawtext@color,c
  5181  00F2DE  0E00               	movlw	0
  5182  00F2E0  6E2F               	movwf	drawtext@bg+1,c
  5183  00F2E2  0E00               	movlw	0
  5184  00F2E4  6E2E               	movwf	drawtext@bg,c
  5185  00F2E6  0E01               	movlw	1
  5186  00F2E8  6E30               	movwf	drawtext@size,c
  5187  00F2EA  0E3A               	movlw	58
  5188  00F2EC  ECC0  F074         	call	_drawtext
  5189                           
  5190                           ;Lab8.c: 1467: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  5191  00F2F0  0E95               	movlw	149
  5192  00F2F2  6E29               	movwf	drawtext@y,c
  5193  00F2F4  0E60               	movlw	low _SW_NSLT_Txt
  5194  00F2F6  6E2A               	movwf	drawtext@_text,c
  5195  00F2F8  0E00               	movlw	high _SW_NSLT_Txt
  5196  00F2FA  6E2B               	movwf	drawtext@_text+1,c
  5197  00F2FC  0EFF               	movlw	255
  5198  00F2FE  6E2D               	movwf	drawtext@color+1,c
  5199  00F300  682C               	setf	drawtext@color,c
  5200  00F302  0E00               	movlw	0
  5201  00F304  6E2F               	movwf	drawtext@bg+1,c
  5202  00F306  0E00               	movlw	0
  5203  00F308  6E2E               	movwf	drawtext@bg,c
  5204  00F30A  0E01               	movlw	1
  5205  00F30C  6E30               	movwf	drawtext@size,c
  5206  00F30E  0E57               	movlw	87
  5207  00F310  ECC0  F074         	call	_drawtext
  5208                           
  5209                           ;Lab8.c: 1469: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  5210  00F314  0E95               	movlw	149
  5211  00F316  6E29               	movwf	drawtext@y,c
  5212  00F318  0E5E               	movlw	low _SW_MODE_Txt
  5213  00F31A  6E2A               	movwf	drawtext@_text,c
  5214  00F31C  0E00               	movlw	high _SW_MODE_Txt
  5215  00F31E  6E2B               	movwf	drawtext@_text+1,c
  5216  00F320  0EFF               	movlw	255
  5217  00F322  6E2D               	movwf	drawtext@color+1,c
  5218  00F324  682C               	setf	drawtext@color,c
  5219  00F326  0E00               	movlw	0
  5220  00F328  6E2F               	movwf	drawtext@bg+1,c
  5221  00F32A  0E00               	movlw	0
  5222  00F32C  6E2E               	movwf	drawtext@bg,c
  5223  00F32E  0E01               	movlw	1
  5224  00F330  6E30               	movwf	drawtext@size,c
  5225  00F332  0E70               	movlw	112
  5226  00F334  ECC0  F074         	call	_drawtext
  5227  00F338  0012               	return		;funcret
  5228  00F33A                     __end_of_update_LCD_misc:
  5229                           	opt stack 0
  5230                           tblptru	equ	0xFF8
  5231                           tblptrh	equ	0xFF7
  5232                           tblptrl	equ	0xFF6
  5233                           tablat	equ	0xFF5
  5234                           prodl	equ	0xFF3
  5235                           intcon2	equ	0xFF1
  5236                           postinc0	equ	0xFEE
  5237                           wreg	equ	0xFE8
  5238                           postdec1	equ	0xFE5
  5239                           fsr1l	equ	0xFE1
  5240                           status	equ	0xFD8
  5241                           
  5242 ;; *************** function _get_full_ADC *****************
  5243 ;; Defined at:
  5244 ;;		line 1113 in file "Lab8.c"
  5245 ;; Parameters:    Size  Location     Type
  5246 ;;		None
  5247 ;; Auto vars:     Size  Location     Type
  5248 ;;  result          2    4[COMRAM] unsigned int 
  5249 ;; Return value:  Size  Location     Type
  5250 ;;                  2    0[COMRAM] unsigned int 
  5251 ;; Registers used:
  5252 ;;		wreg, status,2, status,0
  5253 ;; Tracked objects:
  5254 ;;		On entry : 0/0
  5255 ;;		On exit  : 0/0
  5256 ;;		Unchanged: 0/0
  5257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5258 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5262 ;;Total ram usage:        6 bytes
  5263 ;; Hardware stack levels used:    1
  5264 ;; This function calls:
  5265 ;;		Nothing
  5266 ;; This function is called by:
  5267 ;;		_main
  5268 ;;		_update_LCD_misc
  5269 ;; This function uses a non-reentrant model
  5270 ;;
  5271                           
  5272                           	psect	text22
  5273  00DBAE                     __ptext22:
  5274                           	opt stack 0
  5275  00DBAE                     _get_full_ADC:
  5276                           	opt stack 30
  5277                           
  5278                           ;Lab8.c: 1115: unsigned int result;
  5279                           ;Lab8.c: 1116: ADCON0bits.GO=1;
  5280                           
  5281                           ;incstack = 0
  5282  00DBAE  82C2               	bsf	4034,1,c	;volatile
  5283                           
  5284                           ;Lab8.c: 1117: while(ADCON0bits.DONE==1);
  5285  00DBB0  D000               	goto	l378
  5286  00DBB2                     l378:
  5287  00DBB2  B2C2               	btfsc	4034,1,c	;volatile
  5288  00DBB4  D7FE               	goto	l378
  5289                           
  5290                           ;Lab8.c: 1118: result = (ADRESH * 0x100) + ADRESL;
  5291  00DBB6  50C4               	movf	4036,w,c	;volatile
  5292  00DBB8  6E04               	movwf	(??_get_full_ADC+1)& (0+255),c
  5293  00DBBA  6A03               	clrf	??_get_full_ADC& (0+255),c
  5294  00DBBC  50C3               	movf	4035,w,c	;volatile
  5295  00DBBE  2403               	addwf	??_get_full_ADC,w,c
  5296  00DBC0  6E05               	movwf	get_full_ADC@result,c
  5297  00DBC2  0E00               	movlw	0
  5298  00DBC4  2004               	addwfc	??_get_full_ADC+1,w,c
  5299  00DBC6  6E06               	movwf	get_full_ADC@result+1,c
  5300                           
  5301                           ;Lab8.c: 1120: return result;
  5302  00DBC8  C005  F001         	movff	get_full_ADC@result,?_get_full_ADC
  5303  00DBCC  C006  F002         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  5304  00DBD0  D000               	goto	l381
  5305  00DBD2                     l381:
  5306  00DBD2  0012               	return		;funcret
  5307  00DBD4                     __end_of_get_full_ADC:
  5308                           	opt stack 0
  5309                           tblptru	equ	0xFF8
  5310                           tblptrh	equ	0xFF7
  5311                           tblptrl	equ	0xFF6
  5312                           tablat	equ	0xFF5
  5313                           prodl	equ	0xFF3
  5314                           intcon2	equ	0xFF1
  5315                           postinc0	equ	0xFEE
  5316                           wreg	equ	0xFE8
  5317                           postdec1	equ	0xFE5
  5318                           fsr1l	equ	0xFE1
  5319                           status	equ	0xFD8
  5320                           
  5321 ;; *************** function ___ftge *****************
  5322 ;; Defined at:
  5323 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  5324 ;; Parameters:    Size  Location     Type
  5325 ;;  ff1             3    0[COMRAM] float 
  5326 ;;  ff2             3    3[COMRAM] float 
  5327 ;; Auto vars:     Size  Location     Type
  5328 ;;		None
  5329 ;; Return value:  Size  Location     Type
  5330 ;;		None               void
  5331 ;; Registers used:
  5332 ;;		wreg, status,2, status,0
  5333 ;; Tracked objects:
  5334 ;;		On entry : 0/0
  5335 ;;		On exit  : 0/0
  5336 ;;		Unchanged: 0/0
  5337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5338 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5340 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5341 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5342 ;;Total ram usage:        9 bytes
  5343 ;; Hardware stack levels used:    1
  5344 ;; This function calls:
  5345 ;;		Nothing
  5346 ;; This function is called by:
  5347 ;;		_main
  5348 ;;		_update_LCD_misc
  5349 ;; This function uses a non-reentrant model
  5350 ;;
  5351                           
  5352                           	psect	text23
  5353  00E3AE                     __ptext23:
  5354                           	opt stack 0
  5355  00E3AE                     ___ftge:
  5356                           	opt stack 30
  5357                           
  5358                           ;incstack = 0
  5359  00E3AE  AE03               	btfss	___ftge@ff1+2,7,c
  5360  00E3B0  D017               	goto	l2843
  5361  00E3B2  C001  F007         	movff	___ftge@ff1,??___ftge
  5362  00E3B6  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5363  00E3BA  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5364  00E3BE  1E07               	comf	??___ftge,f,c
  5365  00E3C0  1E08               	comf	??___ftge+1,f,c
  5366  00E3C2  1E09               	comf	??___ftge+2,f,c
  5367  00E3C4  2A07               	incf	??___ftge,f,c
  5368  00E3C6  0E00               	movlw	0
  5369  00E3C8  2208               	addwfc	??___ftge+1,f,c
  5370  00E3CA  2209               	addwfc	??___ftge+2,f,c
  5371  00E3CC  0E00               	movlw	0
  5372  00E3CE  2407               	addwf	??___ftge,w,c
  5373  00E3D0  6E01               	movwf	___ftge@ff1,c
  5374  00E3D2  0E00               	movlw	0
  5375  00E3D4  2008               	addwfc	??___ftge+1,w,c
  5376  00E3D6  6E02               	movwf	___ftge@ff1+1,c
  5377  00E3D8  0E80               	movlw	128
  5378  00E3DA  2009               	addwfc	??___ftge+2,w,c
  5379  00E3DC  6E03               	movwf	___ftge@ff1+2,c
  5380  00E3DE  D000               	goto	l2843
  5381  00E3E0                     l2843:
  5382  00E3E0  AE06               	btfss	___ftge@ff2+2,7,c
  5383  00E3E2  D017               	goto	l2847
  5384  00E3E4  C004  F007         	movff	___ftge@ff2,??___ftge
  5385  00E3E8  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5386  00E3EC  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5387  00E3F0  1E07               	comf	??___ftge,f,c
  5388  00E3F2  1E08               	comf	??___ftge+1,f,c
  5389  00E3F4  1E09               	comf	??___ftge+2,f,c
  5390  00E3F6  2A07               	incf	??___ftge,f,c
  5391  00E3F8  0E00               	movlw	0
  5392  00E3FA  2208               	addwfc	??___ftge+1,f,c
  5393  00E3FC  2209               	addwfc	??___ftge+2,f,c
  5394  00E3FE  0E00               	movlw	0
  5395  00E400  2407               	addwf	??___ftge,w,c
  5396  00E402  6E04               	movwf	___ftge@ff2,c
  5397  00E404  0E00               	movlw	0
  5398  00E406  2008               	addwfc	??___ftge+1,w,c
  5399  00E408  6E05               	movwf	___ftge@ff2+1,c
  5400  00E40A  0E80               	movlw	128
  5401  00E40C  2009               	addwfc	??___ftge+2,w,c
  5402  00E40E  6E06               	movwf	___ftge@ff2+2,c
  5403  00E410  D000               	goto	l2847
  5404  00E412                     l2847:
  5405  00E412  0E00               	movlw	0
  5406  00E414  1A01               	xorwf	___ftge@ff1,f,c
  5407  00E416  0E00               	movlw	0
  5408  00E418  1A02               	xorwf	___ftge@ff1+1,f,c
  5409  00E41A  0E80               	movlw	128
  5410  00E41C  1A03               	xorwf	___ftge@ff1+2,f,c
  5411  00E41E  0E00               	movlw	0
  5412  00E420  1A04               	xorwf	___ftge@ff2,f,c
  5413  00E422  0E00               	movlw	0
  5414  00E424  1A05               	xorwf	___ftge@ff2+1,f,c
  5415  00E426  0E80               	movlw	128
  5416  00E428  1A06               	xorwf	___ftge@ff2+2,f,c
  5417  00E42A  5004               	movf	___ftge@ff2,w,c
  5418  00E42C  5C01               	subwf	___ftge@ff1,w,c
  5419  00E42E  5005               	movf	___ftge@ff2+1,w,c
  5420  00E430  5802               	subwfb	___ftge@ff1+1,w,c
  5421  00E432  5006               	movf	___ftge@ff2+2,w,c
  5422  00E434  5803               	subwfb	___ftge@ff1+2,w,c
  5423  00E436  B0D8               	btfsc	status,0,c
  5424  00E438  D002               	goto	l2853
  5425  00E43A  90D8               	bcf	status,0,c
  5426  00E43C  D002               	goto	l917
  5427  00E43E                     l2853:
  5428  00E43E  80D8               	bsf	status,0,c
  5429  00E440  D000               	goto	l917
  5430  00E442                     l917:
  5431  00E442  0012               	return		;funcret
  5432  00E444                     __end_of___ftge:
  5433                           	opt stack 0
  5434                           tblptru	equ	0xFF8
  5435                           tblptrh	equ	0xFF7
  5436                           tblptrl	equ	0xFF6
  5437                           tablat	equ	0xFF5
  5438                           prodl	equ	0xFF3
  5439                           intcon2	equ	0xFF1
  5440                           postinc0	equ	0xFEE
  5441                           wreg	equ	0xFE8
  5442                           postdec1	equ	0xFE5
  5443                           fsr1l	equ	0xFE1
  5444                           status	equ	0xFD8
  5445                           
  5446 ;; *************** function ___ftdiv *****************
  5447 ;; Defined at:
  5448 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5449 ;; Parameters:    Size  Location     Type
  5450 ;;  f1              3   12[COMRAM] float 
  5451 ;;  f2              3   15[COMRAM] float 
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;  f3              3   22[COMRAM] float 
  5454 ;;  sign            1   26[COMRAM] unsigned char 
  5455 ;;  exp             1   25[COMRAM] unsigned char 
  5456 ;;  cntr            1   21[COMRAM] unsigned char 
  5457 ;; Return value:  Size  Location     Type
  5458 ;;                  3   12[COMRAM] float 
  5459 ;; Registers used:
  5460 ;;		wreg, status,2, status,0, cstack
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5466 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;Total ram usage:       15 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; Hardware stack levels required when called:    1
  5473 ;; This function calls:
  5474 ;;		___ftpack
  5475 ;; This function is called by:
  5476 ;;		_main
  5477 ;;		_update_LCD_misc
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           	psect	text24
  5482  00EA5E                     __ptext24:
  5483                           	opt stack 0
  5484  00EA5E                     ___ftdiv:
  5485                           	opt stack 29
  5486                           
  5487                           ;incstack = 0
  5488  00EA5E  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  5489  00EA62  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5490  00EA64  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5491  00EA66  340E               	rlcf	___ftdiv@f1+1,w,c
  5492  00EA68  3613               	rlcf	??___ftdiv& (0+255),f,c
  5493  00EA6A  E301               	bnc	u1701
  5494  00EA6C  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5495  00EA6E                     u1701:
  5496  00EA6E  5013               	movf	??___ftdiv,w,c
  5497  00EA70  6E1A               	movwf	___ftdiv@exp,c
  5498  00EA72  501A               	movf	___ftdiv@exp,w,c
  5499  00EA74  A4D8               	btfss	status,2,c
  5500  00EA76  D002               	goto	l2787
  5501  00EA78  D00E               	goto	l2789
  5502  00EA7A  D061               	goto	l908
  5503  00EA7C                     l2787:
  5504  00EA7C  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  5505  00EA80  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5506  00EA82  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5507  00EA84  3411               	rlcf	___ftdiv@f2+1,w,c
  5508  00EA86  3613               	rlcf	??___ftdiv& (0+255),f,c
  5509  00EA88  E301               	bnc	u1721
  5510  00EA8A  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5511  00EA8C                     u1721:
  5512  00EA8C  5013               	movf	??___ftdiv,w,c
  5513  00EA8E  6E1B               	movwf	___ftdiv@sign,c
  5514  00EA90  501B               	movf	___ftdiv@sign,w,c
  5515  00EA92  A4D8               	btfss	status,2,c
  5516  00EA94  D007               	goto	l2793
  5517  00EA96                     l2789:
  5518  00EA96  0E00               	movlw	0
  5519  00EA98  6E0D               	movwf	?___ftdiv,c
  5520  00EA9A  0E00               	movlw	0
  5521  00EA9C  6E0E               	movwf	?___ftdiv+1,c
  5522  00EA9E  0E00               	movlw	0
  5523  00EAA0  6E0F               	movwf	?___ftdiv+2,c
  5524  00EAA2  D04D               	goto	l908
  5525  00EAA4                     l2793:
  5526  00EAA4  0E00               	movlw	0
  5527  00EAA6  6E17               	movwf	___ftdiv@f3,c
  5528  00EAA8  0E00               	movlw	0
  5529  00EAAA  6E18               	movwf	___ftdiv@f3+1,c
  5530  00EAAC  0E00               	movlw	0
  5531  00EAAE  6E19               	movwf	___ftdiv@f3+2,c
  5532  00EAB0  501B               	movf	___ftdiv@sign,w,c
  5533  00EAB2  0F89               	addlw	137
  5534  00EAB4  5E1A               	subwf	___ftdiv@exp,f,c
  5535  00EAB6  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  5536  00EABA  5012               	movf	___ftdiv@f2+2,w,c
  5537  00EABC  1A1B               	xorwf	___ftdiv@sign,f,c
  5538  00EABE  0E80               	movlw	128
  5539  00EAC0  161B               	andwf	___ftdiv@sign,f,c
  5540  00EAC2  8E0E               	bsf	___ftdiv@f1+1,7,c
  5541  00EAC4  0EFF               	movlw	255
  5542  00EAC6  160D               	andwf	___ftdiv@f1,f,c
  5543  00EAC8  0EFF               	movlw	255
  5544  00EACA  160E               	andwf	___ftdiv@f1+1,f,c
  5545  00EACC  0E00               	movlw	0
  5546  00EACE  160F               	andwf	___ftdiv@f1+2,f,c
  5547  00EAD0  8E11               	bsf	___ftdiv@f2+1,7,c
  5548  00EAD2  0EFF               	movlw	255
  5549  00EAD4  1610               	andwf	___ftdiv@f2,f,c
  5550  00EAD6  0EFF               	movlw	255
  5551  00EAD8  1611               	andwf	___ftdiv@f2+1,f,c
  5552  00EADA  0E00               	movlw	0
  5553  00EADC  1612               	andwf	___ftdiv@f2+2,f,c
  5554  00EADE  0E18               	movlw	24
  5555  00EAE0  6E16               	movwf	___ftdiv@cntr,c
  5556  00EAE2  D000               	goto	l2813
  5557  00EAE4                     l2813:
  5558  00EAE4  90D8               	bcf	status,0,c
  5559  00EAE6  3617               	rlcf	___ftdiv@f3,f,c
  5560  00EAE8  3618               	rlcf	___ftdiv@f3+1,f,c
  5561  00EAEA  3619               	rlcf	___ftdiv@f3+2,f,c
  5562  00EAEC  5010               	movf	___ftdiv@f2,w,c
  5563  00EAEE  5C0D               	subwf	___ftdiv@f1,w,c
  5564  00EAF0  5011               	movf	___ftdiv@f2+1,w,c
  5565  00EAF2  580E               	subwfb	___ftdiv@f1+1,w,c
  5566  00EAF4  5012               	movf	___ftdiv@f2+2,w,c
  5567  00EAF6  580F               	subwfb	___ftdiv@f1+2,w,c
  5568  00EAF8  A0D8               	btfss	status,0,c
  5569  00EAFA  D007               	goto	l911
  5570  00EAFC  5010               	movf	___ftdiv@f2,w,c
  5571  00EAFE  5E0D               	subwf	___ftdiv@f1,f,c
  5572  00EB00  5011               	movf	___ftdiv@f2+1,w,c
  5573  00EB02  5A0E               	subwfb	___ftdiv@f1+1,f,c
  5574  00EB04  5012               	movf	___ftdiv@f2+2,w,c
  5575  00EB06  5A0F               	subwfb	___ftdiv@f1+2,f,c
  5576  00EB08  8017               	bsf	___ftdiv@f3,0,c
  5577  00EB0A                     l911:
  5578  00EB0A  90D8               	bcf	status,0,c
  5579  00EB0C  360D               	rlcf	___ftdiv@f1,f,c
  5580  00EB0E  360E               	rlcf	___ftdiv@f1+1,f,c
  5581  00EB10  360F               	rlcf	___ftdiv@f1+2,f,c
  5582  00EB12  2E16               	decfsz	___ftdiv@cntr,f,c
  5583  00EB14  D7E7               	goto	l2813
  5584  00EB16  D000               	goto	l2823
  5585  00EB18                     l2823:
  5586  00EB18  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  5587  00EB1C  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5588  00EB20  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5589  00EB24  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  5590  00EB28  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  5591  00EB2C  ECEF  F073         	call	___ftpack	;wreg free
  5592  00EB30  C001  F00D         	movff	?___ftpack,?___ftdiv
  5593  00EB34  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  5594  00EB38  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  5595  00EB3C  D000               	goto	l908
  5596  00EB3E                     l908:
  5597  00EB3E  0012               	return		;funcret
  5598  00EB40                     __end_of___ftdiv:
  5599                           	opt stack 0
  5600                           tblptru	equ	0xFF8
  5601                           tblptrh	equ	0xFF7
  5602                           tblptrl	equ	0xFF6
  5603                           tablat	equ	0xFF5
  5604                           prodl	equ	0xFF3
  5605                           intcon2	equ	0xFF1
  5606                           postinc0	equ	0xFEE
  5607                           wreg	equ	0xFE8
  5608                           postdec1	equ	0xFE5
  5609                           fsr1l	equ	0xFE1
  5610                           status	equ	0xFD8
  5611                           
  5612 ;; *************** function ___awtoft *****************
  5613 ;; Defined at:
  5614 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  5615 ;; Parameters:    Size  Location     Type
  5616 ;;  c               2    8[COMRAM] int 
  5617 ;; Auto vars:     Size  Location     Type
  5618 ;;  sign            1   11[COMRAM] unsigned char 
  5619 ;; Return value:  Size  Location     Type
  5620 ;;                  3    8[COMRAM] float 
  5621 ;; Registers used:
  5622 ;;		wreg, status,2, status,0, cstack
  5623 ;; Tracked objects:
  5624 ;;		On entry : 0/0
  5625 ;;		On exit  : 0/0
  5626 ;;		Unchanged: 0/0
  5627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5628 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5629 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5631 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5632 ;;Total ram usage:        4 bytes
  5633 ;; Hardware stack levels used:    1
  5634 ;; Hardware stack levels required when called:    1
  5635 ;; This function calls:
  5636 ;;		___ftpack
  5637 ;; This function is called by:
  5638 ;;		_main
  5639 ;;		_update_LCD_misc
  5640 ;; This function uses a non-reentrant model
  5641 ;;
  5642                           
  5643                           	psect	text25
  5644  00DCE8                     __ptext25:
  5645                           	opt stack 0
  5646  00DCE8                     ___awtoft:
  5647                           	opt stack 29
  5648                           
  5649                           ;incstack = 0
  5650  00DCE8  0E00               	movlw	0
  5651  00DCEA  6E0C               	movwf	___awtoft@sign,c
  5652  00DCEC  AE0A               	btfss	___awtoft@c+1,7,c
  5653  00DCEE  D007               	goto	l2835
  5654  00DCF0  6C09               	negf	___awtoft@c,c
  5655  00DCF2  1E0A               	comf	___awtoft@c+1,f,c
  5656  00DCF4  B0D8               	btfsc	status,0,c
  5657  00DCF6  2A0A               	incf	___awtoft@c+1,f,c
  5658  00DCF8  0E01               	movlw	1
  5659  00DCFA  6E0C               	movwf	___awtoft@sign,c
  5660  00DCFC  D000               	goto	l2835
  5661  00DCFE                     l2835:
  5662  00DCFE  C009  F001         	movff	___awtoft@c,___ftpack@arg
  5663  00DD02  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  5664  00DD06  6A03               	clrf	___ftpack@arg+2,c
  5665  00DD08  0E8E               	movlw	142
  5666  00DD0A  6E04               	movwf	___ftpack@exp,c
  5667  00DD0C  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  5668  00DD10  ECEF  F073         	call	___ftpack	;wreg free
  5669  00DD14  C001  F009         	movff	?___ftpack,?___awtoft
  5670  00DD18  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  5671  00DD1C  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  5672  00DD20  D000               	goto	l746
  5673  00DD22                     l746:
  5674  00DD22  0012               	return		;funcret
  5675  00DD24                     __end_of___awtoft:
  5676                           	opt stack 0
  5677                           tblptru	equ	0xFF8
  5678                           tblptrh	equ	0xFF7
  5679                           tblptrl	equ	0xFF6
  5680                           tablat	equ	0xFF5
  5681                           prodl	equ	0xFF3
  5682                           intcon2	equ	0xFF1
  5683                           postinc0	equ	0xFEE
  5684                           wreg	equ	0xFE8
  5685                           postdec1	equ	0xFE5
  5686                           fsr1l	equ	0xFE1
  5687                           status	equ	0xFD8
  5688                           
  5689 ;; *************** function ___ftpack *****************
  5690 ;; Defined at:
  5691 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  5692 ;; Parameters:    Size  Location     Type
  5693 ;;  arg             3    0[COMRAM] unsigned um
  5694 ;;  exp             1    3[COMRAM] unsigned char 
  5695 ;;  sign            1    4[COMRAM] unsigned char 
  5696 ;; Auto vars:     Size  Location     Type
  5697 ;;		None
  5698 ;; Return value:  Size  Location     Type
  5699 ;;                  3    0[COMRAM] float 
  5700 ;; Registers used:
  5701 ;;		wreg, status,2, status,0
  5702 ;; Tracked objects:
  5703 ;;		On entry : 0/0
  5704 ;;		On exit  : 0/0
  5705 ;;		Unchanged: 0/0
  5706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5707 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5709 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5710 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5711 ;;Total ram usage:        8 bytes
  5712 ;; Hardware stack levels used:    1
  5713 ;; This function calls:
  5714 ;;		Nothing
  5715 ;; This function is called by:
  5716 ;;		___awtoft
  5717 ;;		___ftdiv
  5718 ;; This function uses a non-reentrant model
  5719 ;;
  5720                           
  5721                           	psect	text26
  5722  00E7DE                     __ptext26:
  5723                           	opt stack 0
  5724  00E7DE                     ___ftpack:
  5725                           	opt stack 29
  5726                           
  5727                           ;incstack = 0
  5728  00E7DE  5004               	movf	___ftpack@exp,w,c
  5729  00E7E0  B4D8               	btfsc	status,2,c
  5730  00E7E2  D005               	goto	l2673
  5731  00E7E4  5001               	movf	___ftpack@arg,w,c
  5732  00E7E6  1002               	iorwf	___ftpack@arg+1,w,c
  5733  00E7E8  1003               	iorwf	___ftpack@arg+2,w,c
  5734  00E7EA  A4D8               	btfss	status,2,c
  5735  00E7EC  D00E               	goto	l2679
  5736  00E7EE                     l2673:
  5737  00E7EE  0E00               	movlw	0
  5738  00E7F0  6E01               	movwf	?___ftpack,c
  5739  00E7F2  0E00               	movlw	0
  5740  00E7F4  6E02               	movwf	?___ftpack+1,c
  5741  00E7F6  0E00               	movlw	0
  5742  00E7F8  6E03               	movwf	?___ftpack+2,c
  5743  00E7FA  D053               	goto	l836
  5744  00E7FC  D006               	goto	l2679
  5745  00E7FE                     l2677:
  5746  00E7FE  2A04               	incf	___ftpack@exp,f,c
  5747  00E800  90D8               	bcf	status,0,c
  5748  00E802  3203               	rrcf	___ftpack@arg+2,f,c
  5749  00E804  3202               	rrcf	___ftpack@arg+1,f,c
  5750  00E806  3201               	rrcf	___ftpack@arg,f,c
  5751  00E808  D000               	goto	l2679
  5752  00E80A                     l2679:
  5753  00E80A  0E00               	movlw	0
  5754  00E80C  1401               	andwf	___ftpack@arg,w,c
  5755  00E80E  6E06               	movwf	??___ftpack& (0+255),c
  5756  00E810  0E00               	movlw	0
  5757  00E812  1402               	andwf	___ftpack@arg+1,w,c
  5758  00E814  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5759  00E816  0EFE               	movlw	254
  5760  00E818  1403               	andwf	___ftpack@arg+2,w,c
  5761  00E81A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5762  00E81C  5006               	movf	??___ftpack,w,c
  5763  00E81E  1007               	iorwf	??___ftpack+1,w,c
  5764  00E820  1008               	iorwf	??___ftpack+2,w,c
  5765  00E822  B4D8               	btfsc	status,2,c
  5766  00E824  D00E               	goto	l2685
  5767  00E826  D7EB               	goto	l2677
  5768  00E828  D00C               	goto	l2685
  5769  00E82A                     l2681:
  5770  00E82A  2A04               	incf	___ftpack@exp,f,c
  5771  00E82C  0E01               	movlw	1
  5772  00E82E  2601               	addwf	___ftpack@arg,f,c
  5773  00E830  0E00               	movlw	0
  5774  00E832  2202               	addwfc	___ftpack@arg+1,f,c
  5775  00E834  0E00               	movlw	0
  5776  00E836  2203               	addwfc	___ftpack@arg+2,f,c
  5777  00E838  90D8               	bcf	status,0,c
  5778  00E83A  3203               	rrcf	___ftpack@arg+2,f,c
  5779  00E83C  3202               	rrcf	___ftpack@arg+1,f,c
  5780  00E83E  3201               	rrcf	___ftpack@arg,f,c
  5781  00E840  D000               	goto	l2685
  5782  00E842                     l2685:
  5783  00E842  0E00               	movlw	0
  5784  00E844  1401               	andwf	___ftpack@arg,w,c
  5785  00E846  6E06               	movwf	??___ftpack& (0+255),c
  5786  00E848  0E00               	movlw	0
  5787  00E84A  1402               	andwf	___ftpack@arg+1,w,c
  5788  00E84C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5789  00E84E  0EFF               	movlw	255
  5790  00E850  1403               	andwf	___ftpack@arg+2,w,c
  5791  00E852  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5792  00E854  5006               	movf	??___ftpack,w,c
  5793  00E856  1007               	iorwf	??___ftpack+1,w,c
  5794  00E858  1008               	iorwf	??___ftpack+2,w,c
  5795  00E85A  B4D8               	btfsc	status,2,c
  5796  00E85C  D008               	goto	l2689
  5797  00E85E  D7E5               	goto	l2681
  5798  00E860  D006               	goto	l2689
  5799  00E862                     l2687:
  5800  00E862  0604               	decf	___ftpack@exp,f,c
  5801  00E864  90D8               	bcf	status,0,c
  5802  00E866  3601               	rlcf	___ftpack@arg,f,c
  5803  00E868  3602               	rlcf	___ftpack@arg+1,f,c
  5804  00E86A  3603               	rlcf	___ftpack@arg+2,f,c
  5805  00E86C  D000               	goto	l2689
  5806  00E86E                     l2689:
  5807  00E86E  BE02               	btfsc	___ftpack@arg+1,7,c
  5808  00E870  D004               	goto	l847
  5809  00E872  0E02               	movlw	2
  5810  00E874  6004               	cpfslt	___ftpack@exp,c
  5811  00E876  D7F5               	goto	l2687
  5812  00E878  D000               	goto	l847
  5813  00E87A                     l847:
  5814  00E87A  B004               	btfsc	___ftpack@exp,0,c
  5815  00E87C  D002               	goto	l2695
  5816  00E87E  9E02               	bcf	___ftpack@arg+1,7,c
  5817  00E880  D000               	goto	l2695
  5818  00E882                     l2695:
  5819  00E882  90D8               	bcf	status,0,c
  5820  00E884  3204               	rrcf	___ftpack@exp,f,c
  5821  00E886  5004               	movf	___ftpack@exp,w,c
  5822  00E888  1203               	iorwf	___ftpack@arg+2,f,c
  5823  00E88A  5005               	movf	___ftpack@sign,w,c
  5824  00E88C  B4D8               	btfsc	status,2,c
  5825  00E88E  D002               	goto	l2701
  5826  00E890  8E03               	bsf	___ftpack@arg+2,7,c
  5827  00E892  D000               	goto	l2701
  5828  00E894                     l2701:
  5829  00E894  C001  F001         	movff	___ftpack@arg,?___ftpack
  5830  00E898  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5831  00E89C  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5832  00E8A0  D000               	goto	l836
  5833  00E8A2                     l836:
  5834  00E8A2  0012               	return		;funcret
  5835  00E8A4                     __end_of___ftpack:
  5836                           	opt stack 0
  5837                           tblptru	equ	0xFF8
  5838                           tblptrh	equ	0xFF7
  5839                           tblptrl	equ	0xFF6
  5840                           tablat	equ	0xFF5
  5841                           prodl	equ	0xFF3
  5842                           intcon2	equ	0xFF1
  5843                           postinc0	equ	0xFEE
  5844                           wreg	equ	0xFE8
  5845                           postdec1	equ	0xFE5
  5846                           fsr1l	equ	0xFE1
  5847                           status	equ	0xFD8
  5848                           
  5849 ;; *************** function _strcpy *****************
  5850 ;; Defined at:
  5851 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  5852 ;; Parameters:    Size  Location     Type
  5853 ;;  to              2    0[COMRAM] PTR unsigned char 
  5854 ;;		 -> NULL(0), buffer(31), 
  5855 ;;  from            2    2[COMRAM] PTR const unsigned char 
  5856 ;;		 -> STR_14(2), STR_13(2), STR_12(21), STR_11(4), 
  5857 ;;		 -> STR_10(4), STR_9(7), STR_8(12), STR_7(7), 
  5858 ;;		 -> STR_6(10), STR_5(2), STR_4(4), STR_3(4), 
  5859 ;;		 -> STR_2(6), STR_1(22), 
  5860 ;; Auto vars:     Size  Location     Type
  5861 ;;  cp              2    4[COMRAM] PTR unsigned char 
  5862 ;;		 -> NULL(0), buffer(31), 
  5863 ;; Return value:  Size  Location     Type
  5864 ;;                  2    0[COMRAM] PTR unsigned char 
  5865 ;; Registers used:
  5866 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5867 ;; Tracked objects:
  5868 ;;		On entry : 0/0
  5869 ;;		On exit  : 0/0
  5870 ;;		Unchanged: 0/0
  5871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5872 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5873 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5875 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5876 ;;Total ram usage:        6 bytes
  5877 ;; Hardware stack levels used:    1
  5878 ;; This function calls:
  5879 ;;		Nothing
  5880 ;; This function is called by:
  5881 ;;		_Initialize_Screen
  5882 ;;		_Wait_One_Second
  5883 ;; This function uses a non-reentrant model
  5884 ;;
  5885                           
  5886                           	psect	text27
  5887  00DCB6                     __ptext27:
  5888                           	opt stack 0
  5889  00DCB6                     _strcpy:
  5890                           	opt stack 27
  5891                           
  5892                           ;incstack = 0
  5893  00DCB6  C001  F005         	movff	strcpy@to,strcpy@cp
  5894  00DCBA  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
  5895  00DCBE  D005               	goto	l2925
  5896  00DCC0                     l2923:
  5897  00DCC0  4A05               	infsnz	strcpy@cp,f,c
  5898  00DCC2  2A06               	incf	strcpy@cp+1,f,c
  5899  00DCC4  4A03               	infsnz	strcpy@from,f,c
  5900  00DCC6  2A04               	incf	strcpy@from+1,f,c
  5901  00DCC8  D000               	goto	l2925
  5902  00DCCA                     l2925:
  5903  00DCCA  C003  FFF6         	movff	strcpy@from,tblptrl
  5904  00DCCE  C004  FFF7         	movff	strcpy@from+1,tblptrh
  5905  00DCD2                     	if	0	;tblptru may be non-zero
  5906  00DCD2                     	endif
  5907  00DCD2                     	if	0	;tblptru may be non-zero
  5908  00DCD2                     	endif
  5909  00DCD2  C005  FFD9         	movff	strcpy@cp,fsr2l
  5910  00DCD6  C006  FFDA         	movff	strcpy@cp+1,fsr2h
  5911  00DCDA  0008               	tblrd		*
  5912  00DCDC  CFF5 FFDF          	movff	tablat,indf2
  5913  00DCE0  50DF               	movf	indf2,w,c
  5914  00DCE2  A4D8               	btfss	status,2,c
  5915  00DCE4  D7ED               	goto	l2923
  5916                           
  5917                           ;	Return value of _strcpy is never used
  5918  00DCE6  0012               	return		;funcret
  5919  00DCE8                     __end_of_strcpy:
  5920                           	opt stack 0
  5921                           tblptru	equ	0xFF8
  5922                           tblptrh	equ	0xFF7
  5923                           tblptrl	equ	0xFF6
  5924                           tablat	equ	0xFF5
  5925                           prodl	equ	0xFF3
  5926                           intcon2	equ	0xFF1
  5927                           postinc0	equ	0xFEE
  5928                           wreg	equ	0xFE8
  5929                           postdec1	equ	0xFE5
  5930                           fsr1l	equ	0xFE1
  5931                           indf2	equ	0xFDF
  5932                           fsr2h	equ	0xFDA
  5933                           fsr2l	equ	0xFD9
  5934                           status	equ	0xFD8
  5935                           
  5936 ;; *************** function _Set_NS_LT *****************
  5937 ;; Defined at:
  5938 ;;		line 1137 in file "Lab8.c"
  5939 ;; Parameters:    Size  Location     Type
  5940 ;;  color           1    wreg     unsigned char 
  5941 ;; Auto vars:     Size  Location     Type
  5942 ;;  color           1   53[COMRAM] unsigned char 
  5943 ;; Return value:  Size  Location     Type
  5944 ;;		None               void
  5945 ;; Registers used:
  5946 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5947 ;; Tracked objects:
  5948 ;;		On entry : 0/0
  5949 ;;		On exit  : 0/0
  5950 ;;		Unchanged: 0/0
  5951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5953 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5955 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5956 ;;Total ram usage:        1 bytes
  5957 ;; Hardware stack levels used:    1
  5958 ;; Hardware stack levels required when called:    7
  5959 ;; This function calls:
  5960 ;;		_update_LCD_color
  5961 ;; This function is called by:
  5962 ;;		_Day_Mode
  5963 ;;		_Night_Mode
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           	psect	text28
  5968  00DEAE                     __ptext28:
  5969                           	opt stack 0
  5970  00DEAE                     _Set_NS_LT:
  5971                           	opt stack 22
  5972                           
  5973                           ;incstack = 0
  5974                           ;Set_NS_LT@color stored from wreg
  5975  00DEAE  6E36               	movwf	Set_NS_LT@color,c
  5976                           
  5977                           ;Lab8.c: 1139: direction = 3;
  5978  00DEB0  0E03               	movlw	3
  5979  00DEB2  6E79               	movwf	_direction,c
  5980                           
  5981                           ;Lab8.c: 1140: update_LCD_color(direction, color);
  5982  00DEB4  C036  F033         	movff	Set_NS_LT@color,update_LCD_color@color
  5983  00DEB8  5079               	movf	_direction,w,c
  5984  00DEBA  EC9D  F079         	call	_update_LCD_color
  5985                           
  5986                           ;Lab8.c: 1142: switch (color)
  5987  00DEBE  D00A               	goto	l3361
  5988  00DEC0                     l394:
  5989  00DEC0  9A81               	bcf	3969,5,c	;volatile
  5990  00DEC2  D001               	goto	L5
  5991  00DEC4                     l396:
  5992  00DEC4  8A81               	bsf	3969,5,c	;volatile
  5993  00DEC6                     L5:
  5994  00DEC6  9082               	bcf	3970,0,c	;volatile
  5995  00DEC8  D013               	goto	l399
  5996  00DECA                     l397:
  5997  00DECA  9A81               	bcf	3969,5,c	;volatile
  5998  00DECC  D001               	goto	L6
  5999  00DECE                     l398:
  6000  00DECE  8A81               	bsf	3969,5,c	;volatile
  6001  00DED0                     L6:
  6002  00DED0  8082               	bsf	3970,0,c	;volatile
  6003                           
  6004                           ;Lab8.c: 1148: }
  6005  00DED2  D00E               	goto	l399
  6006  00DED4                     l3361:
  6007  00DED4  5036               	movf	Set_NS_LT@color,w,c
  6008                           
  6009                           ; Switch size 1, requested type "space"
  6010                           ; Number of cases is 4, Range of values is 0 to 3
  6011                           ; switch strategies available:
  6012                           ; Name         Instructions Cycles
  6013                           ; simple_byte           13     7 (average)
  6014                           ;	Chosen strategy is simple_byte
  6015  00DED6  0A00               	xorlw	0	; case 0
  6016  00DED8  B4D8               	btfsc	status,2,c
  6017  00DEDA  D7F2               	goto	l394
  6018  00DEDC  0A01               	xorlw	1	; case 1
  6019  00DEDE  B4D8               	btfsc	status,2,c
  6020  00DEE0  D7F1               	goto	l396
  6021  00DEE2  0A03               	xorlw	3	; case 2
  6022  00DEE4  B4D8               	btfsc	status,2,c
  6023  00DEE6  D7F1               	goto	l397
  6024  00DEE8  0A01               	xorlw	1	; case 3
  6025  00DEEA  B4D8               	btfsc	status,2,c
  6026  00DEEC  D7F0               	goto	l398
  6027  00DEEE  D000               	goto	l399
  6028  00DEF0                     l399:
  6029  00DEF0  0012               	return		;funcret
  6030  00DEF2                     __end_of_Set_NS_LT:
  6031                           	opt stack 0
  6032                           tblptru	equ	0xFF8
  6033                           tblptrh	equ	0xFF7
  6034                           tblptrl	equ	0xFF6
  6035                           tablat	equ	0xFF5
  6036                           prodl	equ	0xFF3
  6037                           intcon2	equ	0xFF1
  6038                           postinc0	equ	0xFEE
  6039                           wreg	equ	0xFE8
  6040                           postdec1	equ	0xFE5
  6041                           fsr1l	equ	0xFE1
  6042                           indf2	equ	0xFDF
  6043                           fsr2h	equ	0xFDA
  6044                           fsr2l	equ	0xFD9
  6045                           status	equ	0xFD8
  6046                           
  6047 ;; *************** function _Set_NS *****************
  6048 ;; Defined at:
  6049 ;;		line 1123 in file "Lab8.c"
  6050 ;; Parameters:    Size  Location     Type
  6051 ;;  color           1    wreg     unsigned char 
  6052 ;; Auto vars:     Size  Location     Type
  6053 ;;  color           1   53[COMRAM] unsigned char 
  6054 ;; Return value:  Size  Location     Type
  6055 ;;		None               void
  6056 ;; Registers used:
  6057 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6058 ;; Tracked objects:
  6059 ;;		On entry : 0/0
  6060 ;;		On exit  : 0/0
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6064 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6066 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6067 ;;Total ram usage:        1 bytes
  6068 ;; Hardware stack levels used:    1
  6069 ;; Hardware stack levels required when called:    7
  6070 ;; This function calls:
  6071 ;;		_update_LCD_color
  6072 ;; This function is called by:
  6073 ;;		_Day_Mode
  6074 ;;		_Night_Mode
  6075 ;; This function uses a non-reentrant model
  6076 ;;
  6077                           
  6078                           	psect	text29
  6079  00DE6A                     __ptext29:
  6080                           	opt stack 0
  6081  00DE6A                     _Set_NS:
  6082                           	opt stack 22
  6083                           
  6084                           ;incstack = 0
  6085                           ;Set_NS@color stored from wreg
  6086  00DE6A  6E36               	movwf	Set_NS@color,c
  6087                           
  6088                           ;Lab8.c: 1125: direction = 2;
  6089  00DE6C  0E02               	movlw	2
  6090  00DE6E  6E79               	movwf	_direction,c
  6091                           
  6092                           ;Lab8.c: 1126: update_LCD_color(direction, color);
  6093  00DE70  C036  F033         	movff	Set_NS@color,update_LCD_color@color
  6094  00DE74  5079               	movf	_direction,w,c
  6095  00DE76  EC9D  F079         	call	_update_LCD_color
  6096                           
  6097                           ;Lab8.c: 1128: switch (color)
  6098  00DE7A  D00A               	goto	l3353
  6099  00DE7C                     l385:
  6100  00DE7C  9A80               	bcf	3968,5,c	;volatile
  6101  00DE7E  D001               	goto	L7
  6102  00DE80                     l387:
  6103  00DE80  8A80               	bsf	3968,5,c	;volatile
  6104  00DE82                     L7:
  6105  00DE82  9881               	bcf	3969,4,c	;volatile
  6106  00DE84  D013               	goto	l390
  6107  00DE86                     l388:
  6108  00DE86  9A80               	bcf	3968,5,c	;volatile
  6109  00DE88  D001               	goto	L8
  6110  00DE8A                     l389:
  6111  00DE8A  8A80               	bsf	3968,5,c	;volatile
  6112  00DE8C                     L8:
  6113  00DE8C  8881               	bsf	3969,4,c	;volatile
  6114                           
  6115                           ;Lab8.c: 1134: }
  6116  00DE8E  D00E               	goto	l390
  6117  00DE90                     l3353:
  6118  00DE90  5036               	movf	Set_NS@color,w,c
  6119                           
  6120                           ; Switch size 1, requested type "space"
  6121                           ; Number of cases is 4, Range of values is 0 to 3
  6122                           ; switch strategies available:
  6123                           ; Name         Instructions Cycles
  6124                           ; simple_byte           13     7 (average)
  6125                           ;	Chosen strategy is simple_byte
  6126  00DE92  0A00               	xorlw	0	; case 0
  6127  00DE94  B4D8               	btfsc	status,2,c
  6128  00DE96  D7F2               	goto	l385
  6129  00DE98  0A01               	xorlw	1	; case 1
  6130  00DE9A  B4D8               	btfsc	status,2,c
  6131  00DE9C  D7F1               	goto	l387
  6132  00DE9E  0A03               	xorlw	3	; case 2
  6133  00DEA0  B4D8               	btfsc	status,2,c
  6134  00DEA2  D7F1               	goto	l388
  6135  00DEA4  0A01               	xorlw	1	; case 3
  6136  00DEA6  B4D8               	btfsc	status,2,c
  6137  00DEA8  D7F0               	goto	l389
  6138  00DEAA  D000               	goto	l390
  6139  00DEAC                     l390:
  6140  00DEAC  0012               	return		;funcret
  6141  00DEAE                     __end_of_Set_NS:
  6142                           	opt stack 0
  6143                           tblptru	equ	0xFF8
  6144                           tblptrh	equ	0xFF7
  6145                           tblptrl	equ	0xFF6
  6146                           tablat	equ	0xFF5
  6147                           prodl	equ	0xFF3
  6148                           intcon2	equ	0xFF1
  6149                           postinc0	equ	0xFEE
  6150                           wreg	equ	0xFE8
  6151                           postdec1	equ	0xFE5
  6152                           fsr1l	equ	0xFE1
  6153                           indf2	equ	0xFDF
  6154                           fsr2h	equ	0xFDA
  6155                           fsr2l	equ	0xFD9
  6156                           status	equ	0xFD8
  6157                           
  6158 ;; *************** function _Set_EW_LT *****************
  6159 ;; Defined at:
  6160 ;;		line 1166 in file "Lab8.c"
  6161 ;; Parameters:    Size  Location     Type
  6162 ;;  color           1    wreg     unsigned char 
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;  color           1   53[COMRAM] unsigned char 
  6165 ;; Return value:  Size  Location     Type
  6166 ;;		None               void
  6167 ;; Registers used:
  6168 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6169 ;; Tracked objects:
  6170 ;;		On entry : 0/0
  6171 ;;		On exit  : 0/0
  6172 ;;		Unchanged: 0/0
  6173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6175 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6177 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6178 ;;Total ram usage:        1 bytes
  6179 ;; Hardware stack levels used:    1
  6180 ;; Hardware stack levels required when called:    7
  6181 ;; This function calls:
  6182 ;;		_update_LCD_color
  6183 ;; This function is called by:
  6184 ;;		_Day_Mode
  6185 ;;		_Night_Mode
  6186 ;; This function uses a non-reentrant model
  6187 ;;
  6188                           
  6189                           	psect	text30
  6190  00DE26                     __ptext30:
  6191                           	opt stack 0
  6192  00DE26                     _Set_EW_LT:
  6193                           	opt stack 22
  6194                           
  6195                           ;incstack = 0
  6196                           ;Set_EW_LT@color stored from wreg
  6197  00DE26  6E36               	movwf	Set_EW_LT@color,c
  6198                           
  6199                           ;Lab8.c: 1168: direction = 1;
  6200  00DE28  0E01               	movlw	1
  6201  00DE2A  6E79               	movwf	_direction,c
  6202                           
  6203                           ;Lab8.c: 1169: update_LCD_color(direction, color);
  6204  00DE2C  C036  F033         	movff	Set_EW_LT@color,update_LCD_color@color
  6205  00DE30  5079               	movf	_direction,w,c
  6206  00DE32  EC9D  F079         	call	_update_LCD_color
  6207                           
  6208                           ;Lab8.c: 1171: switch (color)
  6209  00DE36  D00A               	goto	l3377
  6210  00DE38                     l412:
  6211  00DE38  9084               	bcf	3972,0,c	;volatile
  6212  00DE3A  D001               	goto	L9
  6213  00DE3C                     l414:
  6214  00DE3C  8084               	bsf	3972,0,c	;volatile
  6215  00DE3E                     L9:
  6216  00DE3E  9484               	bcf	3972,2,c	;volatile
  6217  00DE40  D013               	goto	l417
  6218  00DE42                     l415:
  6219  00DE42  9084               	bcf	3972,0,c	;volatile
  6220  00DE44  D001               	goto	L10
  6221  00DE46                     l416:
  6222  00DE46  8084               	bsf	3972,0,c	;volatile
  6223  00DE48                     L10:
  6224  00DE48  8484               	bsf	3972,2,c	;volatile
  6225                           
  6226                           ;Lab8.c: 1177: }
  6227  00DE4A  D00E               	goto	l417
  6228  00DE4C                     l3377:
  6229  00DE4C  5036               	movf	Set_EW_LT@color,w,c
  6230                           
  6231                           ; Switch size 1, requested type "space"
  6232                           ; Number of cases is 4, Range of values is 0 to 3
  6233                           ; switch strategies available:
  6234                           ; Name         Instructions Cycles
  6235                           ; simple_byte           13     7 (average)
  6236                           ;	Chosen strategy is simple_byte
  6237  00DE4E  0A00               	xorlw	0	; case 0
  6238  00DE50  B4D8               	btfsc	status,2,c
  6239  00DE52  D7F2               	goto	l412
  6240  00DE54  0A01               	xorlw	1	; case 1
  6241  00DE56  B4D8               	btfsc	status,2,c
  6242  00DE58  D7F1               	goto	l414
  6243  00DE5A  0A03               	xorlw	3	; case 2
  6244  00DE5C  B4D8               	btfsc	status,2,c
  6245  00DE5E  D7F1               	goto	l415
  6246  00DE60  0A01               	xorlw	1	; case 3
  6247  00DE62  B4D8               	btfsc	status,2,c
  6248  00DE64  D7F0               	goto	l416
  6249  00DE66  D000               	goto	l417
  6250  00DE68                     l417:
  6251  00DE68  0012               	return		;funcret
  6252  00DE6A                     __end_of_Set_EW_LT:
  6253                           	opt stack 0
  6254                           tblptru	equ	0xFF8
  6255                           tblptrh	equ	0xFF7
  6256                           tblptrl	equ	0xFF6
  6257                           tablat	equ	0xFF5
  6258                           prodl	equ	0xFF3
  6259                           intcon2	equ	0xFF1
  6260                           postinc0	equ	0xFEE
  6261                           wreg	equ	0xFE8
  6262                           postdec1	equ	0xFE5
  6263                           fsr1l	equ	0xFE1
  6264                           indf2	equ	0xFDF
  6265                           fsr2h	equ	0xFDA
  6266                           fsr2l	equ	0xFD9
  6267                           status	equ	0xFD8
  6268                           
  6269 ;; *************** function _Set_EW *****************
  6270 ;; Defined at:
  6271 ;;		line 1151 in file "Lab8.c"
  6272 ;; Parameters:    Size  Location     Type
  6273 ;;  color           1    wreg     unsigned char 
  6274 ;; Auto vars:     Size  Location     Type
  6275 ;;  color           1   53[COMRAM] unsigned char 
  6276 ;; Return value:  Size  Location     Type
  6277 ;;		None               void
  6278 ;; Registers used:
  6279 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6280 ;; Tracked objects:
  6281 ;;		On entry : 0/0
  6282 ;;		On exit  : 0/0
  6283 ;;		Unchanged: 0/0
  6284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6286 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6288 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6289 ;;Total ram usage:        1 bytes
  6290 ;; Hardware stack levels used:    1
  6291 ;; Hardware stack levels required when called:    7
  6292 ;; This function calls:
  6293 ;;		_update_LCD_color
  6294 ;; This function is called by:
  6295 ;;		_Day_Mode
  6296 ;;		_Night_Mode
  6297 ;; This function uses a non-reentrant model
  6298 ;;
  6299                           
  6300                           	psect	text31
  6301  00DDE2                     __ptext31:
  6302                           	opt stack 0
  6303  00DDE2                     _Set_EW:
  6304                           	opt stack 22
  6305                           
  6306                           ;incstack = 0
  6307                           ;Set_EW@color stored from wreg
  6308  00DDE2  6E36               	movwf	Set_EW@color,c
  6309                           
  6310                           ;Lab8.c: 1153: direction = 0;
  6311  00DDE4  0E00               	movlw	0
  6312  00DDE6  6E79               	movwf	_direction,c
  6313                           
  6314                           ;Lab8.c: 1154: update_LCD_color(direction, color);
  6315  00DDE8  C036  F033         	movff	Set_EW@color,update_LCD_color@color
  6316  00DDEC  5079               	movf	_direction,w,c
  6317  00DDEE  EC9D  F079         	call	_update_LCD_color
  6318                           
  6319                           ;Lab8.c: 1156: switch (color)
  6320  00DDF2  D00A               	goto	l3369
  6321  00DDF4                     l403:
  6322  00DDF4  9A83               	bcf	3971,5,c	;volatile
  6323  00DDF6  D001               	goto	L11
  6324  00DDF8                     l405:
  6325  00DDF8  8A83               	bsf	3971,5,c	;volatile
  6326  00DDFA                     L11:
  6327  00DDFA  9C83               	bcf	3971,6,c	;volatile
  6328  00DDFC  D013               	goto	l408
  6329  00DDFE                     l406:
  6330  00DDFE  9A83               	bcf	3971,5,c	;volatile
  6331  00DE00  D001               	goto	L12
  6332  00DE02                     l407:
  6333  00DE02  8A83               	bsf	3971,5,c	;volatile
  6334  00DE04                     L12:
  6335  00DE04  8C83               	bsf	3971,6,c	;volatile
  6336                           
  6337                           ;Lab8.c: 1162: }
  6338  00DE06  D00E               	goto	l408
  6339  00DE08                     l3369:
  6340  00DE08  5036               	movf	Set_EW@color,w,c
  6341                           
  6342                           ; Switch size 1, requested type "space"
  6343                           ; Number of cases is 4, Range of values is 0 to 3
  6344                           ; switch strategies available:
  6345                           ; Name         Instructions Cycles
  6346                           ; simple_byte           13     7 (average)
  6347                           ;	Chosen strategy is simple_byte
  6348  00DE0A  0A00               	xorlw	0	; case 0
  6349  00DE0C  B4D8               	btfsc	status,2,c
  6350  00DE0E  D7F2               	goto	l403
  6351  00DE10  0A01               	xorlw	1	; case 1
  6352  00DE12  B4D8               	btfsc	status,2,c
  6353  00DE14  D7F1               	goto	l405
  6354  00DE16  0A03               	xorlw	3	; case 2
  6355  00DE18  B4D8               	btfsc	status,2,c
  6356  00DE1A  D7F1               	goto	l406
  6357  00DE1C  0A01               	xorlw	1	; case 3
  6358  00DE1E  B4D8               	btfsc	status,2,c
  6359  00DE20  D7F0               	goto	l407
  6360  00DE22  D000               	goto	l408
  6361  00DE24                     l408:
  6362  00DE24  0012               	return		;funcret
  6363  00DE26                     __end_of_Set_EW:
  6364                           	opt stack 0
  6365                           tblptru	equ	0xFF8
  6366                           tblptrh	equ	0xFF7
  6367                           tblptrl	equ	0xFF6
  6368                           tablat	equ	0xFF5
  6369                           prodl	equ	0xFF3
  6370                           intcon2	equ	0xFF1
  6371                           postinc0	equ	0xFEE
  6372                           wreg	equ	0xFE8
  6373                           postdec1	equ	0xFE5
  6374                           fsr1l	equ	0xFE1
  6375                           indf2	equ	0xFDF
  6376                           fsr2h	equ	0xFDA
  6377                           fsr2l	equ	0xFD9
  6378                           status	equ	0xFD8
  6379                           
  6380 ;; *************** function _update_LCD_color *****************
  6381 ;; Defined at:
  6382 ;;		line 1360 in file "Lab8.c"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;  direction       1    wreg     unsigned char 
  6385 ;;  color           1   50[COMRAM] unsigned char 
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;  direction       1   51[COMRAM] unsigned char 
  6388 ;;  Circle_Y        1   52[COMRAM] unsigned char 
  6389 ;; Return value:  Size  Location     Type
  6390 ;;		None               void
  6391 ;; Registers used:
  6392 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6393 ;; Tracked objects:
  6394 ;;		On entry : 0/0
  6395 ;;		On exit  : 0/0
  6396 ;;		Unchanged: 0/0
  6397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6398 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6399 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6401 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6402 ;;Total ram usage:        3 bytes
  6403 ;; Hardware stack levels used:    1
  6404 ;; Hardware stack levels required when called:    6
  6405 ;; This function calls:
  6406 ;;		_drawCircle
  6407 ;;		_fillCircle
  6408 ;; This function is called by:
  6409 ;;		_Set_NS
  6410 ;;		_Set_NS_LT
  6411 ;;		_Set_EW
  6412 ;;		_Set_EW_LT
  6413 ;; This function uses a non-reentrant model
  6414 ;;
  6415                           
  6416                           	psect	text32
  6417  00F33A                     __ptext32:
  6418                           	opt stack 0
  6419  00F33A                     _update_LCD_color:
  6420                           	opt stack 22
  6421                           
  6422                           ;incstack = 0
  6423                           ;update_LCD_color@direction stored from wreg
  6424  00F33A  6E34               	movwf	update_LCD_color@direction,c
  6425                           
  6426                           ;Lab8.c: 1362: char Circle_Y;
  6427                           ;Lab8.c: 1363: Circle_Y = 20 + 15 + direction * 30;
  6428  00F33C  5034               	movf	update_LCD_color@direction,w,c
  6429  00F33E  0D1E               	mullw	30
  6430  00F340  50F3               	movf	prodl,w,c
  6431  00F342  0F23               	addlw	35
  6432  00F344  6E35               	movwf	update_LCD_color@Circle_Y,c
  6433                           
  6434                           ;Lab8.c: 1365: if (color == 0)
  6435  00F346  5033               	movf	update_LCD_color@color,w,c
  6436  00F348  A4D8               	btfss	status,2,c
  6437  00F34A  D067               	goto	l3215
  6438                           
  6439                           ;Lab8.c: 1366: {
  6440                           ;Lab8.c: 1367: fillCircle(40, Circle_Y, 7, 0x0000);
  6441  00F34C  0E00               	movlw	0
  6442  00F34E  6E2C               	movwf	fillCircle@x0+1,c
  6443  00F350  0E28               	movlw	40
  6444  00F352  6E2B               	movwf	fillCircle@x0,c
  6445  00F354  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6446  00F358  6A2E               	clrf	fillCircle@y0+1,c
  6447  00F35A  0E00               	movlw	0
  6448  00F35C  6E30               	movwf	fillCircle@r+1,c
  6449  00F35E  0E07               	movlw	7
  6450  00F360  6E2F               	movwf	fillCircle@r,c
  6451  00F362  0E00               	movlw	0
  6452  00F364  6E32               	movwf	fillCircle@color+1,c
  6453  00F366  0E00               	movlw	0
  6454  00F368  6E31               	movwf	fillCircle@color,c
  6455  00F36A  ECC5  F06F         	call	_fillCircle	;wreg free
  6456                           
  6457                           ;Lab8.c: 1368: fillCircle(60, Circle_Y, 7, 0x0000);
  6458  00F36E  0E00               	movlw	0
  6459  00F370  6E2C               	movwf	fillCircle@x0+1,c
  6460  00F372  0E3C               	movlw	60
  6461  00F374  6E2B               	movwf	fillCircle@x0,c
  6462  00F376  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6463  00F37A  6A2E               	clrf	fillCircle@y0+1,c
  6464  00F37C  0E00               	movlw	0
  6465  00F37E  6E30               	movwf	fillCircle@r+1,c
  6466  00F380  0E07               	movlw	7
  6467  00F382  6E2F               	movwf	fillCircle@r,c
  6468  00F384  0E00               	movlw	0
  6469  00F386  6E32               	movwf	fillCircle@color+1,c
  6470  00F388  0E00               	movlw	0
  6471  00F38A  6E31               	movwf	fillCircle@color,c
  6472  00F38C  ECC5  F06F         	call	_fillCircle	;wreg free
  6473                           
  6474                           ;Lab8.c: 1369: fillCircle(80, Circle_Y, 7, 0x0000);
  6475  00F390  0E00               	movlw	0
  6476  00F392  6E2C               	movwf	fillCircle@x0+1,c
  6477  00F394  0E50               	movlw	80
  6478  00F396  6E2B               	movwf	fillCircle@x0,c
  6479  00F398  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6480  00F39C  6A2E               	clrf	fillCircle@y0+1,c
  6481  00F39E  0E00               	movlw	0
  6482  00F3A0  6E30               	movwf	fillCircle@r+1,c
  6483  00F3A2  0E07               	movlw	7
  6484  00F3A4  6E2F               	movwf	fillCircle@r,c
  6485  00F3A6  0E00               	movlw	0
  6486  00F3A8  6E32               	movwf	fillCircle@color+1,c
  6487  00F3AA  0E00               	movlw	0
  6488  00F3AC  6E31               	movwf	fillCircle@color,c
  6489  00F3AE  ECC5  F06F         	call	_fillCircle	;wreg free
  6490                           
  6491                           ;Lab8.c: 1370: drawCircle(40, Circle_Y, 7, 0xF800);
  6492  00F3B2  0E00               	movlw	0
  6493  00F3B4  6E0D               	movwf	drawCircle@x0+1,c
  6494  00F3B6  0E28               	movlw	40
  6495  00F3B8  6E0C               	movwf	drawCircle@x0,c
  6496  00F3BA  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6497  00F3BE  6A0F               	clrf	drawCircle@y0+1,c
  6498  00F3C0  0E00               	movlw	0
  6499  00F3C2  6E11               	movwf	drawCircle@r+1,c
  6500  00F3C4  0E07               	movlw	7
  6501  00F3C6  6E10               	movwf	drawCircle@r,c
  6502  00F3C8  0EF8               	movlw	248
  6503  00F3CA  6E13               	movwf	drawCircle@color+1,c
  6504  00F3CC  0E00               	movlw	0
  6505  00F3CE  6E12               	movwf	drawCircle@color,c
  6506  00F3D0  ECE8  F077         	call	_drawCircle	;wreg free
  6507                           
  6508                           ;Lab8.c: 1371: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6509  00F3D4  0E00               	movlw	0
  6510  00F3D6  6E0D               	movwf	drawCircle@x0+1,c
  6511  00F3D8  0E3C               	movlw	60
  6512  00F3DA  6E0C               	movwf	drawCircle@x0,c
  6513  00F3DC  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6514  00F3E0  6A0F               	clrf	drawCircle@y0+1,c
  6515  00F3E2  0E00               	movlw	0
  6516  00F3E4  6E11               	movwf	drawCircle@r+1,c
  6517  00F3E6  0E07               	movlw	7
  6518  00F3E8  6E10               	movwf	drawCircle@r,c
  6519  00F3EA  0EFF               	movlw	255
  6520  00F3EC  6E13               	movwf	drawCircle@color+1,c
  6521  00F3EE  0EE0               	movlw	224
  6522  00F3F0  6E12               	movwf	drawCircle@color,c
  6523  00F3F2  ECE8  F077         	call	_drawCircle	;wreg free
  6524                           
  6525                           ;Lab8.c: 1372: drawCircle(80, Circle_Y, 7, 0x07E0);
  6526  00F3F6  0E00               	movlw	0
  6527  00F3F8  6E0D               	movwf	drawCircle@x0+1,c
  6528  00F3FA  0E50               	movlw	80
  6529  00F3FC  6E0C               	movwf	drawCircle@x0,c
  6530  00F3FE  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6531  00F402  6A0F               	clrf	drawCircle@y0+1,c
  6532  00F404  0E00               	movlw	0
  6533  00F406  6E11               	movwf	drawCircle@r+1,c
  6534  00F408  0E07               	movlw	7
  6535  00F40A  6E10               	movwf	drawCircle@r,c
  6536  00F40C  0E07               	movlw	7
  6537  00F40E  6E13               	movwf	drawCircle@color+1,c
  6538  00F410  0EE0               	movlw	224
  6539  00F412  6E12               	movwf	drawCircle@color,c
  6540  00F414  ECE8  F077         	call	_drawCircle	;wreg free
  6541  00F418  D000               	goto	l3215
  6542  00F41A                     l3215:
  6543                           
  6544                           ;Lab8.c: 1373: }
  6545                           ;Lab8.c: 1375: if (color == 1)
  6546  00F41A  0433               	decf	update_LCD_color@color,w,c
  6547  00F41C  A4D8               	btfss	status,2,c
  6548  00F41E  D067               	goto	l3219
  6549                           
  6550                           ;Lab8.c: 1376: {
  6551                           ;Lab8.c: 1377: fillCircle(40, Circle_Y, 7, 0xF800);
  6552  00F420  0E00               	movlw	0
  6553  00F422  6E2C               	movwf	fillCircle@x0+1,c
  6554  00F424  0E28               	movlw	40
  6555  00F426  6E2B               	movwf	fillCircle@x0,c
  6556  00F428  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6557  00F42C  6A2E               	clrf	fillCircle@y0+1,c
  6558  00F42E  0E00               	movlw	0
  6559  00F430  6E30               	movwf	fillCircle@r+1,c
  6560  00F432  0E07               	movlw	7
  6561  00F434  6E2F               	movwf	fillCircle@r,c
  6562  00F436  0EF8               	movlw	248
  6563  00F438  6E32               	movwf	fillCircle@color+1,c
  6564  00F43A  0E00               	movlw	0
  6565  00F43C  6E31               	movwf	fillCircle@color,c
  6566  00F43E  ECC5  F06F         	call	_fillCircle	;wreg free
  6567                           
  6568                           ;Lab8.c: 1378: fillCircle(60, Circle_Y, 7, 0x0000);
  6569  00F442  0E00               	movlw	0
  6570  00F444  6E2C               	movwf	fillCircle@x0+1,c
  6571  00F446  0E3C               	movlw	60
  6572  00F448  6E2B               	movwf	fillCircle@x0,c
  6573  00F44A  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6574  00F44E  6A2E               	clrf	fillCircle@y0+1,c
  6575  00F450  0E00               	movlw	0
  6576  00F452  6E30               	movwf	fillCircle@r+1,c
  6577  00F454  0E07               	movlw	7
  6578  00F456  6E2F               	movwf	fillCircle@r,c
  6579  00F458  0E00               	movlw	0
  6580  00F45A  6E32               	movwf	fillCircle@color+1,c
  6581  00F45C  0E00               	movlw	0
  6582  00F45E  6E31               	movwf	fillCircle@color,c
  6583  00F460  ECC5  F06F         	call	_fillCircle	;wreg free
  6584                           
  6585                           ;Lab8.c: 1379: fillCircle(80, Circle_Y, 7, 0x0000);
  6586  00F464  0E00               	movlw	0
  6587  00F466  6E2C               	movwf	fillCircle@x0+1,c
  6588  00F468  0E50               	movlw	80
  6589  00F46A  6E2B               	movwf	fillCircle@x0,c
  6590  00F46C  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6591  00F470  6A2E               	clrf	fillCircle@y0+1,c
  6592  00F472  0E00               	movlw	0
  6593  00F474  6E30               	movwf	fillCircle@r+1,c
  6594  00F476  0E07               	movlw	7
  6595  00F478  6E2F               	movwf	fillCircle@r,c
  6596  00F47A  0E00               	movlw	0
  6597  00F47C  6E32               	movwf	fillCircle@color+1,c
  6598  00F47E  0E00               	movlw	0
  6599  00F480  6E31               	movwf	fillCircle@color,c
  6600  00F482  ECC5  F06F         	call	_fillCircle	;wreg free
  6601                           
  6602                           ;Lab8.c: 1380: drawCircle(40, Circle_Y, 7, 0xF800);
  6603  00F486  0E00               	movlw	0
  6604  00F488  6E0D               	movwf	drawCircle@x0+1,c
  6605  00F48A  0E28               	movlw	40
  6606  00F48C  6E0C               	movwf	drawCircle@x0,c
  6607  00F48E  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6608  00F492  6A0F               	clrf	drawCircle@y0+1,c
  6609  00F494  0E00               	movlw	0
  6610  00F496  6E11               	movwf	drawCircle@r+1,c
  6611  00F498  0E07               	movlw	7
  6612  00F49A  6E10               	movwf	drawCircle@r,c
  6613  00F49C  0EF8               	movlw	248
  6614  00F49E  6E13               	movwf	drawCircle@color+1,c
  6615  00F4A0  0E00               	movlw	0
  6616  00F4A2  6E12               	movwf	drawCircle@color,c
  6617  00F4A4  ECE8  F077         	call	_drawCircle	;wreg free
  6618                           
  6619                           ;Lab8.c: 1381: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6620  00F4A8  0E00               	movlw	0
  6621  00F4AA  6E0D               	movwf	drawCircle@x0+1,c
  6622  00F4AC  0E3C               	movlw	60
  6623  00F4AE  6E0C               	movwf	drawCircle@x0,c
  6624  00F4B0  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6625  00F4B4  6A0F               	clrf	drawCircle@y0+1,c
  6626  00F4B6  0E00               	movlw	0
  6627  00F4B8  6E11               	movwf	drawCircle@r+1,c
  6628  00F4BA  0E07               	movlw	7
  6629  00F4BC  6E10               	movwf	drawCircle@r,c
  6630  00F4BE  0EFF               	movlw	255
  6631  00F4C0  6E13               	movwf	drawCircle@color+1,c
  6632  00F4C2  0EE0               	movlw	224
  6633  00F4C4  6E12               	movwf	drawCircle@color,c
  6634  00F4C6  ECE8  F077         	call	_drawCircle	;wreg free
  6635                           
  6636                           ;Lab8.c: 1382: drawCircle(80, Circle_Y, 7, 0x07E0);
  6637  00F4CA  0E00               	movlw	0
  6638  00F4CC  6E0D               	movwf	drawCircle@x0+1,c
  6639  00F4CE  0E50               	movlw	80
  6640  00F4D0  6E0C               	movwf	drawCircle@x0,c
  6641  00F4D2  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6642  00F4D6  6A0F               	clrf	drawCircle@y0+1,c
  6643  00F4D8  0E00               	movlw	0
  6644  00F4DA  6E11               	movwf	drawCircle@r+1,c
  6645  00F4DC  0E07               	movlw	7
  6646  00F4DE  6E10               	movwf	drawCircle@r,c
  6647  00F4E0  0E07               	movlw	7
  6648  00F4E2  6E13               	movwf	drawCircle@color+1,c
  6649  00F4E4  0EE0               	movlw	224
  6650  00F4E6  6E12               	movwf	drawCircle@color,c
  6651  00F4E8  ECE8  F077         	call	_drawCircle	;wreg free
  6652  00F4EC  D000               	goto	l3219
  6653  00F4EE                     l3219:
  6654                           
  6655                           ;Lab8.c: 1383: }
  6656                           ;Lab8.c: 1385: if (color == 3)
  6657  00F4EE  0E03               	movlw	3
  6658  00F4F0  1833               	xorwf	update_LCD_color@color,w,c
  6659  00F4F2  A4D8               	btfss	status,2,c
  6660  00F4F4  D067               	goto	l3223
  6661                           
  6662                           ;Lab8.c: 1386: {
  6663                           ;Lab8.c: 1387: fillCircle(40, Circle_Y, 7, 0x0000);
  6664  00F4F6  0E00               	movlw	0
  6665  00F4F8  6E2C               	movwf	fillCircle@x0+1,c
  6666  00F4FA  0E28               	movlw	40
  6667  00F4FC  6E2B               	movwf	fillCircle@x0,c
  6668  00F4FE  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6669  00F502  6A2E               	clrf	fillCircle@y0+1,c
  6670  00F504  0E00               	movlw	0
  6671  00F506  6E30               	movwf	fillCircle@r+1,c
  6672  00F508  0E07               	movlw	7
  6673  00F50A  6E2F               	movwf	fillCircle@r,c
  6674  00F50C  0E00               	movlw	0
  6675  00F50E  6E32               	movwf	fillCircle@color+1,c
  6676  00F510  0E00               	movlw	0
  6677  00F512  6E31               	movwf	fillCircle@color,c
  6678  00F514  ECC5  F06F         	call	_fillCircle	;wreg free
  6679                           
  6680                           ;Lab8.c: 1388: fillCircle(60, Circle_Y, 7, 0xFFE0);
  6681  00F518  0E00               	movlw	0
  6682  00F51A  6E2C               	movwf	fillCircle@x0+1,c
  6683  00F51C  0E3C               	movlw	60
  6684  00F51E  6E2B               	movwf	fillCircle@x0,c
  6685  00F520  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6686  00F524  6A2E               	clrf	fillCircle@y0+1,c
  6687  00F526  0E00               	movlw	0
  6688  00F528  6E30               	movwf	fillCircle@r+1,c
  6689  00F52A  0E07               	movlw	7
  6690  00F52C  6E2F               	movwf	fillCircle@r,c
  6691  00F52E  0EFF               	movlw	255
  6692  00F530  6E32               	movwf	fillCircle@color+1,c
  6693  00F532  0EE0               	movlw	224
  6694  00F534  6E31               	movwf	fillCircle@color,c
  6695  00F536  ECC5  F06F         	call	_fillCircle	;wreg free
  6696                           
  6697                           ;Lab8.c: 1389: fillCircle(80, Circle_Y, 7, 0x0000);
  6698  00F53A  0E00               	movlw	0
  6699  00F53C  6E2C               	movwf	fillCircle@x0+1,c
  6700  00F53E  0E50               	movlw	80
  6701  00F540  6E2B               	movwf	fillCircle@x0,c
  6702  00F542  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6703  00F546  6A2E               	clrf	fillCircle@y0+1,c
  6704  00F548  0E00               	movlw	0
  6705  00F54A  6E30               	movwf	fillCircle@r+1,c
  6706  00F54C  0E07               	movlw	7
  6707  00F54E  6E2F               	movwf	fillCircle@r,c
  6708  00F550  0E00               	movlw	0
  6709  00F552  6E32               	movwf	fillCircle@color+1,c
  6710  00F554  0E00               	movlw	0
  6711  00F556  6E31               	movwf	fillCircle@color,c
  6712  00F558  ECC5  F06F         	call	_fillCircle	;wreg free
  6713                           
  6714                           ;Lab8.c: 1390: drawCircle(40, Circle_Y, 7, 0xF800);
  6715  00F55C  0E00               	movlw	0
  6716  00F55E  6E0D               	movwf	drawCircle@x0+1,c
  6717  00F560  0E28               	movlw	40
  6718  00F562  6E0C               	movwf	drawCircle@x0,c
  6719  00F564  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6720  00F568  6A0F               	clrf	drawCircle@y0+1,c
  6721  00F56A  0E00               	movlw	0
  6722  00F56C  6E11               	movwf	drawCircle@r+1,c
  6723  00F56E  0E07               	movlw	7
  6724  00F570  6E10               	movwf	drawCircle@r,c
  6725  00F572  0EF8               	movlw	248
  6726  00F574  6E13               	movwf	drawCircle@color+1,c
  6727  00F576  0E00               	movlw	0
  6728  00F578  6E12               	movwf	drawCircle@color,c
  6729  00F57A  ECE8  F077         	call	_drawCircle	;wreg free
  6730                           
  6731                           ;Lab8.c: 1391: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6732  00F57E  0E00               	movlw	0
  6733  00F580  6E0D               	movwf	drawCircle@x0+1,c
  6734  00F582  0E3C               	movlw	60
  6735  00F584  6E0C               	movwf	drawCircle@x0,c
  6736  00F586  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6737  00F58A  6A0F               	clrf	drawCircle@y0+1,c
  6738  00F58C  0E00               	movlw	0
  6739  00F58E  6E11               	movwf	drawCircle@r+1,c
  6740  00F590  0E07               	movlw	7
  6741  00F592  6E10               	movwf	drawCircle@r,c
  6742  00F594  0EFF               	movlw	255
  6743  00F596  6E13               	movwf	drawCircle@color+1,c
  6744  00F598  0EE0               	movlw	224
  6745  00F59A  6E12               	movwf	drawCircle@color,c
  6746  00F59C  ECE8  F077         	call	_drawCircle	;wreg free
  6747                           
  6748                           ;Lab8.c: 1392: drawCircle(80, Circle_Y, 7, 0x07E0);
  6749  00F5A0  0E00               	movlw	0
  6750  00F5A2  6E0D               	movwf	drawCircle@x0+1,c
  6751  00F5A4  0E50               	movlw	80
  6752  00F5A6  6E0C               	movwf	drawCircle@x0,c
  6753  00F5A8  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6754  00F5AC  6A0F               	clrf	drawCircle@y0+1,c
  6755  00F5AE  0E00               	movlw	0
  6756  00F5B0  6E11               	movwf	drawCircle@r+1,c
  6757  00F5B2  0E07               	movlw	7
  6758  00F5B4  6E10               	movwf	drawCircle@r,c
  6759  00F5B6  0E07               	movlw	7
  6760  00F5B8  6E13               	movwf	drawCircle@color+1,c
  6761  00F5BA  0EE0               	movlw	224
  6762  00F5BC  6E12               	movwf	drawCircle@color,c
  6763  00F5BE  ECE8  F077         	call	_drawCircle	;wreg free
  6764  00F5C2  D000               	goto	l3223
  6765  00F5C4                     l3223:
  6766                           
  6767                           ;Lab8.c: 1393: }
  6768                           ;Lab8.c: 1395: if (color == 2)
  6769  00F5C4  0E02               	movlw	2
  6770  00F5C6  1833               	xorwf	update_LCD_color@color,w,c
  6771  00F5C8  A4D8               	btfss	status,2,c
  6772  00F5CA  D067               	goto	l467
  6773                           
  6774                           ;Lab8.c: 1396: {
  6775                           ;Lab8.c: 1397: fillCircle(40, Circle_Y, 7, 0x0000);
  6776  00F5CC  0E00               	movlw	0
  6777  00F5CE  6E2C               	movwf	fillCircle@x0+1,c
  6778  00F5D0  0E28               	movlw	40
  6779  00F5D2  6E2B               	movwf	fillCircle@x0,c
  6780  00F5D4  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6781  00F5D8  6A2E               	clrf	fillCircle@y0+1,c
  6782  00F5DA  0E00               	movlw	0
  6783  00F5DC  6E30               	movwf	fillCircle@r+1,c
  6784  00F5DE  0E07               	movlw	7
  6785  00F5E0  6E2F               	movwf	fillCircle@r,c
  6786  00F5E2  0E00               	movlw	0
  6787  00F5E4  6E32               	movwf	fillCircle@color+1,c
  6788  00F5E6  0E00               	movlw	0
  6789  00F5E8  6E31               	movwf	fillCircle@color,c
  6790  00F5EA  ECC5  F06F         	call	_fillCircle	;wreg free
  6791                           
  6792                           ;Lab8.c: 1398: fillCircle(60, Circle_Y, 7, 0x0000);
  6793  00F5EE  0E00               	movlw	0
  6794  00F5F0  6E2C               	movwf	fillCircle@x0+1,c
  6795  00F5F2  0E3C               	movlw	60
  6796  00F5F4  6E2B               	movwf	fillCircle@x0,c
  6797  00F5F6  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6798  00F5FA  6A2E               	clrf	fillCircle@y0+1,c
  6799  00F5FC  0E00               	movlw	0
  6800  00F5FE  6E30               	movwf	fillCircle@r+1,c
  6801  00F600  0E07               	movlw	7
  6802  00F602  6E2F               	movwf	fillCircle@r,c
  6803  00F604  0E00               	movlw	0
  6804  00F606  6E32               	movwf	fillCircle@color+1,c
  6805  00F608  0E00               	movlw	0
  6806  00F60A  6E31               	movwf	fillCircle@color,c
  6807  00F60C  ECC5  F06F         	call	_fillCircle	;wreg free
  6808                           
  6809                           ;Lab8.c: 1399: fillCircle(80, Circle_Y, 7, 0x07E0);
  6810  00F610  0E00               	movlw	0
  6811  00F612  6E2C               	movwf	fillCircle@x0+1,c
  6812  00F614  0E50               	movlw	80
  6813  00F616  6E2B               	movwf	fillCircle@x0,c
  6814  00F618  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6815  00F61C  6A2E               	clrf	fillCircle@y0+1,c
  6816  00F61E  0E00               	movlw	0
  6817  00F620  6E30               	movwf	fillCircle@r+1,c
  6818  00F622  0E07               	movlw	7
  6819  00F624  6E2F               	movwf	fillCircle@r,c
  6820  00F626  0E07               	movlw	7
  6821  00F628  6E32               	movwf	fillCircle@color+1,c
  6822  00F62A  0EE0               	movlw	224
  6823  00F62C  6E31               	movwf	fillCircle@color,c
  6824  00F62E  ECC5  F06F         	call	_fillCircle	;wreg free
  6825                           
  6826                           ;Lab8.c: 1400: drawCircle(40, Circle_Y, 7, 0xF800);
  6827  00F632  0E00               	movlw	0
  6828  00F634  6E0D               	movwf	drawCircle@x0+1,c
  6829  00F636  0E28               	movlw	40
  6830  00F638  6E0C               	movwf	drawCircle@x0,c
  6831  00F63A  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6832  00F63E  6A0F               	clrf	drawCircle@y0+1,c
  6833  00F640  0E00               	movlw	0
  6834  00F642  6E11               	movwf	drawCircle@r+1,c
  6835  00F644  0E07               	movlw	7
  6836  00F646  6E10               	movwf	drawCircle@r,c
  6837  00F648  0EF8               	movlw	248
  6838  00F64A  6E13               	movwf	drawCircle@color+1,c
  6839  00F64C  0E00               	movlw	0
  6840  00F64E  6E12               	movwf	drawCircle@color,c
  6841  00F650  ECE8  F077         	call	_drawCircle	;wreg free
  6842                           
  6843                           ;Lab8.c: 1401: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6844  00F654  0E00               	movlw	0
  6845  00F656  6E0D               	movwf	drawCircle@x0+1,c
  6846  00F658  0E3C               	movlw	60
  6847  00F65A  6E0C               	movwf	drawCircle@x0,c
  6848  00F65C  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6849  00F660  6A0F               	clrf	drawCircle@y0+1,c
  6850  00F662  0E00               	movlw	0
  6851  00F664  6E11               	movwf	drawCircle@r+1,c
  6852  00F666  0E07               	movlw	7
  6853  00F668  6E10               	movwf	drawCircle@r,c
  6854  00F66A  0EFF               	movlw	255
  6855  00F66C  6E13               	movwf	drawCircle@color+1,c
  6856  00F66E  0EE0               	movlw	224
  6857  00F670  6E12               	movwf	drawCircle@color,c
  6858  00F672  ECE8  F077         	call	_drawCircle	;wreg free
  6859                           
  6860                           ;Lab8.c: 1402: drawCircle(80, Circle_Y, 7, 0x07E0);
  6861  00F676  0E00               	movlw	0
  6862  00F678  6E0D               	movwf	drawCircle@x0+1,c
  6863  00F67A  0E50               	movlw	80
  6864  00F67C  6E0C               	movwf	drawCircle@x0,c
  6865  00F67E  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6866  00F682  6A0F               	clrf	drawCircle@y0+1,c
  6867  00F684  0E00               	movlw	0
  6868  00F686  6E11               	movwf	drawCircle@r+1,c
  6869  00F688  0E07               	movlw	7
  6870  00F68A  6E10               	movwf	drawCircle@r,c
  6871  00F68C  0E07               	movlw	7
  6872  00F68E  6E13               	movwf	drawCircle@color+1,c
  6873  00F690  0EE0               	movlw	224
  6874  00F692  6E12               	movwf	drawCircle@color,c
  6875  00F694  ECE8  F077         	call	_drawCircle	;wreg free
  6876  00F698  D000               	goto	l467
  6877  00F69A                     l467:
  6878  00F69A  0012               	return		;funcret
  6879  00F69C                     __end_of_update_LCD_color:
  6880                           	opt stack 0
  6881                           tblptru	equ	0xFF8
  6882                           tblptrh	equ	0xFF7
  6883                           tblptrl	equ	0xFF6
  6884                           tablat	equ	0xFF5
  6885                           prodl	equ	0xFF3
  6886                           intcon2	equ	0xFF1
  6887                           postinc0	equ	0xFEE
  6888                           wreg	equ	0xFE8
  6889                           postdec1	equ	0xFE5
  6890                           fsr1l	equ	0xFE1
  6891                           indf2	equ	0xFDF
  6892                           fsr2h	equ	0xFDA
  6893                           fsr2l	equ	0xFD9
  6894                           status	equ	0xFD8
  6895                           
  6896 ;; *************** function _fillCircle *****************
  6897 ;; Defined at:
  6898 ;;		line 740 in file "Lab8.c"
  6899 ;; Parameters:    Size  Location     Type
  6900 ;;  x0              2   42[COMRAM] int 
  6901 ;;  y0              2   44[COMRAM] int 
  6902 ;;  r               2   46[COMRAM] int 
  6903 ;;  color           2   48[COMRAM] unsigned int 
  6904 ;; Auto vars:     Size  Location     Type
  6905 ;;		None
  6906 ;; Return value:  Size  Location     Type
  6907 ;;		None               void
  6908 ;; Registers used:
  6909 ;;		wreg, status,2, status,0, cstack
  6910 ;; Tracked objects:
  6911 ;;		On entry : 0/0
  6912 ;;		On exit  : 0/0
  6913 ;;		Unchanged: 0/0
  6914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6915 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6918 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6919 ;;Total ram usage:        8 bytes
  6920 ;; Hardware stack levels used:    1
  6921 ;; Hardware stack levels required when called:    5
  6922 ;; This function calls:
  6923 ;;		_drawFastVLine
  6924 ;;		_fillCircleHelper
  6925 ;; This function is called by:
  6926 ;;		_Initialize_Screen
  6927 ;;		_update_LCD_color
  6928 ;; This function uses a non-reentrant model
  6929 ;;
  6930                           
  6931                           	psect	text33
  6932  00DF8A                     __ptext33:
  6933                           	opt stack 0
  6934  00DF8A                     _fillCircle:
  6935                           	opt stack 22
  6936                           
  6937                           ;Lab8.c: 742: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  6938                           
  6939                           ;incstack = 0
  6940  00DF8A  502F               	movf	fillCircle@r,w,c
  6941  00DF8C  0800               	sublw	0
  6942  00DF8E  242D               	addwf	fillCircle@y0,w,c
  6943  00DF90  6E08               	movwf	drawFastVLine@y,c
  6944  00DF92  80D8               	bsf	status,0,c
  6945  00DF94  342F               	rlcf	fillCircle@r,w,c
  6946  00DF96  6E09               	movwf	drawFastVLine@h,c
  6947  00DF98  C031  F00A         	movff	fillCircle@color,drawFastVLine@color
  6948  00DF9C  C032  F00B         	movff	fillCircle@color+1,drawFastVLine@color+1
  6949  00DFA0  502B               	movf	fillCircle@x0,w,c
  6950  00DFA2  EC04  F071         	call	_drawFastVLine
  6951                           
  6952                           ;Lab8.c: 743: fillCircleHelper(x0, y0, r, 3, 0, color);
  6953  00DFA6  C02B  F013         	movff	fillCircle@x0,fillCircleHelper@x0
  6954  00DFAA  C02C  F014         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  6955  00DFAE  C02D  F015         	movff	fillCircle@y0,fillCircleHelper@y0
  6956  00DFB2  C02E  F016         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  6957  00DFB6  C02F  F017         	movff	fillCircle@r,fillCircleHelper@r
  6958  00DFBA  C030  F018         	movff	fillCircle@r+1,fillCircleHelper@r+1
  6959  00DFBE  0E00               	movlw	0
  6960  00DFC0  6E1A               	movwf	fillCircleHelper@cornername+1,c
  6961  00DFC2  0E03               	movlw	3
  6962  00DFC4  6E19               	movwf	fillCircleHelper@cornername,c
  6963  00DFC6  0E00               	movlw	0
  6964  00DFC8  6E1C               	movwf	fillCircleHelper@delta+1,c
  6965  00DFCA  0E00               	movlw	0
  6966  00DFCC  6E1B               	movwf	fillCircleHelper@delta,c
  6967  00DFCE  C031  F01D         	movff	fillCircle@color,fillCircleHelper@color
  6968  00DFD2  C032  F01E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  6969  00DFD6  ECA1  F076         	call	_fillCircleHelper	;wreg free
  6970  00DFDA  0012               	return		;funcret
  6971  00DFDC                     __end_of_fillCircle:
  6972                           	opt stack 0
  6973                           tblptru	equ	0xFF8
  6974                           tblptrh	equ	0xFF7
  6975                           tblptrl	equ	0xFF6
  6976                           tablat	equ	0xFF5
  6977                           prodl	equ	0xFF3
  6978                           intcon2	equ	0xFF1
  6979                           postinc0	equ	0xFEE
  6980                           wreg	equ	0xFE8
  6981                           postdec1	equ	0xFE5
  6982                           fsr1l	equ	0xFE1
  6983                           indf2	equ	0xFDF
  6984                           fsr2h	equ	0xFDA
  6985                           fsr2l	equ	0xFD9
  6986                           status	equ	0xFD8
  6987                           
  6988 ;; *************** function _fillCircleHelper *****************
  6989 ;; Defined at:
  6990 ;;		line 715 in file "Lab8.c"
  6991 ;; Parameters:    Size  Location     Type
  6992 ;;  x0              2   18[COMRAM] int 
  6993 ;;  y0              2   20[COMRAM] int 
  6994 ;;  r               2   22[COMRAM] int 
  6995 ;;  cornername      2   24[COMRAM] unsigned int 
  6996 ;;  delta           2   26[COMRAM] int 
  6997 ;;  color           2   28[COMRAM] unsigned int 
  6998 ;; Auto vars:     Size  Location     Type
  6999 ;;  y               2   40[COMRAM] int 
  7000 ;;  x               2   38[COMRAM] int 
  7001 ;;  f               2   36[COMRAM] int 
  7002 ;;  ddF_y           2   34[COMRAM] int 
  7003 ;;  ddF_x           2   32[COMRAM] int 
  7004 ;; Return value:  Size  Location     Type
  7005 ;;		None               void
  7006 ;; Registers used:
  7007 ;;		wreg, status,2, status,0, cstack
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7013 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7014 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7015 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7016 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7017 ;;Total ram usage:       24 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:    4
  7020 ;; This function calls:
  7021 ;;		_drawFastVLine
  7022 ;; This function is called by:
  7023 ;;		_fillCircle
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           	psect	text34
  7028  00ED42                     __ptext34:
  7029                           	opt stack 0
  7030  00ED42                     _fillCircleHelper:
  7031                           	opt stack 22
  7032                           
  7033                           ;Lab8.c: 717: signed int f, ddF_x, ddF_y, x, y;
  7034                           ;Lab8.c: 718: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7035                           
  7036                           ;incstack = 0
  7037  00ED42  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
  7038  00ED46  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  7039  00ED4A  1E1F               	comf	??_fillCircleHelper,f,c
  7040  00ED4C  1E20               	comf	??_fillCircleHelper+1,f,c
  7041  00ED4E  4A1F               	infsnz	??_fillCircleHelper,f,c
  7042  00ED50  2A20               	incf	??_fillCircleHelper+1,f,c
  7043  00ED52  0E01               	movlw	1
  7044  00ED54  241F               	addwf	??_fillCircleHelper,w,c
  7045  00ED56  6E25               	movwf	fillCircleHelper@f,c
  7046  00ED58  0E00               	movlw	0
  7047  00ED5A  2020               	addwfc	??_fillCircleHelper+1,w,c
  7048  00ED5C  6E26               	movwf	fillCircleHelper@f+1,c
  7049  00ED5E  0E00               	movlw	0
  7050  00ED60  6E22               	movwf	fillCircleHelper@ddF_x+1,c
  7051  00ED62  0E01               	movlw	1
  7052  00ED64  6E21               	movwf	fillCircleHelper@ddF_x,c
  7053  00ED66  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
  7054  00ED6A  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  7055  00ED6E  90D8               	bcf	status,0,c
  7056  00ED70  361F               	rlcf	??_fillCircleHelper,f,c
  7057  00ED72  3620               	rlcf	??_fillCircleHelper+1,f,c
  7058  00ED74  1E1F               	comf	??_fillCircleHelper,f,c
  7059  00ED76  1E20               	comf	??_fillCircleHelper+1,f,c
  7060  00ED78  4A1F               	infsnz	??_fillCircleHelper,f,c
  7061  00ED7A  2A20               	incf	??_fillCircleHelper+1,f,c
  7062  00ED7C  C01F  F023         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  7063  00ED80  C020  F024         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  7064  00ED84  0E00               	movlw	0
  7065  00ED86  6E28               	movwf	fillCircleHelper@x+1,c
  7066  00ED88  0E00               	movlw	0
  7067  00ED8A  6E27               	movwf	fillCircleHelper@x,c
  7068  00ED8C  C017  F029         	movff	fillCircleHelper@r,fillCircleHelper@y
  7069  00ED90  C018  F02A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  7070                           
  7071                           ;Lab8.c: 719: while (x<y) {
  7072  00ED94  D067               	goto	l2771
  7073  00ED96                     l2751:
  7074                           
  7075                           ;Lab8.c: 720: if (f >= 0) {
  7076  00ED96  BE26               	btfsc	fillCircleHelper@f+1,7,c
  7077  00ED98  D00B               	goto	l257
  7078                           
  7079                           ;Lab8.c: 721: y--;
  7080  00ED9A  0629               	decf	fillCircleHelper@y,f,c
  7081  00ED9C  A0D8               	btfss	status,0,c
  7082  00ED9E  062A               	decf	fillCircleHelper@y+1,f,c
  7083                           
  7084                           ;Lab8.c: 722: ddF_y += 2;
  7085  00EDA0  0E02               	movlw	2
  7086  00EDA2  2623               	addwf	fillCircleHelper@ddF_y,f,c
  7087  00EDA4  0E00               	movlw	0
  7088  00EDA6  2224               	addwfc	fillCircleHelper@ddF_y+1,f,c
  7089                           
  7090                           ;Lab8.c: 723: f += ddF_y;
  7091  00EDA8  5023               	movf	fillCircleHelper@ddF_y,w,c
  7092  00EDAA  2625               	addwf	fillCircleHelper@f,f,c
  7093  00EDAC  5024               	movf	fillCircleHelper@ddF_y+1,w,c
  7094  00EDAE  2226               	addwfc	fillCircleHelper@f+1,f,c
  7095  00EDB0                     l257:
  7096                           
  7097                           ;Lab8.c: 724: }
  7098                           ;Lab8.c: 725: x++;
  7099  00EDB0  4A27               	infsnz	fillCircleHelper@x,f,c
  7100  00EDB2  2A28               	incf	fillCircleHelper@x+1,f,c
  7101                           
  7102                           ;Lab8.c: 726: ddF_x += 2;
  7103  00EDB4  0E02               	movlw	2
  7104  00EDB6  2621               	addwf	fillCircleHelper@ddF_x,f,c
  7105  00EDB8  0E00               	movlw	0
  7106  00EDBA  2222               	addwfc	fillCircleHelper@ddF_x+1,f,c
  7107                           
  7108                           ;Lab8.c: 727: f += ddF_x;
  7109  00EDBC  5021               	movf	fillCircleHelper@ddF_x,w,c
  7110  00EDBE  2625               	addwf	fillCircleHelper@f,f,c
  7111  00EDC0  5022               	movf	fillCircleHelper@ddF_x+1,w,c
  7112  00EDC2  2226               	addwfc	fillCircleHelper@f+1,f,c
  7113                           
  7114                           ;Lab8.c: 729: if (cornername & 0x1) {
  7115  00EDC4  A019               	btfss	fillCircleHelper@cornername,0,c
  7116  00EDC6  D025               	goto	l2767
  7117                           
  7118                           ;Lab8.c: 730: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  7119  00EDC8  5029               	movf	fillCircleHelper@y,w,c
  7120  00EDCA  0800               	sublw	0
  7121  00EDCC  2415               	addwf	fillCircleHelper@y0,w,c
  7122  00EDCE  6E08               	movwf	drawFastVLine@y,c
  7123  00EDD0  5029               	movf	fillCircleHelper@y,w,c
  7124  00EDD2  2429               	addwf	fillCircleHelper@y,w,c
  7125  00EDD4  241B               	addwf	fillCircleHelper@delta,w,c
  7126  00EDD6  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7127  00EDD8  281F               	incf	??_fillCircleHelper,w,c
  7128  00EDDA  6E09               	movwf	drawFastVLine@h,c
  7129  00EDDC  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  7130  00EDE0  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7131  00EDE4  5013               	movf	fillCircleHelper@x0,w,c
  7132  00EDE6  2427               	addwf	fillCircleHelper@x,w,c
  7133  00EDE8  EC04  F071         	call	_drawFastVLine
  7134                           
  7135                           ;Lab8.c: 731: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  7136  00EDEC  5027               	movf	fillCircleHelper@x,w,c
  7137  00EDEE  0800               	sublw	0
  7138  00EDF0  2415               	addwf	fillCircleHelper@y0,w,c
  7139  00EDF2  6E08               	movwf	drawFastVLine@y,c
  7140  00EDF4  5027               	movf	fillCircleHelper@x,w,c
  7141  00EDF6  2427               	addwf	fillCircleHelper@x,w,c
  7142  00EDF8  241B               	addwf	fillCircleHelper@delta,w,c
  7143  00EDFA  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7144  00EDFC  281F               	incf	??_fillCircleHelper,w,c
  7145  00EDFE  6E09               	movwf	drawFastVLine@h,c
  7146  00EE00  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  7147  00EE04  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7148  00EE08  5013               	movf	fillCircleHelper@x0,w,c
  7149  00EE0A  2429               	addwf	fillCircleHelper@y,w,c
  7150  00EE0C  EC04  F071         	call	_drawFastVLine
  7151  00EE10  D000               	goto	l2767
  7152  00EE12                     l2767:
  7153                           
  7154                           ;Lab8.c: 732: }
  7155                           ;Lab8.c: 733: if (cornername & 0x2) {
  7156  00EE12  A219               	btfss	fillCircleHelper@cornername,1,c
  7157  00EE14  D027               	goto	l2771
  7158                           
  7159                           ;Lab8.c: 734: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  7160  00EE16  5029               	movf	fillCircleHelper@y,w,c
  7161  00EE18  0800               	sublw	0
  7162  00EE1A  2415               	addwf	fillCircleHelper@y0,w,c
  7163  00EE1C  6E08               	movwf	drawFastVLine@y,c
  7164  00EE1E  5029               	movf	fillCircleHelper@y,w,c
  7165  00EE20  2429               	addwf	fillCircleHelper@y,w,c
  7166  00EE22  241B               	addwf	fillCircleHelper@delta,w,c
  7167  00EE24  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7168  00EE26  281F               	incf	??_fillCircleHelper,w,c
  7169  00EE28  6E09               	movwf	drawFastVLine@h,c
  7170  00EE2A  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  7171  00EE2E  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7172  00EE32  5027               	movf	fillCircleHelper@x,w,c
  7173  00EE34  0800               	sublw	0
  7174  00EE36  2413               	addwf	fillCircleHelper@x0,w,c
  7175  00EE38  EC04  F071         	call	_drawFastVLine
  7176                           
  7177                           ;Lab8.c: 735: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  7178  00EE3C  5027               	movf	fillCircleHelper@x,w,c
  7179  00EE3E  0800               	sublw	0
  7180  00EE40  2415               	addwf	fillCircleHelper@y0,w,c
  7181  00EE42  6E08               	movwf	drawFastVLine@y,c
  7182  00EE44  5027               	movf	fillCircleHelper@x,w,c
  7183  00EE46  2427               	addwf	fillCircleHelper@x,w,c
  7184  00EE48  241B               	addwf	fillCircleHelper@delta,w,c
  7185  00EE4A  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7186  00EE4C  281F               	incf	??_fillCircleHelper,w,c
  7187  00EE4E  6E09               	movwf	drawFastVLine@h,c
  7188  00EE50  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  7189  00EE54  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7190  00EE58  5029               	movf	fillCircleHelper@y,w,c
  7191  00EE5A  0800               	sublw	0
  7192  00EE5C  2413               	addwf	fillCircleHelper@x0,w,c
  7193  00EE5E  EC04  F071         	call	_drawFastVLine
  7194  00EE62  D000               	goto	l2771
  7195  00EE64                     l2771:
  7196  00EE64  5029               	movf	fillCircleHelper@y,w,c
  7197  00EE66  5C27               	subwf	fillCircleHelper@x,w,c
  7198  00EE68  5028               	movf	fillCircleHelper@x+1,w,c
  7199  00EE6A  0A80               	xorlw	128
  7200  00EE6C  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7201  00EE6E  502A               	movf	fillCircleHelper@y+1,w,c
  7202  00EE70  0A80               	xorlw	128
  7203  00EE72  581F               	subwfb	??_fillCircleHelper& (0+255),w,c
  7204  00EE74  A0D8               	btfss	status,0,c
  7205  00EE76  D78F               	goto	l2751
  7206  00EE78  0012               	return		;funcret
  7207  00EE7A                     __end_of_fillCircleHelper:
  7208                           	opt stack 0
  7209                           tblptru	equ	0xFF8
  7210                           tblptrh	equ	0xFF7
  7211                           tblptrl	equ	0xFF6
  7212                           tablat	equ	0xFF5
  7213                           prodl	equ	0xFF3
  7214                           intcon2	equ	0xFF1
  7215                           postinc0	equ	0xFEE
  7216                           wreg	equ	0xFE8
  7217                           postdec1	equ	0xFE5
  7218                           fsr1l	equ	0xFE1
  7219                           indf2	equ	0xFDF
  7220                           fsr2h	equ	0xFDA
  7221                           fsr2l	equ	0xFD9
  7222                           status	equ	0xFD8
  7223                           
  7224 ;; *************** function _drawCircle *****************
  7225 ;; Defined at:
  7226 ;;		line 654 in file "Lab8.c"
  7227 ;; Parameters:    Size  Location     Type
  7228 ;;  x0              2   11[COMRAM] int 
  7229 ;;  y0              2   13[COMRAM] int 
  7230 ;;  r               2   15[COMRAM] int 
  7231 ;;  color           2   17[COMRAM] unsigned int 
  7232 ;; Auto vars:     Size  Location     Type
  7233 ;;  y               2   29[COMRAM] int 
  7234 ;;  x               2   27[COMRAM] int 
  7235 ;;  f               2   25[COMRAM] int 
  7236 ;;  ddF_y           2   23[COMRAM] int 
  7237 ;;  ddF_x           2   21[COMRAM] int 
  7238 ;; Return value:  Size  Location     Type
  7239 ;;		None               void
  7240 ;; Registers used:
  7241 ;;		wreg, status,2, status,0, cstack
  7242 ;; Tracked objects:
  7243 ;;		On entry : 0/0
  7244 ;;		On exit  : 0/0
  7245 ;;		Unchanged: 0/0
  7246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7247 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7248 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7249 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7250 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7251 ;;Total ram usage:       20 bytes
  7252 ;; Hardware stack levels used:    1
  7253 ;; Hardware stack levels required when called:    4
  7254 ;; This function calls:
  7255 ;;		_drawPixel
  7256 ;; This function is called by:
  7257 ;;		_Initialize_Screen
  7258 ;;		_update_LCD_color
  7259 ;; This function uses a non-reentrant model
  7260 ;;
  7261                           
  7262                           	psect	text35
  7263  00EFD0                     __ptext35:
  7264                           	opt stack 0
  7265  00EFD0                     _drawCircle:
  7266                           	opt stack 23
  7267                           
  7268                           ;Lab8.c: 656: signed int f, ddF_x, ddF_y, x, y;
  7269                           ;Lab8.c: 657: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7270                           
  7271                           ;incstack = 0
  7272  00EFD0  C010  F014         	movff	drawCircle@r,??_drawCircle
  7273  00EFD4  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
  7274  00EFD8  1E14               	comf	??_drawCircle,f,c
  7275  00EFDA  1E15               	comf	??_drawCircle+1,f,c
  7276  00EFDC  4A14               	infsnz	??_drawCircle,f,c
  7277  00EFDE  2A15               	incf	??_drawCircle+1,f,c
  7278  00EFE0  0E01               	movlw	1
  7279  00EFE2  2414               	addwf	??_drawCircle,w,c
  7280  00EFE4  6E1A               	movwf	drawCircle@f,c
  7281  00EFE6  0E00               	movlw	0
  7282  00EFE8  2015               	addwfc	??_drawCircle+1,w,c
  7283  00EFEA  6E1B               	movwf	drawCircle@f+1,c
  7284  00EFEC  0E00               	movlw	0
  7285  00EFEE  6E17               	movwf	drawCircle@ddF_x+1,c
  7286  00EFF0  0E01               	movlw	1
  7287  00EFF2  6E16               	movwf	drawCircle@ddF_x,c
  7288  00EFF4  C010  F014         	movff	drawCircle@r,??_drawCircle
  7289  00EFF8  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
  7290  00EFFC  90D8               	bcf	status,0,c
  7291  00EFFE  3614               	rlcf	??_drawCircle,f,c
  7292  00F000  3615               	rlcf	??_drawCircle+1,f,c
  7293  00F002  1E14               	comf	??_drawCircle,f,c
  7294  00F004  1E15               	comf	??_drawCircle+1,f,c
  7295  00F006  4A14               	infsnz	??_drawCircle,f,c
  7296  00F008  2A15               	incf	??_drawCircle+1,f,c
  7297  00F00A  C014  F018         	movff	??_drawCircle,drawCircle@ddF_y
  7298  00F00E  C015  F019         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  7299  00F012  0E00               	movlw	0
  7300  00F014  6E1D               	movwf	drawCircle@x+1,c
  7301  00F016  0E00               	movlw	0
  7302  00F018  6E1C               	movwf	drawCircle@x,c
  7303  00F01A  C010  F01E         	movff	drawCircle@r,drawCircle@y
  7304  00F01E  C011  F01F         	movff	drawCircle@r+1,drawCircle@y+1
  7305                           
  7306                           ;Lab8.c: 658: drawPixel(x0 , y0 + r, color);
  7307  00F022  500E               	movf	drawCircle@y0,w,c
  7308  00F024  2410               	addwf	drawCircle@r,w,c
  7309  00F026  6E08               	movwf	drawPixel@y,c
  7310  00F028  C012  F009         	movff	drawCircle@color,drawPixel@color
  7311  00F02C  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7312  00F030  500C               	movf	drawCircle@x0,w,c
  7313  00F032  EC2A  F06E         	call	_drawPixel
  7314                           
  7315                           ;Lab8.c: 659: drawPixel(x0 , y0 - r, color);
  7316  00F036  5010               	movf	drawCircle@r,w,c
  7317  00F038  0800               	sublw	0
  7318  00F03A  240E               	addwf	drawCircle@y0,w,c
  7319  00F03C  6E08               	movwf	drawPixel@y,c
  7320  00F03E  C012  F009         	movff	drawCircle@color,drawPixel@color
  7321  00F042  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7322  00F046  500C               	movf	drawCircle@x0,w,c
  7323  00F048  EC2A  F06E         	call	_drawPixel
  7324                           
  7325                           ;Lab8.c: 660: drawPixel(x0+r, y0 , color);
  7326  00F04C  C00E  F008         	movff	drawCircle@y0,drawPixel@y
  7327  00F050  C012  F009         	movff	drawCircle@color,drawPixel@color
  7328  00F054  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7329  00F058  500C               	movf	drawCircle@x0,w,c
  7330  00F05A  2410               	addwf	drawCircle@r,w,c
  7331  00F05C  EC2A  F06E         	call	_drawPixel
  7332                           
  7333                           ;Lab8.c: 661: drawPixel(x0-r, y0 , color);
  7334  00F060  C00E  F008         	movff	drawCircle@y0,drawPixel@y
  7335  00F064  C012  F009         	movff	drawCircle@color,drawPixel@color
  7336  00F068  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7337  00F06C  5010               	movf	drawCircle@r,w,c
  7338  00F06E  0800               	sublw	0
  7339  00F070  240C               	addwf	drawCircle@x0,w,c
  7340  00F072  EC2A  F06E         	call	_drawPixel
  7341                           
  7342                           ;Lab8.c: 662: while (x < y) {
  7343  00F076  D078               	goto	l2917
  7344  00F078                     l2889:
  7345                           
  7346                           ;Lab8.c: 663: if (f >= 0) {
  7347  00F078  BE1B               	btfsc	drawCircle@f+1,7,c
  7348  00F07A  D00B               	goto	l239
  7349                           
  7350                           ;Lab8.c: 664: y--;
  7351  00F07C  061E               	decf	drawCircle@y,f,c
  7352  00F07E  A0D8               	btfss	status,0,c
  7353  00F080  061F               	decf	drawCircle@y+1,f,c
  7354                           
  7355                           ;Lab8.c: 665: ddF_y += 2;
  7356  00F082  0E02               	movlw	2
  7357  00F084  2618               	addwf	drawCircle@ddF_y,f,c
  7358  00F086  0E00               	movlw	0
  7359  00F088  2219               	addwfc	drawCircle@ddF_y+1,f,c
  7360                           
  7361                           ;Lab8.c: 666: f += ddF_y;
  7362  00F08A  5018               	movf	drawCircle@ddF_y,w,c
  7363  00F08C  261A               	addwf	drawCircle@f,f,c
  7364  00F08E  5019               	movf	drawCircle@ddF_y+1,w,c
  7365  00F090  221B               	addwfc	drawCircle@f+1,f,c
  7366  00F092                     l239:
  7367                           
  7368                           ;Lab8.c: 667: }
  7369                           ;Lab8.c: 668: x++;
  7370  00F092  4A1C               	infsnz	drawCircle@x,f,c
  7371  00F094  2A1D               	incf	drawCircle@x+1,f,c
  7372                           
  7373                           ;Lab8.c: 669: ddF_x += 2;
  7374  00F096  0E02               	movlw	2
  7375  00F098  2616               	addwf	drawCircle@ddF_x,f,c
  7376  00F09A  0E00               	movlw	0
  7377  00F09C  2217               	addwfc	drawCircle@ddF_x+1,f,c
  7378                           
  7379                           ;Lab8.c: 670: f += ddF_x;
  7380  00F09E  5016               	movf	drawCircle@ddF_x,w,c
  7381  00F0A0  261A               	addwf	drawCircle@f,f,c
  7382  00F0A2  5017               	movf	drawCircle@ddF_x+1,w,c
  7383  00F0A4  221B               	addwfc	drawCircle@f+1,f,c
  7384                           
  7385                           ;Lab8.c: 671: drawPixel(x0 + x, y0 + y, color);
  7386  00F0A6  500E               	movf	drawCircle@y0,w,c
  7387  00F0A8  241E               	addwf	drawCircle@y,w,c
  7388  00F0AA  6E08               	movwf	drawPixel@y,c
  7389  00F0AC  C012  F009         	movff	drawCircle@color,drawPixel@color
  7390  00F0B0  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7391  00F0B4  500C               	movf	drawCircle@x0,w,c
  7392  00F0B6  241C               	addwf	drawCircle@x,w,c
  7393  00F0B8  EC2A  F06E         	call	_drawPixel
  7394                           
  7395                           ;Lab8.c: 672: drawPixel(x0 - x, y0 + y, color);
  7396  00F0BC  500E               	movf	drawCircle@y0,w,c
  7397  00F0BE  241E               	addwf	drawCircle@y,w,c
  7398  00F0C0  6E08               	movwf	drawPixel@y,c
  7399  00F0C2  C012  F009         	movff	drawCircle@color,drawPixel@color
  7400  00F0C6  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7401  00F0CA  501C               	movf	drawCircle@x,w,c
  7402  00F0CC  0800               	sublw	0
  7403  00F0CE  240C               	addwf	drawCircle@x0,w,c
  7404  00F0D0  EC2A  F06E         	call	_drawPixel
  7405                           
  7406                           ;Lab8.c: 673: drawPixel(x0 + x, y0 - y, color);
  7407  00F0D4  501E               	movf	drawCircle@y,w,c
  7408  00F0D6  0800               	sublw	0
  7409  00F0D8  240E               	addwf	drawCircle@y0,w,c
  7410  00F0DA  6E08               	movwf	drawPixel@y,c
  7411  00F0DC  C012  F009         	movff	drawCircle@color,drawPixel@color
  7412  00F0E0  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7413  00F0E4  500C               	movf	drawCircle@x0,w,c
  7414  00F0E6  241C               	addwf	drawCircle@x,w,c
  7415  00F0E8  EC2A  F06E         	call	_drawPixel
  7416                           
  7417                           ;Lab8.c: 674: drawPixel(x0 - x, y0 - y, color);
  7418  00F0EC  501E               	movf	drawCircle@y,w,c
  7419  00F0EE  0800               	sublw	0
  7420  00F0F0  240E               	addwf	drawCircle@y0,w,c
  7421  00F0F2  6E08               	movwf	drawPixel@y,c
  7422  00F0F4  C012  F009         	movff	drawCircle@color,drawPixel@color
  7423  00F0F8  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7424  00F0FC  501C               	movf	drawCircle@x,w,c
  7425  00F0FE  0800               	sublw	0
  7426  00F100  240C               	addwf	drawCircle@x0,w,c
  7427  00F102  EC2A  F06E         	call	_drawPixel
  7428                           
  7429                           ;Lab8.c: 675: drawPixel(x0 + y, y0 + x, color);
  7430  00F106  500E               	movf	drawCircle@y0,w,c
  7431  00F108  241C               	addwf	drawCircle@x,w,c
  7432  00F10A  6E08               	movwf	drawPixel@y,c
  7433  00F10C  C012  F009         	movff	drawCircle@color,drawPixel@color
  7434  00F110  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7435  00F114  500C               	movf	drawCircle@x0,w,c
  7436  00F116  241E               	addwf	drawCircle@y,w,c
  7437  00F118  EC2A  F06E         	call	_drawPixel
  7438                           
  7439                           ;Lab8.c: 676: drawPixel(x0 - y, y0 + x, color);
  7440  00F11C  500E               	movf	drawCircle@y0,w,c
  7441  00F11E  241C               	addwf	drawCircle@x,w,c
  7442  00F120  6E08               	movwf	drawPixel@y,c
  7443  00F122  C012  F009         	movff	drawCircle@color,drawPixel@color
  7444  00F126  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7445  00F12A  501E               	movf	drawCircle@y,w,c
  7446  00F12C  0800               	sublw	0
  7447  00F12E  240C               	addwf	drawCircle@x0,w,c
  7448  00F130  EC2A  F06E         	call	_drawPixel
  7449                           
  7450                           ;Lab8.c: 677: drawPixel(x0 + y, y0 - x, color);
  7451  00F134  501C               	movf	drawCircle@x,w,c
  7452  00F136  0800               	sublw	0
  7453  00F138  240E               	addwf	drawCircle@y0,w,c
  7454  00F13A  6E08               	movwf	drawPixel@y,c
  7455  00F13C  C012  F009         	movff	drawCircle@color,drawPixel@color
  7456  00F140  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7457  00F144  500C               	movf	drawCircle@x0,w,c
  7458  00F146  241E               	addwf	drawCircle@y,w,c
  7459  00F148  EC2A  F06E         	call	_drawPixel
  7460                           
  7461                           ;Lab8.c: 678: drawPixel(x0 - y, y0 - x, color);
  7462  00F14C  501C               	movf	drawCircle@x,w,c
  7463  00F14E  0800               	sublw	0
  7464  00F150  240E               	addwf	drawCircle@y0,w,c
  7465  00F152  6E08               	movwf	drawPixel@y,c
  7466  00F154  C012  F009         	movff	drawCircle@color,drawPixel@color
  7467  00F158  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7468  00F15C  501E               	movf	drawCircle@y,w,c
  7469  00F15E  0800               	sublw	0
  7470  00F160  240C               	addwf	drawCircle@x0,w,c
  7471  00F162  EC2A  F06E         	call	_drawPixel
  7472  00F166  D000               	goto	l2917
  7473  00F168                     l2917:
  7474  00F168  501E               	movf	drawCircle@y,w,c
  7475  00F16A  5C1C               	subwf	drawCircle@x,w,c
  7476  00F16C  501D               	movf	drawCircle@x+1,w,c
  7477  00F16E  0A80               	xorlw	128
  7478  00F170  6E14               	movwf	??_drawCircle& (0+255),c
  7479  00F172  501F               	movf	drawCircle@y+1,w,c
  7480  00F174  0A80               	xorlw	128
  7481  00F176  5814               	subwfb	??_drawCircle& (0+255),w,c
  7482  00F178  A0D8               	btfss	status,0,c
  7483  00F17A  D77E               	goto	l2889
  7484  00F17C  0012               	return		;funcret
  7485  00F17E                     __end_of_drawCircle:
  7486                           	opt stack 0
  7487                           tblptru	equ	0xFF8
  7488                           tblptrh	equ	0xFF7
  7489                           tblptrl	equ	0xFF6
  7490                           tablat	equ	0xFF5
  7491                           prodl	equ	0xFF3
  7492                           intcon2	equ	0xFF1
  7493                           postinc0	equ	0xFEE
  7494                           wreg	equ	0xFE8
  7495                           postdec1	equ	0xFE5
  7496                           fsr1l	equ	0xFE1
  7497                           indf2	equ	0xFDF
  7498                           fsr2h	equ	0xFDA
  7499                           fsr2l	equ	0xFD9
  7500                           status	equ	0xFD8
  7501                           
  7502 ;; *************** function _PED_Control *****************
  7503 ;; Defined at:
  7504 ;;		line 1194 in file "Lab8.c"
  7505 ;; Parameters:    Size  Location     Type
  7506 ;;  direction       1    wreg     unsigned char 
  7507 ;;  Num_Sec         1   59[COMRAM] unsigned char 
  7508 ;; Auto vars:     Size  Location     Type
  7509 ;;  direction       1   60[COMRAM] unsigned char 
  7510 ;;  i               1   61[COMRAM] unsigned char 
  7511 ;; Return value:  Size  Location     Type
  7512 ;;		None               void
  7513 ;; Registers used:
  7514 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7515 ;; Tracked objects:
  7516 ;;		On entry : 0/0
  7517 ;;		On exit  : 0/0
  7518 ;;		Unchanged: 0/0
  7519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7520 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7521 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7523 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7524 ;;Total ram usage:        3 bytes
  7525 ;; Hardware stack levels used:    1
  7526 ;; Hardware stack levels required when called:    8
  7527 ;; This function calls:
  7528 ;;		_Wait_One_Second_With_Beep
  7529 ;;		_update_LCD_PED_Count
  7530 ;; This function is called by:
  7531 ;;		_Day_Mode
  7532 ;; This function uses a non-reentrant model
  7533 ;;
  7534                           
  7535                           	psect	text36
  7536  00DC84                     __ptext36:
  7537                           	opt stack 0
  7538  00DC84                     _PED_Control:
  7539                           	opt stack 21
  7540                           
  7541                           ;incstack = 0
  7542                           ;PED_Control@direction stored from wreg
  7543  00DC84  6E3D               	movwf	PED_Control@direction,c
  7544                           
  7545                           ;Lab8.c: 1196: for(char i = Num_Sec-1;i>0; i--)
  7546  00DC86  043C               	decf	PED_Control@Num_Sec,w,c
  7547  00DC88  6E3E               	movwf	PED_Control@i,c
  7548  00DC8A                     l3381:
  7549  00DC8A  503E               	movf	PED_Control@i,w,c
  7550  00DC8C  B4D8               	btfsc	status,2,c
  7551  00DC8E  D00B               	goto	l3393
  7552  00DC90  D001               	goto	l3385
  7553  00DC92  D009               	goto	l3393
  7554  00DC94                     l3385:
  7555                           
  7556                           ;Lab8.c: 1197: {
  7557                           ;Lab8.c: 1198: update_LCD_PED_Count(direction, i);
  7558  00DC94  C03E  F03A         	movff	PED_Control@i,update_LCD_PED_Count@count
  7559  00DC98  503D               	movf	PED_Control@direction,w,c
  7560  00DC9A  EC2B  F073         	call	_update_LCD_PED_Count
  7561                           
  7562                           ;Lab8.c: 1199: Wait_One_Second_With_Beep();
  7563  00DC9E  EC94  F06D         	call	_Wait_One_Second_With_Beep	;wreg free
  7564  00DCA2  063E               	decf	PED_Control@i,f,c
  7565  00DCA4  D7F2               	goto	l3381
  7566  00DCA6                     l3393:
  7567                           
  7568                           ;Lab8.c: 1200: }
  7569                           ;Lab8.c: 1202: update_LCD_PED_Count(direction, 0);
  7570  00DCA6  0E00               	movlw	0
  7571  00DCA8  6E3A               	movwf	update_LCD_PED_Count@count,c
  7572  00DCAA  503D               	movf	PED_Control@direction,w,c
  7573  00DCAC  EC2B  F073         	call	_update_LCD_PED_Count
  7574                           
  7575                           ;Lab8.c: 1203: Wait_One_Second_With_Beep();
  7576  00DCB0  EC94  F06D         	call	_Wait_One_Second_With_Beep	;wreg free
  7577  00DCB4  0012               	return		;funcret
  7578  00DCB6                     __end_of_PED_Control:
  7579                           	opt stack 0
  7580                           tblptru	equ	0xFF8
  7581                           tblptrh	equ	0xFF7
  7582                           tblptrl	equ	0xFF6
  7583                           tablat	equ	0xFF5
  7584                           prodl	equ	0xFF3
  7585                           intcon2	equ	0xFF1
  7586                           postinc0	equ	0xFEE
  7587                           wreg	equ	0xFE8
  7588                           postdec1	equ	0xFE5
  7589                           fsr1l	equ	0xFE1
  7590                           indf2	equ	0xFDF
  7591                           fsr2h	equ	0xFDA
  7592                           fsr2l	equ	0xFD9
  7593                           status	equ	0xFD8
  7594                           
  7595 ;; *************** function _update_LCD_PED_Count *****************
  7596 ;; Defined at:
  7597 ;;		line 1424 in file "Lab8.c"
  7598 ;; Parameters:    Size  Location     Type
  7599 ;;  direction       1    wreg     unsigned char 
  7600 ;;  count           1   57[COMRAM] unsigned char 
  7601 ;; Auto vars:     Size  Location     Type
  7602 ;;  direction       1   58[COMRAM] unsigned char 
  7603 ;; Return value:  Size  Location     Type
  7604 ;;		None               void
  7605 ;; Registers used:
  7606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7607 ;; Tracked objects:
  7608 ;;		On entry : 0/0
  7609 ;;		On exit  : 0/0
  7610 ;;		Unchanged: 0/0
  7611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7612 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7613 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7615 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7616 ;;Total ram usage:        2 bytes
  7617 ;; Hardware stack levels used:    1
  7618 ;; Hardware stack levels required when called:    7
  7619 ;; This function calls:
  7620 ;;		___awdiv
  7621 ;;		___awmod
  7622 ;;		_drawtext
  7623 ;; This function is called by:
  7624 ;;		_PED_Control
  7625 ;; This function uses a non-reentrant model
  7626 ;;
  7627                           
  7628                           	psect	text37
  7629  00E656                     __ptext37:
  7630                           	opt stack 0
  7631  00E656                     _update_LCD_PED_Count:
  7632                           	opt stack 21
  7633                           
  7634                           ;incstack = 0
  7635                           ;update_LCD_PED_Count@direction stored from wreg
  7636  00E656  6E3B               	movwf	update_LCD_PED_Count@direction,c
  7637                           
  7638                           ;Lab8.c: 1426: switch (direction)
  7639  00E658  D057               	goto	l3239
  7640  00E65A                     l3229:
  7641                           
  7642                           ;Lab8.c: 1429: PED_EW_Count[0] = count/10 + '0';
  7643  00E65A  C03A  F001         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7644  00E65E  6A02               	clrf	___awdiv@dividend+1,c
  7645  00E660  0E00               	movlw	0
  7646  00E662  6E04               	movwf	___awdiv@divisor+1,c
  7647  00E664  0E0A               	movlw	10
  7648  00E666  6E03               	movwf	___awdiv@divisor,c
  7649  00E668  EC8C  F071         	call	___awdiv	;wreg free
  7650  00E66C  5001               	movf	?___awdiv,w,c
  7651  00E66E  0F30               	addlw	48
  7652  00E670  6E4E               	movwf	_PED_EW_Count,c
  7653                           
  7654                           ;Lab8.c: 1430: PED_EW_Count[1] = count%10 + '0';
  7655  00E672  C03A  F001         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7656  00E676  6A02               	clrf	___awmod@dividend+1,c
  7657  00E678  0E00               	movlw	0
  7658  00E67A  6E04               	movwf	___awmod@divisor+1,c
  7659  00E67C  0E0A               	movlw	10
  7660  00E67E  6E03               	movwf	___awmod@divisor,c
  7661  00E680  EC82  F070         	call	___awmod	;wreg free
  7662  00E684  5001               	movf	?___awmod,w,c
  7663  00E686  0F30               	addlw	48
  7664  00E688  6E4F               	movwf	_PED_EW_Count+1,c
  7665                           
  7666                           ;Lab8.c: 1431: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  7667  00E68A  0E1E               	movlw	30
  7668  00E68C  6E29               	movwf	drawtext@y,c
  7669  00E68E  0E4E               	movlw	low _PED_EW_Count
  7670  00E690  6E2A               	movwf	drawtext@_text,c
  7671  00E692  0E00               	movlw	high _PED_EW_Count
  7672  00E694  6E2B               	movwf	drawtext@_text+1,c
  7673  00E696  0E07               	movlw	7
  7674  00E698  6E2D               	movwf	drawtext@color+1,c
  7675  00E69A  682C               	setf	drawtext@color,c
  7676  00E69C  0E00               	movlw	0
  7677  00E69E  6E2F               	movwf	drawtext@bg+1,c
  7678  00E6A0  0E00               	movlw	0
  7679  00E6A2  6E2E               	movwf	drawtext@bg,c
  7680  00E6A4  0E02               	movlw	2
  7681  00E6A6  6E30               	movwf	drawtext@size,c
  7682  00E6A8  0E02               	movlw	2
  7683  00E6AA  ECC0  F074         	call	_drawtext
  7684                           
  7685                           ;Lab8.c: 1432: break;
  7686  00E6AE  D034               	goto	l481
  7687  00E6B0                     l3233:
  7688                           
  7689                           ;Lab8.c: 1435: PED_NS_Count[0] = count/10 + '0';
  7690  00E6B0  C03A  F001         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7691  00E6B4  6A02               	clrf	___awdiv@dividend+1,c
  7692  00E6B6  0E00               	movlw	0
  7693  00E6B8  6E04               	movwf	___awdiv@divisor+1,c
  7694  00E6BA  0E0A               	movlw	10
  7695  00E6BC  6E03               	movwf	___awdiv@divisor,c
  7696  00E6BE  EC8C  F071         	call	___awdiv	;wreg free
  7697  00E6C2  5001               	movf	?___awdiv,w,c
  7698  00E6C4  0F30               	addlw	48
  7699  00E6C6  6E51               	movwf	_PED_NS_Count,c
  7700                           
  7701                           ;Lab8.c: 1436: PED_NS_Count[1] = count%10 + '0';
  7702  00E6C8  C03A  F001         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7703  00E6CC  6A02               	clrf	___awmod@dividend+1,c
  7704  00E6CE  0E00               	movlw	0
  7705  00E6D0  6E04               	movwf	___awmod@divisor+1,c
  7706  00E6D2  0E0A               	movlw	10
  7707  00E6D4  6E03               	movwf	___awmod@divisor,c
  7708  00E6D6  EC82  F070         	call	___awmod	;wreg free
  7709  00E6DA  5001               	movf	?___awmod,w,c
  7710  00E6DC  0F30               	addlw	48
  7711  00E6DE  6E52               	movwf	_PED_NS_Count+1,c
  7712                           
  7713                           ;Lab8.c: 1437: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
  7714  00E6E0  0E5A               	movlw	90
  7715  00E6E2  6E29               	movwf	drawtext@y,c
  7716  00E6E4  0E51               	movlw	low _PED_NS_Count
  7717  00E6E6  6E2A               	movwf	drawtext@_text,c
  7718  00E6E8  0E00               	movlw	high _PED_NS_Count
  7719  00E6EA  6E2B               	movwf	drawtext@_text+1,c
  7720  00E6EC  0E00               	movlw	0
  7721  00E6EE  6E2D               	movwf	drawtext@color+1,c
  7722  00E6F0  0E1F               	movlw	31
  7723  00E6F2  6E2C               	movwf	drawtext@color,c
  7724  00E6F4  0E00               	movlw	0
  7725  00E6F6  6E2F               	movwf	drawtext@bg+1,c
  7726  00E6F8  0E00               	movlw	0
  7727  00E6FA  6E2E               	movwf	drawtext@bg,c
  7728  00E6FC  0E02               	movlw	2
  7729  00E6FE  6E30               	movwf	drawtext@size,c
  7730  00E700  0E02               	movlw	2
  7731  00E702  ECC0  F074         	call	_drawtext
  7732                           
  7733                           ;Lab8.c: 1441: }
  7734                           
  7735                           ;Lab8.c: 1438: break;
  7736  00E706  D008               	goto	l481
  7737  00E708                     l3239:
  7738  00E708  503B               	movf	update_LCD_PED_Count@direction,w,c
  7739                           
  7740                           ; Switch size 1, requested type "space"
  7741                           ; Number of cases is 2, Range of values is 0 to 2
  7742                           ; switch strategies available:
  7743                           ; Name         Instructions Cycles
  7744                           ; simple_byte            7     4 (average)
  7745                           ;	Chosen strategy is simple_byte
  7746  00E70A  0A00               	xorlw	0	; case 0
  7747  00E70C  B4D8               	btfsc	status,2,c
  7748  00E70E  D7A5               	goto	l3229
  7749  00E710  0A02               	xorlw	2	; case 2
  7750  00E712  B4D8               	btfsc	status,2,c
  7751  00E714  D7CD               	goto	l3233
  7752  00E716  D000               	goto	l481
  7753  00E718                     l481:
  7754  00E718  0012               	return		;funcret
  7755  00E71A                     __end_of_update_LCD_PED_Count:
  7756                           	opt stack 0
  7757                           tblptru	equ	0xFF8
  7758                           tblptrh	equ	0xFF7
  7759                           tblptrl	equ	0xFF6
  7760                           tablat	equ	0xFF5
  7761                           prodl	equ	0xFF3
  7762                           intcon2	equ	0xFF1
  7763                           postinc0	equ	0xFEE
  7764                           wreg	equ	0xFE8
  7765                           postdec1	equ	0xFE5
  7766                           fsr1l	equ	0xFE1
  7767                           indf2	equ	0xFDF
  7768                           fsr2h	equ	0xFDA
  7769                           fsr2l	equ	0xFD9
  7770                           status	equ	0xFD8
  7771                           
  7772 ;; *************** function _drawtext *****************
  7773 ;; Defined at:
  7774 ;;		line 600 in file "Lab8.c"
  7775 ;; Parameters:    Size  Location     Type
  7776 ;;  x               1    wreg     unsigned char 
  7777 ;;  y               1   40[COMRAM] unsigned char 
  7778 ;;  _text           2   41[COMRAM] PTR unsigned char 
  7779 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  7780 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  7781 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  7782 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  7783 ;;  color           2   43[COMRAM] unsigned int 
  7784 ;;  bg              2   45[COMRAM] unsigned int 
  7785 ;;  size            1   47[COMRAM] unsigned char 
  7786 ;; Auto vars:     Size  Location     Type
  7787 ;;  x               1   52[COMRAM] unsigned char 
  7788 ;;  i               2   53[COMRAM] unsigned int 
  7789 ;;  textsize        2   50[COMRAM] unsigned int 
  7790 ;;  cursor_x        1   56[COMRAM] unsigned char 
  7791 ;;  cursor_y        1   55[COMRAM] unsigned char 
  7792 ;; Return value:  Size  Location     Type
  7793 ;;		None               void
  7794 ;; Registers used:
  7795 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7796 ;; Tracked objects:
  7797 ;;		On entry : 0/0
  7798 ;;		On exit  : 0/0
  7799 ;;		Unchanged: 0/0
  7800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7801 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7803 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7804 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7805 ;;Total ram usage:       17 bytes
  7806 ;; Hardware stack levels used:    1
  7807 ;; Hardware stack levels required when called:    6
  7808 ;; This function calls:
  7809 ;;		_drawChar
  7810 ;;		_strlen
  7811 ;; This function is called by:
  7812 ;;		_Initialize_Screen
  7813 ;;		_Wait_One_Second
  7814 ;;		_update_LCD_count
  7815 ;;		_update_LCD_PED_Count
  7816 ;;		_update_LCD_misc
  7817 ;; This function uses a non-reentrant model
  7818 ;;
  7819                           
  7820                           	psect	text38
  7821  00E980                     __ptext38:
  7822                           	opt stack 0
  7823  00E980                     _drawtext:
  7824                           	opt stack 21
  7825                           
  7826                           ;incstack = 0
  7827                           ;drawtext@x stored from wreg
  7828  00E980  6E35               	movwf	drawtext@x,c
  7829                           
  7830                           ;Lab8.c: 602: unsigned char cursor_x, cursor_y;
  7831                           ;Lab8.c: 603: unsigned int textsize, i;
  7832                           ;Lab8.c: 604: cursor_x = x, cursor_y = y;
  7833  00E982  C035  F039         	movff	drawtext@x,drawtext@cursor_x
  7834  00E986  C029  F038         	movff	drawtext@y,drawtext@cursor_y
  7835                           
  7836                           ;Lab8.c: 605: textsize = strlen(_text);
  7837  00E98A  C02A  F001         	movff	drawtext@_text,strlen@s
  7838  00E98E  C02B  F002         	movff	drawtext@_text+1,strlen@s+1
  7839  00E992  EC92  F06E         	call	_strlen	;wreg free
  7840  00E996  C001  F033         	movff	?_strlen,drawtext@textsize
  7841  00E99A  C002  F034         	movff	?_strlen+1,drawtext@textsize+1
  7842                           
  7843                           ;Lab8.c: 606: for(i = 0; i < textsize; i++){
  7844  00E99E  0E00               	movlw	0
  7845  00E9A0  6E37               	movwf	drawtext@i+1,c
  7846  00E9A2  0E00               	movlw	0
  7847  00E9A4  6E36               	movwf	drawtext@i,c
  7848  00E9A6  D054               	goto	l2739
  7849  00E9A8                     l2713:
  7850                           
  7851                           ;Lab8.c: 607: if(wrap && ((cursor_x + size * 5) > 128)){
  7852  00E9A8  5041               	movf	_wrap,w,c
  7853  00E9AA  B4D8               	btfsc	status,2,c
  7854  00E9AC  D02C               	goto	l2729
  7855  00E9AE  5030               	movf	drawtext@size,w,c
  7856  00E9B0  0D05               	mullw	5
  7857  00E9B2  5039               	movf	drawtext@cursor_x,w,c
  7858  00E9B4  6E31               	movwf	??_drawtext& (0+255),c
  7859  00E9B6  6A32               	clrf	(??_drawtext+1)& (0+255),c
  7860  00E9B8  50F3               	movf	prodl,w,c
  7861  00E9BA  2631               	addwf	??_drawtext,f,c
  7862  00E9BC  50F4               	movf	prodh,w,c
  7863  00E9BE  2232               	addwfc	??_drawtext+1,f,c
  7864  00E9C0  BE32               	btfsc	??_drawtext+1,7,c
  7865  00E9C2  D021               	goto	l2729
  7866  00E9C4  5032               	movf	??_drawtext+1,w,c
  7867  00E9C6  E104               	bnz	u1600
  7868  00E9C8  0E81               	movlw	129
  7869  00E9CA  5C31               	subwf	??_drawtext,w,c
  7870  00E9CC  A0D8               	btfss	status,0,c
  7871  00E9CE  D01B               	goto	l2729
  7872  00E9D0                     u1600:
  7873                           
  7874                           ;Lab8.c: 608: cursor_x = 0;
  7875  00E9D0  0E00               	movlw	0
  7876  00E9D2  6E39               	movwf	drawtext@cursor_x,c
  7877                           
  7878                           ;Lab8.c: 609: cursor_y = cursor_y + size * 7 + 3 ;
  7879  00E9D4  5030               	movf	drawtext@size,w,c
  7880  00E9D6  0D07               	mullw	7
  7881  00E9D8  50F3               	movf	prodl,w,c
  7882  00E9DA  2438               	addwf	drawtext@cursor_y,w,c
  7883  00E9DC  0F03               	addlw	3
  7884  00E9DE  6E38               	movwf	drawtext@cursor_y,c
  7885                           
  7886                           ;Lab8.c: 610: if(cursor_y > 160) cursor_y = 160;
  7887  00E9E0  0EA0               	movlw	160
  7888  00E9E2  6438               	cpfsgt	drawtext@cursor_y,c
  7889  00E9E4  D003               	goto	l2725
  7890  00E9E6  0EA0               	movlw	160
  7891  00E9E8  6E38               	movwf	drawtext@cursor_y,c
  7892  00E9EA  D000               	goto	l2725
  7893  00E9EC                     l2725:
  7894                           
  7895                           ;Lab8.c: 611: if(_text[i] == 0x20) goto _skip; }
  7896  00E9EC  5036               	movf	drawtext@i,w,c
  7897  00E9EE  242A               	addwf	drawtext@_text,w,c
  7898  00E9F0  6ED9               	movwf	fsr2l,c
  7899  00E9F2  5037               	movf	drawtext@i+1,w,c
  7900  00E9F4  202B               	addwfc	drawtext@_text+1,w,c
  7901  00E9F6  6EDA               	movwf	fsr2h,c
  7902  00E9F8  0E20               	movlw	32
  7903  00E9FA  18DE               	xorwf	postinc2,w,c
  7904  00E9FC  B4D8               	btfsc	status,2,c
  7905  00E9FE  D025               	goto	l2737
  7906  00EA00  D002               	goto	l2729
  7907  00EA02  D023               	goto	l2737
  7908  00EA04  D000               	goto	l2729
  7909  00EA06                     l2729:
  7910                           
  7911                           ;Lab8.c: 612: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  7912  00EA06  C038  F01E         	movff	drawtext@cursor_y,drawChar@y
  7913  00EA0A  5036               	movf	drawtext@i,w,c
  7914  00EA0C  242A               	addwf	drawtext@_text,w,c
  7915  00EA0E  6ED9               	movwf	fsr2l,c
  7916  00EA10  5037               	movf	drawtext@i+1,w,c
  7917  00EA12  202B               	addwfc	drawtext@_text+1,w,c
  7918  00EA14  6EDA               	movwf	fsr2h,c
  7919  00EA16  50DF               	movf	indf2,w,c
  7920  00EA18  6E1F               	movwf	drawChar@c,c
  7921  00EA1A  C02C  F020         	movff	drawtext@color,drawChar@color
  7922  00EA1E  C02D  F021         	movff	drawtext@color+1,drawChar@color+1
  7923  00EA22  C02E  F022         	movff	drawtext@bg,drawChar@bg
  7924  00EA26  C02F  F023         	movff	drawtext@bg+1,drawChar@bg+1
  7925  00EA2A  C030  F024         	movff	drawtext@size,drawChar@size
  7926  00EA2E  5039               	movf	drawtext@cursor_x,w,c
  7927  00EA30  EC3D  F077         	call	_drawChar
  7928                           
  7929                           ;Lab8.c: 613: cursor_x = cursor_x + size * 6;
  7930  00EA34  5030               	movf	drawtext@size,w,c
  7931  00EA36  0D06               	mullw	6
  7932  00EA38  50F3               	movf	prodl,w,c
  7933  00EA3A  2439               	addwf	drawtext@cursor_x,w,c
  7934  00EA3C  6E39               	movwf	drawtext@cursor_x,c
  7935                           
  7936                           ;Lab8.c: 614: if(cursor_x > 128) cursor_x = 128;
  7937  00EA3E  0E80               	movlw	128
  7938  00EA40  6439               	cpfsgt	drawtext@cursor_x,c
  7939  00EA42  D003               	goto	l2737
  7940  00EA44  0E80               	movlw	128
  7941  00EA46  6E39               	movwf	drawtext@cursor_x,c
  7942  00EA48  D000               	goto	l2737
  7943  00EA4A                     l2737:
  7944  00EA4A  4A36               	infsnz	drawtext@i,f,c
  7945  00EA4C  2A37               	incf	drawtext@i+1,f,c
  7946  00EA4E  D000               	goto	l2739
  7947  00EA50                     l2739:
  7948  00EA50  5033               	movf	drawtext@textsize,w,c
  7949  00EA52  5C36               	subwf	drawtext@i,w,c
  7950  00EA54  5034               	movf	drawtext@textsize+1,w,c
  7951  00EA56  5837               	subwfb	drawtext@i+1,w,c
  7952  00EA58  A0D8               	btfss	status,0,c
  7953  00EA5A  D7A6               	goto	l2713
  7954  00EA5C  0012               	return		;funcret
  7955  00EA5E                     __end_of_drawtext:
  7956                           	opt stack 0
  7957                           tblptru	equ	0xFF8
  7958                           tblptrh	equ	0xFF7
  7959                           tblptrl	equ	0xFF6
  7960                           tablat	equ	0xFF5
  7961                           prodh	equ	0xFF4
  7962                           prodl	equ	0xFF3
  7963                           intcon2	equ	0xFF1
  7964                           postinc0	equ	0xFEE
  7965                           wreg	equ	0xFE8
  7966                           postdec1	equ	0xFE5
  7967                           fsr1l	equ	0xFE1
  7968                           indf2	equ	0xFDF
  7969                           postinc2	equ	0xFDE
  7970                           fsr2h	equ	0xFDA
  7971                           fsr2l	equ	0xFD9
  7972                           status	equ	0xFD8
  7973                           
  7974 ;; *************** function _strlen *****************
  7975 ;; Defined at:
  7976 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  7977 ;; Parameters:    Size  Location     Type
  7978 ;;  s               2    0[COMRAM] PTR const unsigned char 
  7979 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  7980 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  7981 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  7982 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  7983 ;; Auto vars:     Size  Location     Type
  7984 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  7985 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  7986 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  7987 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  7988 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  7989 ;; Return value:  Size  Location     Type
  7990 ;;                  2    0[COMRAM] unsigned int 
  7991 ;; Registers used:
  7992 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7993 ;; Tracked objects:
  7994 ;;		On entry : 0/0
  7995 ;;		On exit  : 0/0
  7996 ;;		Unchanged: 0/0
  7997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7998 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7999 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8000 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8001 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8002 ;;Total ram usage:        6 bytes
  8003 ;; Hardware stack levels used:    1
  8004 ;; This function calls:
  8005 ;;		Nothing
  8006 ;; This function is called by:
  8007 ;;		_drawtext
  8008 ;; This function uses a non-reentrant model
  8009 ;;
  8010                           
  8011                           	psect	text39
  8012  00DD24                     __ptext39:
  8013                           	opt stack 0
  8014  00DD24                     _strlen:
  8015                           	opt stack 26
  8016                           
  8017                           ;incstack = 0
  8018  00DD24  C001  F005         	movff	strlen@s,strlen@cp
  8019  00DD28  C002  F006         	movff	strlen@s+1,strlen@cp+1
  8020  00DD2C  D003               	goto	l2663
  8021  00DD2E                     l2661:
  8022  00DD2E  4A05               	infsnz	strlen@cp,f,c
  8023  00DD30  2A06               	incf	strlen@cp+1,f,c
  8024  00DD32  D000               	goto	l2663
  8025  00DD34                     l2663:
  8026  00DD34  C005  FFD9         	movff	strlen@cp,fsr2l
  8027  00DD38  C006  FFDA         	movff	strlen@cp+1,fsr2h
  8028  00DD3C  50DF               	movf	indf2,w,c
  8029  00DD3E  A4D8               	btfss	status,2,c
  8030  00DD40  D7F6               	goto	l2661
  8031  00DD42  C001  F003         	movff	strlen@s,??_strlen
  8032  00DD46  C002  F004         	movff	strlen@s+1,??_strlen+1
  8033  00DD4A  1E03               	comf	??_strlen,f,c
  8034  00DD4C  1E04               	comf	??_strlen+1,f,c
  8035  00DD4E  4A03               	infsnz	??_strlen,f,c
  8036  00DD50  2A04               	incf	??_strlen+1,f,c
  8037  00DD52  5005               	movf	strlen@cp,w,c
  8038  00DD54  2403               	addwf	??_strlen,w,c
  8039  00DD56  6E01               	movwf	?_strlen,c
  8040  00DD58  5006               	movf	strlen@cp+1,w,c
  8041  00DD5A  2004               	addwfc	??_strlen+1,w,c
  8042  00DD5C  6E02               	movwf	?_strlen+1,c
  8043  00DD5E  D000               	goto	l1085
  8044  00DD60                     l1085:
  8045  00DD60  0012               	return		;funcret
  8046  00DD62                     __end_of_strlen:
  8047                           	opt stack 0
  8048                           tblptru	equ	0xFF8
  8049                           tblptrh	equ	0xFF7
  8050                           tblptrl	equ	0xFF6
  8051                           tablat	equ	0xFF5
  8052                           prodh	equ	0xFF4
  8053                           prodl	equ	0xFF3
  8054                           intcon2	equ	0xFF1
  8055                           postinc0	equ	0xFEE
  8056                           wreg	equ	0xFE8
  8057                           postdec1	equ	0xFE5
  8058                           fsr1l	equ	0xFE1
  8059                           indf2	equ	0xFDF
  8060                           postinc2	equ	0xFDE
  8061                           fsr2h	equ	0xFDA
  8062                           fsr2l	equ	0xFD9
  8063                           status	equ	0xFD8
  8064                           
  8065 ;; *************** function _drawChar *****************
  8066 ;; Defined at:
  8067 ;;		line 573 in file "Lab8.c"
  8068 ;; Parameters:    Size  Location     Type
  8069 ;;  x               1    wreg     unsigned char 
  8070 ;;  y               1   29[COMRAM] unsigned char 
  8071 ;;  c               1   30[COMRAM] unsigned char 
  8072 ;;  color           2   31[COMRAM] unsigned int 
  8073 ;;  bg              2   33[COMRAM] unsigned int 
  8074 ;;  size            1   35[COMRAM] unsigned char 
  8075 ;; Auto vars:     Size  Location     Type
  8076 ;;  x               1   37[COMRAM] unsigned char 
  8077 ;;  line            1   36[COMRAM] unsigned char 
  8078 ;;  i               1   39[COMRAM] unsigned char 
  8079 ;;  j               1   38[COMRAM] unsigned char 
  8080 ;; Return value:  Size  Location     Type
  8081 ;;		None               void
  8082 ;; Registers used:
  8083 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8084 ;; Tracked objects:
  8085 ;;		On entry : 0/0
  8086 ;;		On exit  : 0/0
  8087 ;;		Unchanged: 0/0
  8088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8089 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8090 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8092 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8093 ;;Total ram usage:       11 bytes
  8094 ;; Hardware stack levels used:    1
  8095 ;; Hardware stack levels required when called:    5
  8096 ;; This function calls:
  8097 ;;		___wmul
  8098 ;;		_drawPixel
  8099 ;;		_fillRect
  8100 ;; This function is called by:
  8101 ;;		_drawtext
  8102 ;; This function uses a non-reentrant model
  8103 ;;
  8104                           
  8105                           	psect	text40
  8106  00EE7A                     __ptext40:
  8107                           	opt stack 0
  8108  00EE7A                     _drawChar:
  8109                           	opt stack 21
  8110                           
  8111                           ;incstack = 0
  8112                           ;drawChar@x stored from wreg
  8113  00EE7A  6E26               	movwf	drawChar@x,c
  8114                           
  8115                           ;Lab8.c: 575: char i, j;
  8116                           ;Lab8.c: 576: if((x >= 128) || (y >= 160))
  8117  00EE7C  0E80               	movlw	128
  8118  00EE7E  6026               	cpfslt	drawChar@x,c
  8119  00EE80  D0A6               	goto	l191
  8120  00EE82  0E9F               	movlw	159
  8121  00EE84  641E               	cpfsgt	drawChar@y,c
  8122  00EE86  D001               	goto	l2609
  8123                           
  8124                           ;Lab8.c: 577: return;
  8125  00EE88  D0A2               	goto	l191
  8126  00EE8A                     l2609:
  8127                           
  8128                           ;Lab8.c: 578: if(size < 1) size = 1;
  8129  00EE8A  5024               	movf	drawChar@size,w,c
  8130  00EE8C  A4D8               	btfss	status,2,c
  8131  00EE8E  D003               	goto	l2613
  8132  00EE90  0E01               	movlw	1
  8133  00EE92  6E24               	movwf	drawChar@size,c
  8134  00EE94  D000               	goto	l2613
  8135  00EE96                     l2613:
  8136                           
  8137                           ;Lab8.c: 579: if((c < ' ') || (c > '~'))
  8138  00EE96  0E1F               	movlw	31
  8139  00EE98  641F               	cpfsgt	drawChar@c,c
  8140  00EE9A  D004               	goto	l2617
  8141  00EE9C  0E7E               	movlw	126
  8142  00EE9E  641F               	cpfsgt	drawChar@c,c
  8143  00EEA0  D003               	goto	l193
  8144  00EEA2  D000               	goto	l2617
  8145  00EEA4                     l2617:
  8146                           
  8147                           ;Lab8.c: 580: c = '?';
  8148  00EEA4  0E3F               	movlw	63
  8149  00EEA6  6E1F               	movwf	drawChar@c,c
  8150  00EEA8                     l193:
  8151                           
  8152                           ;Lab8.c: 581: for(i=0; i<5; i++ ) {
  8153  00EEA8  0E00               	movlw	0
  8154  00EEAA  6E28               	movwf	drawChar@i,c
  8155  00EEAC                     l2619:
  8156  00EEAC  0E04               	movlw	4
  8157  00EEAE  6428               	cpfsgt	drawChar@i,c
  8158  00EEB0  D001               	goto	l2623
  8159  00EEB2  D08D               	goto	l191
  8160  00EEB4                     l2623:
  8161                           
  8162                           ;Lab8.c: 582: unsigned char line;
  8163                           ;Lab8.c: 583: if(c < 'S')
  8164  00EEB4  0E53               	movlw	83
  8165  00EEB6  601F               	cpfslt	drawChar@c,c
  8166  00EEB8  D015               	goto	l2627
  8167                           
  8168                           ;Lab8.c: 584: line = font[(c - 32)*5 + i];
  8169  00EEBA  0EE0               	movlw	224
  8170  00EEBC  241F               	addwf	drawChar@c,w,c
  8171  00EEBE  6E01               	movwf	___wmul@multiplier,c
  8172  00EEC0  6A02               	clrf	___wmul@multiplier+1,c
  8173  00EEC2  0EFF               	movlw	255
  8174  00EEC4  2202               	addwfc	___wmul@multiplier+1,f,c
  8175  00EEC6  0E00               	movlw	0
  8176  00EEC8  6E04               	movwf	___wmul@multiplicand+1,c
  8177  00EECA  0E05               	movlw	5
  8178  00EECC  6E03               	movwf	___wmul@multiplicand,c
  8179  00EECE  ECEA  F06D         	call	___wmul	;wreg free
  8180  00EED2  5028               	movf	drawChar@i,w,c
  8181  00EED4  2601               	addwf	?___wmul,f,c
  8182  00EED6  0E00               	movlw	0
  8183  00EED8  2202               	addwfc	?___wmul+1,f,c
  8184  00EEDA  0EBB               	movlw	low _font
  8185  00EEDC  2401               	addwf	?___wmul,w,c
  8186  00EEDE  6EF6               	movwf	tblptrl,c
  8187  00EEE0  0EFD               	movlw	high _font
  8188  00EEE2  D014               	goto	L13
  8189  00EEE4                     l2627:
  8190                           
  8191                           ;Lab8.c: 585: else
  8192                           ;Lab8.c: 586: line = font2[(c - 'S')*5 + i];
  8193  00EEE4  0EAD               	movlw	173
  8194  00EEE6  241F               	addwf	drawChar@c,w,c
  8195  00EEE8  6E01               	movwf	___wmul@multiplier,c
  8196  00EEEA  6A02               	clrf	___wmul@multiplier+1,c
  8197  00EEEC  0EFF               	movlw	255
  8198  00EEEE  2202               	addwfc	___wmul@multiplier+1,f,c
  8199  00EEF0  0E00               	movlw	0
  8200  00EEF2  6E04               	movwf	___wmul@multiplicand+1,c
  8201  00EEF4  0E05               	movlw	5
  8202  00EEF6  6E03               	movwf	___wmul@multiplicand,c
  8203  00EEF8  ECEA  F06D         	call	___wmul	;wreg free
  8204  00EEFC  5028               	movf	drawChar@i,w,c
  8205  00EEFE  2601               	addwf	?___wmul,f,c
  8206  00EF00  0E00               	movlw	0
  8207  00EF02  2202               	addwfc	?___wmul+1,f,c
  8208  00EF04  0EBA               	movlw	low _font2
  8209  00EF06  2401               	addwf	?___wmul,w,c
  8210  00EF08  6EF6               	movwf	tblptrl,c
  8211  00EF0A  0EFE               	movlw	high _font2
  8212  00EF0C                     L13:
  8213  00EF0C  2002               	addwfc	?___wmul+1,w,c
  8214  00EF0E  6EF7               	movwf	tblptrh,c
  8215  00EF10                     	if	0	;There are less than 3 active tblptr bytes
  8216  00EF10                     	endif
  8217  00EF10  0008               	tblrd		*
  8218  00EF12  CFF5 F025          	movff	tablat,drawChar@line
  8219  00EF16  D000               	goto	l2629
  8220  00EF18                     l2629:
  8221                           
  8222                           ;Lab8.c: 587: for(j=0; j<7; j++, line >>= 1) {
  8223  00EF18  0E00               	movlw	0
  8224  00EF1A  6E27               	movwf	drawChar@j,c
  8225  00EF1C                     l2631:
  8226  00EF1C  0E06               	movlw	6
  8227  00EF1E  6427               	cpfsgt	drawChar@j,c
  8228  00EF20  D001               	goto	l200
  8229  00EF22  D053               	goto	l2655
  8230  00EF24                     l200:
  8231                           
  8232                           ;Lab8.c: 588: if(line & 0x01) {
  8233  00EF24  A025               	btfss	drawChar@line,0,c
  8234  00EF26  D023               	goto	l2641
  8235                           
  8236                           ;Lab8.c: 589: if(size == 1) drawPixel(x+i, y+j, color);
  8237  00EF28  0424               	decf	drawChar@size,w,c
  8238  00EF2A  A4D8               	btfss	status,2,c
  8239  00EF2C  D00C               	goto	l2639
  8240  00EF2E  501E               	movf	drawChar@y,w,c
  8241  00EF30  2427               	addwf	drawChar@j,w,c
  8242  00EF32  6E08               	movwf	drawPixel@y,c
  8243  00EF34  C020  F009         	movff	drawChar@color,drawPixel@color
  8244  00EF38  C021  F00A         	movff	drawChar@color+1,drawPixel@color+1
  8245  00EF3C  5026               	movf	drawChar@x,w,c
  8246  00EF3E  2428               	addwf	drawChar@i,w,c
  8247  00EF40  EC2A  F06E         	call	_drawPixel
  8248  00EF44  D03E               	goto	l2649
  8249  00EF46                     l2639:
  8250                           
  8251                           ;Lab8.c: 590: else fillRect(x+(i*size), y+(j*size), size, size, color);
  8252  00EF46  5027               	movf	drawChar@j,w,c
  8253  00EF48  0224               	mulwf	drawChar@size,c
  8254  00EF4A  50F3               	movf	prodl,w,c
  8255  00EF4C  241E               	addwf	drawChar@y,w,c
  8256  00EF4E  6E13               	movwf	fillRect@y,c
  8257  00EF50  C024  F014         	movff	drawChar@size,fillRect@w
  8258  00EF54  C024  F015         	movff	drawChar@size,fillRect@h
  8259  00EF58  C020  F016         	movff	drawChar@color,fillRect@color
  8260  00EF5C  C021  F017         	movff	drawChar@color+1,fillRect@color+1
  8261  00EF60  5028               	movf	drawChar@i,w,c
  8262  00EF62  0224               	mulwf	drawChar@size,c
  8263  00EF64  50F3               	movf	prodl,w,c
  8264  00EF66  2426               	addwf	drawChar@x,w,c
  8265  00EF68  EC79  F06F         	call	_fillRect
  8266                           
  8267                           ;Lab8.c: 591: }
  8268  00EF6C  D02A               	goto	l2649
  8269  00EF6E                     l2641:
  8270                           
  8271                           ;Lab8.c: 592: else if(bg != color) {
  8272  00EF6E  5020               	movf	drawChar@color,w,c
  8273  00EF70  1822               	xorwf	drawChar@bg,w,c
  8274  00EF72  E104               	bnz	u1460
  8275  00EF74  5021               	movf	drawChar@color+1,w,c
  8276  00EF76  1823               	xorwf	drawChar@bg+1,w,c
  8277  00EF78  B4D8               	btfsc	status,2,c
  8278  00EF7A  D023               	goto	l2649
  8279  00EF7C                     u1460:
  8280                           
  8281                           ;Lab8.c: 593: if(size == 1) drawPixel(x+i, y+j, bg);
  8282  00EF7C  0424               	decf	drawChar@size,w,c
  8283  00EF7E  A4D8               	btfss	status,2,c
  8284  00EF80  D00C               	goto	l2647
  8285  00EF82  501E               	movf	drawChar@y,w,c
  8286  00EF84  2427               	addwf	drawChar@j,w,c
  8287  00EF86  6E08               	movwf	drawPixel@y,c
  8288  00EF88  C022  F009         	movff	drawChar@bg,drawPixel@color
  8289  00EF8C  C023  F00A         	movff	drawChar@bg+1,drawPixel@color+1
  8290  00EF90  5026               	movf	drawChar@x,w,c
  8291  00EF92  2428               	addwf	drawChar@i,w,c
  8292  00EF94  EC2A  F06E         	call	_drawPixel
  8293  00EF98  D014               	goto	l2649
  8294  00EF9A                     l2647:
  8295                           
  8296                           ;Lab8.c: 594: else fillRect(x+i*size, y+j*size, size, size, bg);
  8297  00EF9A  5027               	movf	drawChar@j,w,c
  8298  00EF9C  0224               	mulwf	drawChar@size,c
  8299  00EF9E  50F3               	movf	prodl,w,c
  8300  00EFA0  241E               	addwf	drawChar@y,w,c
  8301  00EFA2  6E13               	movwf	fillRect@y,c
  8302  00EFA4  C024  F014         	movff	drawChar@size,fillRect@w
  8303  00EFA8  C024  F015         	movff	drawChar@size,fillRect@h
  8304  00EFAC  C022  F016         	movff	drawChar@bg,fillRect@color
  8305  00EFB0  C023  F017         	movff	drawChar@bg+1,fillRect@color+1
  8306  00EFB4  5028               	movf	drawChar@i,w,c
  8307  00EFB6  0224               	mulwf	drawChar@size,c
  8308  00EFB8  50F3               	movf	prodl,w,c
  8309  00EFBA  2426               	addwf	drawChar@x,w,c
  8310  00EFBC  EC79  F06F         	call	_fillRect
  8311  00EFC0  D000               	goto	l2649
  8312  00EFC2                     l2649:
  8313  00EFC2  2A27               	incf	drawChar@j,f,c
  8314  00EFC4  90D8               	bcf	status,0,c
  8315  00EFC6  3225               	rrcf	drawChar@line,f,c
  8316  00EFC8  D7A9               	goto	l2631
  8317  00EFCA                     l2655:
  8318  00EFCA  2A28               	incf	drawChar@i,f,c
  8319  00EFCC  D76F               	goto	l2619
  8320  00EFCE                     l191:
  8321  00EFCE  0012               	return		;funcret
  8322  00EFD0                     __end_of_drawChar:
  8323                           	opt stack 0
  8324                           tblptru	equ	0xFF8
  8325                           tblptrh	equ	0xFF7
  8326                           tblptrl	equ	0xFF6
  8327                           tablat	equ	0xFF5
  8328                           prodh	equ	0xFF4
  8329                           prodl	equ	0xFF3
  8330                           intcon2	equ	0xFF1
  8331                           postinc0	equ	0xFEE
  8332                           wreg	equ	0xFE8
  8333                           postdec1	equ	0xFE5
  8334                           fsr1l	equ	0xFE1
  8335                           indf2	equ	0xFDF
  8336                           postinc2	equ	0xFDE
  8337                           fsr2h	equ	0xFDA
  8338                           fsr2l	equ	0xFD9
  8339                           status	equ	0xFD8
  8340                           
  8341 ;; *************** function _fillRect *****************
  8342 ;; Defined at:
  8343 ;;		line 563 in file "Lab8.c"
  8344 ;; Parameters:    Size  Location     Type
  8345 ;;  x               1    wreg     unsigned char 
  8346 ;;  y               1   18[COMRAM] unsigned char 
  8347 ;;  w               1   19[COMRAM] unsigned char 
  8348 ;;  h               1   20[COMRAM] unsigned char 
  8349 ;;  color           2   21[COMRAM] unsigned int 
  8350 ;; Auto vars:     Size  Location     Type
  8351 ;;  x               1   26[COMRAM] unsigned char 
  8352 ;;  i               2   27[COMRAM] int 
  8353 ;; Return value:  Size  Location     Type
  8354 ;;		None               void
  8355 ;; Registers used:
  8356 ;;		wreg, status,2, status,0, cstack
  8357 ;; Tracked objects:
  8358 ;;		On entry : 0/0
  8359 ;;		On exit  : 0/0
  8360 ;;		Unchanged: 0/0
  8361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8362 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8363 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8364 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8365 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8366 ;;Total ram usage:       11 bytes
  8367 ;; Hardware stack levels used:    1
  8368 ;; Hardware stack levels required when called:    4
  8369 ;; This function calls:
  8370 ;;		_drawFastVLine
  8371 ;; This function is called by:
  8372 ;;		_drawChar
  8373 ;; This function uses a non-reentrant model
  8374 ;;
  8375                           
  8376                           	psect	text41
  8377  00DEF2                     __ptext41:
  8378                           	opt stack 0
  8379  00DEF2                     _fillRect:
  8380                           	opt stack 21
  8381                           
  8382                           ;incstack = 0
  8383                           ;fillRect@x stored from wreg
  8384  00DEF2  6E1B               	movwf	fillRect@x,c
  8385                           
  8386                           ;Lab8.c: 565: signed int i;
  8387                           ;Lab8.c: 567: for (i = x; i < x + w; i++)
  8388  00DEF4  C01B  F01C         	movff	fillRect@x,fillRect@i
  8389  00DEF8  6A1D               	clrf	fillRect@i+1,c
  8390  00DEFA  D00E               	goto	l2597
  8391  00DEFC                     l2593:
  8392                           
  8393                           ;Lab8.c: 568: {
  8394                           ;Lab8.c: 569: drawFastVLine(i, y, h, color);
  8395  00DEFC  C013  F008         	movff	fillRect@y,drawFastVLine@y
  8396  00DF00  C015  F009         	movff	fillRect@h,drawFastVLine@h
  8397  00DF04  C016  F00A         	movff	fillRect@color,drawFastVLine@color
  8398  00DF08  C017  F00B         	movff	fillRect@color+1,drawFastVLine@color+1
  8399  00DF0C  501C               	movf	fillRect@i,w,c
  8400  00DF0E  EC04  F071         	call	_drawFastVLine
  8401  00DF12  4A1C               	infsnz	fillRect@i,f,c
  8402  00DF14  2A1D               	incf	fillRect@i+1,f,c
  8403  00DF16  D000               	goto	l2597
  8404  00DF18                     l2597:
  8405  00DF18  5014               	movf	fillRect@w,w,c
  8406  00DF1A  C01B  F018         	movff	fillRect@x,??_fillRect
  8407  00DF1E  6A19               	clrf	(??_fillRect+1)& (0+255),c
  8408  00DF20  2618               	addwf	??_fillRect,f,c
  8409  00DF22  0E00               	movlw	0
  8410  00DF24  2219               	addwfc	??_fillRect+1,f,c
  8411  00DF26  5018               	movf	??_fillRect,w,c
  8412  00DF28  5C1C               	subwf	fillRect@i,w,c
  8413  00DF2A  501D               	movf	fillRect@i+1,w,c
  8414  00DF2C  0A80               	xorlw	128
  8415  00DF2E  6E1A               	movwf	(??_fillRect+2)& (0+255),c
  8416  00DF30  5019               	movf	??_fillRect+1,w,c
  8417  00DF32  0A80               	xorlw	128
  8418  00DF34  581A               	subwfb	(??_fillRect+2)& (0+255),w,c
  8419  00DF36  A0D8               	btfss	status,0,c
  8420  00DF38  D7E1               	goto	l2593
  8421  00DF3A  0012               	return		;funcret
  8422  00DF3C                     __end_of_fillRect:
  8423                           	opt stack 0
  8424                           tblptru	equ	0xFF8
  8425                           tblptrh	equ	0xFF7
  8426                           tblptrl	equ	0xFF6
  8427                           tablat	equ	0xFF5
  8428                           prodh	equ	0xFF4
  8429                           prodl	equ	0xFF3
  8430                           intcon2	equ	0xFF1
  8431                           postinc0	equ	0xFEE
  8432                           wreg	equ	0xFE8
  8433                           postdec1	equ	0xFE5
  8434                           fsr1l	equ	0xFE1
  8435                           indf2	equ	0xFDF
  8436                           postinc2	equ	0xFDE
  8437                           fsr2h	equ	0xFDA
  8438                           fsr2l	equ	0xFD9
  8439                           status	equ	0xFD8
  8440                           
  8441 ;; *************** function _drawFastVLine *****************
  8442 ;; Defined at:
  8443 ;;		line 542 in file "Lab8.c"
  8444 ;; Parameters:    Size  Location     Type
  8445 ;;  x               1    wreg     unsigned char 
  8446 ;;  y               1    7[COMRAM] unsigned char 
  8447 ;;  h               1    8[COMRAM] unsigned char 
  8448 ;;  color           2    9[COMRAM] unsigned int 
  8449 ;; Auto vars:     Size  Location     Type
  8450 ;;  x               1   17[COMRAM] unsigned char 
  8451 ;;  lo              1   16[COMRAM] unsigned char 
  8452 ;;  hi              1   15[COMRAM] unsigned char 
  8453 ;; Return value:  Size  Location     Type
  8454 ;;		None               void
  8455 ;; Registers used:
  8456 ;;		wreg, status,2, status,0, cstack
  8457 ;; Tracked objects:
  8458 ;;		On entry : 0/0
  8459 ;;		On exit  : 0/0
  8460 ;;		Unchanged: 0/0
  8461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8462 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8463 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8464 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8465 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8466 ;;Total ram usage:       11 bytes
  8467 ;; Hardware stack levels used:    1
  8468 ;; Hardware stack levels required when called:    3
  8469 ;; This function calls:
  8470 ;;		_setAddrWindow
  8471 ;;		_spiwrite
  8472 ;; This function is called by:
  8473 ;;		_fillRect
  8474 ;;		_fillCircleHelper
  8475 ;;		_fillCircle
  8476 ;;		_drawRect
  8477 ;; This function uses a non-reentrant model
  8478 ;;
  8479                           
  8480                           	psect	text42
  8481  00E208                     __ptext42:
  8482                           	opt stack 0
  8483  00E208                     _drawFastVLine:
  8484                           	opt stack 21
  8485                           
  8486                           ;incstack = 0
  8487                           ;drawFastVLine@x stored from wreg
  8488  00E208  6E12               	movwf	drawFastVLine@x,c
  8489                           
  8490                           ;Lab8.c: 544: unsigned char hi, lo;
  8491                           ;Lab8.c: 545: if((x >= 128) || (y >= 160))
  8492  00E20A  0E80               	movlw	128
  8493  00E20C  6012               	cpfslt	drawFastVLine@x,c
  8494  00E20E  D03F               	goto	l175
  8495  00E210  0E9F               	movlw	159
  8496  00E212  6408               	cpfsgt	drawFastVLine@y,c
  8497  00E214  D001               	goto	l2563
  8498                           
  8499                           ;Lab8.c: 546: return;
  8500  00E216  D03B               	goto	l175
  8501  00E218                     l2563:
  8502                           
  8503                           ;Lab8.c: 547: if((y + h - 1) >= 160)
  8504  00E218  0EFF               	movlw	255
  8505  00E21A  6E0C               	movwf	??_drawFastVLine& (0+255),c
  8506  00E21C  0EFF               	movlw	255
  8507  00E21E  6E0D               	movwf	(??_drawFastVLine+1)& (0+255),c
  8508  00E220  5009               	movf	drawFastVLine@h,w,c
  8509  00E222  C008  F00E         	movff	drawFastVLine@y,??_drawFastVLine+2
  8510  00E226  6A0F               	clrf	(??_drawFastVLine+3)& (0+255),c
  8511  00E228  260E               	addwf	??_drawFastVLine+2,f,c
  8512  00E22A  0E00               	movlw	0
  8513  00E22C  220F               	addwfc	??_drawFastVLine+3,f,c
  8514  00E22E  500C               	movf	??_drawFastVLine,w,c
  8515  00E230  260E               	addwf	??_drawFastVLine+2,f,c
  8516  00E232  500D               	movf	??_drawFastVLine+1,w,c
  8517  00E234  220F               	addwfc	??_drawFastVLine+3,f,c
  8518  00E236  BE0F               	btfsc	??_drawFastVLine+3,7,c
  8519  00E238  D00B               	goto	l2567
  8520  00E23A  500F               	movf	??_drawFastVLine+3,w,c
  8521  00E23C  E104               	bnz	u1310
  8522  00E23E  0EA0               	movlw	160
  8523  00E240  5C0E               	subwf	??_drawFastVLine+2,w,c
  8524  00E242  A0D8               	btfss	status,0,c
  8525  00E244  D005               	goto	l2567
  8526  00E246                     u1310:
  8527                           
  8528                           ;Lab8.c: 548: h = 160 - y;
  8529  00E246  5008               	movf	drawFastVLine@y,w,c
  8530  00E248  0800               	sublw	0
  8531  00E24A  0FA0               	addlw	160
  8532  00E24C  6E09               	movwf	drawFastVLine@h,c
  8533  00E24E  D000               	goto	l2567
  8534  00E250                     l2567:
  8535                           
  8536                           ;Lab8.c: 549: hi = color >> 8; lo = color;
  8537  00E250  500B               	movf	drawFastVLine@color+1,w,c
  8538  00E252  6E10               	movwf	drawFastVLine@hi,c
  8539  00E254  C00A  F011         	movff	drawFastVLine@color,drawFastVLine@lo
  8540                           
  8541                           ;Lab8.c: 550: setAddrWindow(x, y, x, y + h - 1);
  8542  00E258  C008  F004         	movff	drawFastVLine@y,setAddrWindow@y0
  8543  00E25C  C012  F005         	movff	drawFastVLine@x,setAddrWindow@x1
  8544  00E260  5008               	movf	drawFastVLine@y,w,c
  8545  00E262  2409               	addwf	drawFastVLine@h,w,c
  8546  00E264  6E0C               	movwf	??_drawFastVLine& (0+255),c
  8547  00E266  040C               	decf	??_drawFastVLine,w,c
  8548  00E268  6E06               	movwf	setAddrWindow@y1,c
  8549  00E26A  5012               	movf	drawFastVLine@x,w,c
  8550  00E26C  EC9E  F06F         	call	_setAddrWindow
  8551                           
  8552                           ;Lab8.c: 551: PORTDbits.RD0 = 1;
  8553  00E270  8083               	bsf	3971,0,c	;volatile
  8554                           
  8555                           ;Lab8.c: 552: PORTDbits.RD1 = 0;
  8556  00E272  9283               	bcf	3971,1,c	;volatile
  8557                           
  8558                           ;Lab8.c: 554: while (h--) {
  8559  00E274  D007               	goto	l2579
  8560  00E276                     l2577:
  8561                           
  8562                           ;Lab8.c: 555: spiwrite(hi);
  8563  00E276  5010               	movf	drawFastVLine@hi,w,c
  8564  00E278  EC80  F06D         	call	_spiwrite
  8565                           
  8566                           ;Lab8.c: 556: spiwrite(lo);
  8567  00E27C  5011               	movf	drawFastVLine@lo,w,c
  8568  00E27E  EC80  F06D         	call	_spiwrite
  8569  00E282  D000               	goto	l2579
  8570  00E284                     l2579:
  8571  00E284  0609               	decf	drawFastVLine@h,f,c
  8572  00E286  2809               	incf	drawFastVLine@h,w,c
  8573  00E288  A4D8               	btfss	status,2,c
  8574  00E28A  D7F5               	goto	l2577
  8575                           
  8576                           ;Lab8.c: 557: }
  8577                           ;Lab8.c: 558: PORTDbits.RD1 = 1;
  8578  00E28C  8283               	bsf	3971,1,c	;volatile
  8579  00E28E                     l175:
  8580  00E28E  0012               	return		;funcret
  8581  00E290                     __end_of_drawFastVLine:
  8582                           	opt stack 0
  8583                           tblptru	equ	0xFF8
  8584                           tblptrh	equ	0xFF7
  8585                           tblptrl	equ	0xFF6
  8586                           tablat	equ	0xFF5
  8587                           prodh	equ	0xFF4
  8588                           prodl	equ	0xFF3
  8589                           intcon2	equ	0xFF1
  8590                           postinc0	equ	0xFEE
  8591                           wreg	equ	0xFE8
  8592                           postdec1	equ	0xFE5
  8593                           fsr1l	equ	0xFE1
  8594                           indf2	equ	0xFDF
  8595                           postinc2	equ	0xFDE
  8596                           fsr2h	equ	0xFDA
  8597                           fsr2l	equ	0xFD9
  8598                           status	equ	0xFD8
  8599                           
  8600 ;; *************** function _drawPixel *****************
  8601 ;; Defined at:
  8602 ;;		line 533 in file "Lab8.c"
  8603 ;; Parameters:    Size  Location     Type
  8604 ;;  x               1    wreg     unsigned char 
  8605 ;;  y               1    7[COMRAM] unsigned char 
  8606 ;;  color           2    8[COMRAM] unsigned int 
  8607 ;; Auto vars:     Size  Location     Type
  8608 ;;  x               1   10[COMRAM] unsigned char 
  8609 ;; Return value:  Size  Location     Type
  8610 ;;		None               void
  8611 ;; Registers used:
  8612 ;;		wreg, status,2, status,0, cstack
  8613 ;; Tracked objects:
  8614 ;;		On entry : 0/0
  8615 ;;		On exit  : 0/0
  8616 ;;		Unchanged: 0/0
  8617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8618 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8619 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8621 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8622 ;;Total ram usage:        4 bytes
  8623 ;; Hardware stack levels used:    1
  8624 ;; Hardware stack levels required when called:    3
  8625 ;; This function calls:
  8626 ;;		_setAddrWindow
  8627 ;;		_write_data
  8628 ;; This function is called by:
  8629 ;;		_drawChar
  8630 ;;		_drawCircle
  8631 ;;		_drawCircleHelper
  8632 ;; This function uses a non-reentrant model
  8633 ;;
  8634                           
  8635                           	psect	text43
  8636  00DC54                     __ptext43:
  8637                           	opt stack 0
  8638  00DC54                     _drawPixel:
  8639                           	opt stack 22
  8640                           
  8641                           ;incstack = 0
  8642                           ;drawPixel@x stored from wreg
  8643  00DC54  6E0B               	movwf	drawPixel@x,c
  8644                           
  8645                           ;Lab8.c: 535: if((x >= 128) || (y >= 160))
  8646  00DC56  0E80               	movlw	128
  8647  00DC58  600B               	cpfslt	drawPixel@x,c
  8648  00DC5A  D013               	goto	l169
  8649  00DC5C  0E9F               	movlw	159
  8650  00DC5E  6408               	cpfsgt	drawPixel@y,c
  8651  00DC60  D001               	goto	l2585
  8652                           
  8653                           ;Lab8.c: 536: return;
  8654  00DC62  D00F               	goto	l169
  8655  00DC64                     l2585:
  8656                           
  8657                           ;Lab8.c: 537: setAddrWindow(x,y,x+1,y+1);
  8658  00DC64  C008  F004         	movff	drawPixel@y,setAddrWindow@y0
  8659  00DC68  280B               	incf	drawPixel@x,w,c
  8660  00DC6A  6E05               	movwf	setAddrWindow@x1,c
  8661  00DC6C  2808               	incf	drawPixel@y,w,c
  8662  00DC6E  6E06               	movwf	setAddrWindow@y1,c
  8663  00DC70  500B               	movf	drawPixel@x,w,c
  8664  00DC72  EC9E  F06F         	call	_setAddrWindow
  8665                           
  8666                           ;Lab8.c: 538: write_data(color >> 8);
  8667  00DC76  500A               	movf	drawPixel@color+1,w,c
  8668  00DC78  EC66  F06D         	call	_write_data
  8669                           
  8670                           ;Lab8.c: 539: write_data(color & 0xFF);
  8671  00DC7C  5009               	movf	drawPixel@color,w,c
  8672  00DC7E  EC66  F06D         	call	_write_data
  8673  00DC82                     l169:
  8674  00DC82  0012               	return		;funcret
  8675  00DC84                     __end_of_drawPixel:
  8676                           	opt stack 0
  8677                           tblptru	equ	0xFF8
  8678                           tblptrh	equ	0xFF7
  8679                           tblptrl	equ	0xFF6
  8680                           tablat	equ	0xFF5
  8681                           prodh	equ	0xFF4
  8682                           prodl	equ	0xFF3
  8683                           intcon2	equ	0xFF1
  8684                           postinc0	equ	0xFEE
  8685                           wreg	equ	0xFE8
  8686                           postdec1	equ	0xFE5
  8687                           fsr1l	equ	0xFE1
  8688                           indf2	equ	0xFDF
  8689                           postinc2	equ	0xFDE
  8690                           fsr2h	equ	0xFDA
  8691                           fsr2l	equ	0xFD9
  8692                           status	equ	0xFD8
  8693                           
  8694 ;; *************** function _setAddrWindow *****************
  8695 ;; Defined at:
  8696 ;;		line 518 in file "Lab8.c"
  8697 ;; Parameters:    Size  Location     Type
  8698 ;;  x0              1    wreg     unsigned char 
  8699 ;;  y0              1    3[COMRAM] unsigned char 
  8700 ;;  x1              1    4[COMRAM] unsigned char 
  8701 ;;  y1              1    5[COMRAM] unsigned char 
  8702 ;; Auto vars:     Size  Location     Type
  8703 ;;  x0              1    6[COMRAM] unsigned char 
  8704 ;; Return value:  Size  Location     Type
  8705 ;;		None               void
  8706 ;; Registers used:
  8707 ;;		wreg, status,2, status,0, cstack
  8708 ;; Tracked objects:
  8709 ;;		On entry : 0/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8713 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8714 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8716 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8717 ;;Total ram usage:        4 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; Hardware stack levels required when called:    2
  8720 ;; This function calls:
  8721 ;;		_write_command
  8722 ;;		_write_data
  8723 ;; This function is called by:
  8724 ;;		_drawPixel
  8725 ;;		_drawFastVLine
  8726 ;;		_fillRectangle
  8727 ;;		_drawFastHLine
  8728 ;; This function uses a non-reentrant model
  8729 ;;
  8730                           
  8731                           	psect	text44
  8732  00DF3C                     __ptext44:
  8733                           	opt stack 0
  8734  00DF3C                     _setAddrWindow:
  8735                           	opt stack 21
  8736                           
  8737                           ;incstack = 0
  8738                           ;setAddrWindow@x0 stored from wreg
  8739  00DF3C  6E07               	movwf	setAddrWindow@x0,c
  8740                           
  8741                           ;Lab8.c: 520: write_command(0x2A);
  8742  00DF3E  0E2A               	movlw	42
  8743  00DF40  EC5E  F06D         	call	_write_command
  8744                           
  8745                           ;Lab8.c: 521: write_data(0);
  8746  00DF44  0E00               	movlw	0
  8747  00DF46  EC66  F06D         	call	_write_data
  8748                           
  8749                           ;Lab8.c: 522: write_data(x0 + colstart);
  8750  00DF4A  5007               	movf	setAddrWindow@x0,w,c
  8751  00DF4C  2477               	addwf	_colstart,w,c
  8752  00DF4E  EC66  F06D         	call	_write_data
  8753                           
  8754                           ;Lab8.c: 523: write_data(0);
  8755  00DF52  0E00               	movlw	0
  8756  00DF54  EC66  F06D         	call	_write_data
  8757                           
  8758                           ;Lab8.c: 524: write_data(x1 + colstart);
  8759  00DF58  5005               	movf	setAddrWindow@x1,w,c
  8760  00DF5A  2477               	addwf	_colstart,w,c
  8761  00DF5C  EC66  F06D         	call	_write_data
  8762                           
  8763                           ;Lab8.c: 525: write_command(0x2B);
  8764  00DF60  0E2B               	movlw	43
  8765  00DF62  EC5E  F06D         	call	_write_command
  8766                           
  8767                           ;Lab8.c: 526: write_data(0);
  8768  00DF66  0E00               	movlw	0
  8769  00DF68  EC66  F06D         	call	_write_data
  8770                           
  8771                           ;Lab8.c: 527: write_data(y0 + rowstart);
  8772  00DF6C  5004               	movf	setAddrWindow@y0,w,c
  8773  00DF6E  247A               	addwf	_rowstart,w,c
  8774  00DF70  EC66  F06D         	call	_write_data
  8775                           
  8776                           ;Lab8.c: 528: write_data(0);
  8777  00DF74  0E00               	movlw	0
  8778  00DF76  EC66  F06D         	call	_write_data
  8779                           
  8780                           ;Lab8.c: 529: write_data(y1 + rowstart);
  8781  00DF7A  5006               	movf	setAddrWindow@y1,w,c
  8782  00DF7C  247A               	addwf	_rowstart,w,c
  8783  00DF7E  EC66  F06D         	call	_write_data
  8784                           
  8785                           ;Lab8.c: 530: write_command(0x2C);
  8786  00DF82  0E2C               	movlw	44
  8787  00DF84  EC5E  F06D         	call	_write_command
  8788  00DF88  0012               	return		;funcret
  8789  00DF8A                     __end_of_setAddrWindow:
  8790                           	opt stack 0
  8791                           tblptru	equ	0xFF8
  8792                           tblptrh	equ	0xFF7
  8793                           tblptrl	equ	0xFF6
  8794                           tablat	equ	0xFF5
  8795                           prodh	equ	0xFF4
  8796                           prodl	equ	0xFF3
  8797                           intcon2	equ	0xFF1
  8798                           postinc0	equ	0xFEE
  8799                           wreg	equ	0xFE8
  8800                           postdec1	equ	0xFE5
  8801                           fsr1l	equ	0xFE1
  8802                           indf2	equ	0xFDF
  8803                           postinc2	equ	0xFDE
  8804                           fsr2h	equ	0xFDA
  8805                           fsr2l	equ	0xFD9
  8806                           status	equ	0xFD8
  8807                           
  8808 ;; *************** function _write_data *****************
  8809 ;; Defined at:
  8810 ;;		line 335 in file "Lab8.c"
  8811 ;; Parameters:    Size  Location     Type
  8812 ;;  data_           1    wreg     unsigned char 
  8813 ;; Auto vars:     Size  Location     Type
  8814 ;;  data_           1    2[COMRAM] unsigned char 
  8815 ;; Return value:  Size  Location     Type
  8816 ;;		None               void
  8817 ;; Registers used:
  8818 ;;		wreg, status,2, cstack
  8819 ;; Tracked objects:
  8820 ;;		On entry : 0/0
  8821 ;;		On exit  : 0/0
  8822 ;;		Unchanged: 0/0
  8823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8825 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8827 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8828 ;;Total ram usage:        1 bytes
  8829 ;; Hardware stack levels used:    1
  8830 ;; Hardware stack levels required when called:    1
  8831 ;; This function calls:
  8832 ;;		_spiwrite
  8833 ;; This function is called by:
  8834 ;;		_Rcmd1
  8835 ;;		_Rcmd2red
  8836 ;;		_Rcmd3
  8837 ;;		_setAddrWindow
  8838 ;;		_drawPixel
  8839 ;;		_TFT_GreenTab_Initialize
  8840 ;;		_Bcmd
  8841 ;;		_setScrollDefinition
  8842 ;;		_Rcmd2green
  8843 ;;		_VerticalScroll
  8844 ;; This function uses a non-reentrant model
  8845 ;;
  8846                           
  8847                           	psect	text45
  8848  00DACC                     __ptext45:
  8849                           	opt stack 0
  8850  00DACC                     _write_data:
  8851                           	opt stack 21
  8852                           
  8853                           ;incstack = 0
  8854                           ;write_data@data_ stored from wreg
  8855  00DACC  6E03               	movwf	write_data@data_,c
  8856                           
  8857                           ;Lab8.c: 337: PORTDbits.RD1 = 0;
  8858  00DACE  9283               	bcf	3971,1,c	;volatile
  8859                           
  8860                           ;Lab8.c: 338: PORTDbits.RD0 = 1;
  8861  00DAD0  8083               	bsf	3971,0,c	;volatile
  8862                           
  8863                           ;Lab8.c: 339: spiwrite(data_);
  8864  00DAD2  5003               	movf	write_data@data_,w,c
  8865  00DAD4  EC80  F06D         	call	_spiwrite
  8866                           
  8867                           ;Lab8.c: 340: PORTDbits.RD1 = 1;
  8868  00DAD8  8283               	bsf	3971,1,c	;volatile
  8869  00DADA  0012               	return		;funcret
  8870  00DADC                     __end_of_write_data:
  8871                           	opt stack 0
  8872                           tblptru	equ	0xFF8
  8873                           tblptrh	equ	0xFF7
  8874                           tblptrl	equ	0xFF6
  8875                           tablat	equ	0xFF5
  8876                           prodh	equ	0xFF4
  8877                           prodl	equ	0xFF3
  8878                           intcon2	equ	0xFF1
  8879                           postinc0	equ	0xFEE
  8880                           wreg	equ	0xFE8
  8881                           postdec1	equ	0xFE5
  8882                           fsr1l	equ	0xFE1
  8883                           indf2	equ	0xFDF
  8884                           postinc2	equ	0xFDE
  8885                           fsr2h	equ	0xFDA
  8886                           fsr2l	equ	0xFD9
  8887                           status	equ	0xFD8
  8888                           
  8889 ;; *************** function _write_command *****************
  8890 ;; Defined at:
  8891 ;;		line 324 in file "Lab8.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;  cmd_            1    wreg     unsigned char 
  8894 ;; Auto vars:     Size  Location     Type
  8895 ;;  cmd_            1    2[COMRAM] unsigned char 
  8896 ;; Return value:  Size  Location     Type
  8897 ;;		None               void
  8898 ;; Registers used:
  8899 ;;		wreg, status,2, cstack
  8900 ;; Tracked objects:
  8901 ;;		On entry : 0/0
  8902 ;;		On exit  : 0/0
  8903 ;;		Unchanged: 0/0
  8904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8906 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8908 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8909 ;;Total ram usage:        1 bytes
  8910 ;; Hardware stack levels used:    1
  8911 ;; Hardware stack levels required when called:    1
  8912 ;; This function calls:
  8913 ;;		_spiwrite
  8914 ;; This function is called by:
  8915 ;;		_Rcmd1
  8916 ;;		_Rcmd2red
  8917 ;;		_Rcmd3
  8918 ;;		_setAddrWindow
  8919 ;;		_TFT_GreenTab_Initialize
  8920 ;;		_Bcmd
  8921 ;;		_setScrollDefinition
  8922 ;;		_Rcmd2green
  8923 ;;		_VerticalScroll
  8924 ;; This function uses a non-reentrant model
  8925 ;;
  8926                           
  8927                           	psect	text46
  8928  00DABC                     __ptext46:
  8929                           	opt stack 0
  8930  00DABC                     _write_command:
  8931                           	opt stack 21
  8932                           
  8933                           ;incstack = 0
  8934                           ;write_command@cmd_ stored from wreg
  8935  00DABC  6E03               	movwf	write_command@cmd_,c
  8936                           
  8937                           ;Lab8.c: 326: PORTDbits.RD1 = 0;
  8938  00DABE  9283               	bcf	3971,1,c	;volatile
  8939                           
  8940                           ;Lab8.c: 328: PORTDbits.RD0 = 0;
  8941  00DAC0  9083               	bcf	3971,0,c	;volatile
  8942                           
  8943                           ;Lab8.c: 329: spiwrite(cmd_);
  8944  00DAC2  5003               	movf	write_command@cmd_,w,c
  8945  00DAC4  EC80  F06D         	call	_spiwrite
  8946                           
  8947                           ;Lab8.c: 331: PORTDbits.RD1 = 1;
  8948  00DAC8  8283               	bsf	3971,1,c	;volatile
  8949  00DACA  0012               	return		;funcret
  8950  00DACC                     __end_of_write_command:
  8951                           	opt stack 0
  8952                           tblptru	equ	0xFF8
  8953                           tblptrh	equ	0xFF7
  8954                           tblptrl	equ	0xFF6
  8955                           tablat	equ	0xFF5
  8956                           prodh	equ	0xFF4
  8957                           prodl	equ	0xFF3
  8958                           intcon2	equ	0xFF1
  8959                           postinc0	equ	0xFEE
  8960                           wreg	equ	0xFE8
  8961                           postdec1	equ	0xFE5
  8962                           fsr1l	equ	0xFE1
  8963                           indf2	equ	0xFDF
  8964                           postinc2	equ	0xFDE
  8965                           fsr2h	equ	0xFDA
  8966                           fsr2l	equ	0xFD9
  8967                           status	equ	0xFD8
  8968                           
  8969 ;; *************** function _spiwrite *****************
  8970 ;; Defined at:
  8971 ;;		line 315 in file "Lab8.c"
  8972 ;; Parameters:    Size  Location     Type
  8973 ;;  spidata         1    wreg     unsigned char 
  8974 ;; Auto vars:     Size  Location     Type
  8975 ;;  spidata         1    1[COMRAM] unsigned char 
  8976 ;;  x               1    0[COMRAM] unsigned char 
  8977 ;; Return value:  Size  Location     Type
  8978 ;;		None               void
  8979 ;; Registers used:
  8980 ;;		wreg
  8981 ;; Tracked objects:
  8982 ;;		On entry : 0/0
  8983 ;;		On exit  : 0/0
  8984 ;;		Unchanged: 0/0
  8985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8987 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8989 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8990 ;;Total ram usage:        2 bytes
  8991 ;; Hardware stack levels used:    1
  8992 ;; This function calls:
  8993 ;;		Nothing
  8994 ;; This function is called by:
  8995 ;;		_write_command
  8996 ;;		_write_data
  8997 ;;		_drawFastVLine
  8998 ;;		_fillRectangle
  8999 ;;		_drawFastHLine
  9000 ;; This function uses a non-reentrant model
  9001 ;;
  9002                           
  9003                           	psect	text47
  9004  00DB00                     __ptext47:
  9005                           	opt stack 0
  9006  00DB00                     _spiwrite:
  9007                           	opt stack 23
  9008                           
  9009                           ;incstack = 0
  9010                           ;spiwrite@spidata stored from wreg
  9011  00DB00  6E02               	movwf	spiwrite@spidata,c
  9012                           
  9013                           ;Lab8.c: 317: char x;
  9014                           ;Lab8.c: 318: PIR1bits.SSPIF = 0;
  9015  00DB02  969E               	bcf	3998,3,c	;volatile
  9016                           
  9017                           ;Lab8.c: 319: x = SSPBUF;
  9018  00DB04  CFC9 F001          	movff	4041,spiwrite@x	;volatile
  9019                           
  9020                           ;Lab8.c: 320: SSPBUF = spidata;
  9021  00DB08  C002  FFC9         	movff	spiwrite@spidata,4041	;volatile
  9022                           
  9023                           ;Lab8.c: 321: while (!SSPSTATbits.BF);
  9024  00DB0C  D000               	goto	l125
  9025  00DB0E                     l125:
  9026  00DB0E  A0C7               	btfss	4039,0,c	;volatile
  9027  00DB10  D7FE               	goto	l125
  9028  00DB12  0012               	return		;funcret
  9029  00DB14                     __end_of_spiwrite:
  9030                           	opt stack 0
  9031                           tblptru	equ	0xFF8
  9032                           tblptrh	equ	0xFF7
  9033                           tblptrl	equ	0xFF6
  9034                           tablat	equ	0xFF5
  9035                           prodh	equ	0xFF4
  9036                           prodl	equ	0xFF3
  9037                           intcon2	equ	0xFF1
  9038                           postinc0	equ	0xFEE
  9039                           wreg	equ	0xFE8
  9040                           postdec1	equ	0xFE5
  9041                           fsr1l	equ	0xFE1
  9042                           indf2	equ	0xFDF
  9043                           postinc2	equ	0xFDE
  9044                           fsr2h	equ	0xFDA
  9045                           fsr2l	equ	0xFD9
  9046                           status	equ	0xFD8
  9047                           
  9048 ;; *************** function ___wmul *****************
  9049 ;; Defined at:
  9050 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  9051 ;; Parameters:    Size  Location     Type
  9052 ;;  multiplier      2    0[COMRAM] unsigned int 
  9053 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9054 ;; Auto vars:     Size  Location     Type
  9055 ;;  product         2    4[COMRAM] unsigned int 
  9056 ;; Return value:  Size  Location     Type
  9057 ;;                  2    0[COMRAM] unsigned int 
  9058 ;; Registers used:
  9059 ;;		wreg, status,2, status,0, prodl, prodh
  9060 ;; Tracked objects:
  9061 ;;		On entry : 0/0
  9062 ;;		On exit  : 0/0
  9063 ;;		Unchanged: 0/0
  9064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9065 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9066 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9068 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9069 ;;Total ram usage:        6 bytes
  9070 ;; Hardware stack levels used:    1
  9071 ;; This function calls:
  9072 ;;		Nothing
  9073 ;; This function is called by:
  9074 ;;		_delay_ms
  9075 ;;		_drawChar
  9076 ;;		_main
  9077 ;;		_update_LCD_misc
  9078 ;; This function uses a non-reentrant model
  9079 ;;
  9080                           
  9081                           	psect	text48
  9082  00DBD4                     __ptext48:
  9083                           	opt stack 0
  9084  00DBD4                     ___wmul:
  9085                           	opt stack 30
  9086                           
  9087                           ;incstack = 0
  9088  00DBD4  5001               	movf	___wmul@multiplier,w,c
  9089  00DBD6  0203               	mulwf	___wmul@multiplicand,c
  9090  00DBD8  CFF3 F005          	movff	prodl,___wmul@product
  9091  00DBDC  CFF4 F006          	movff	prodh,___wmul@product+1
  9092  00DBE0  5001               	movf	___wmul@multiplier,w,c
  9093  00DBE2  0204               	mulwf	___wmul@multiplicand+1,c
  9094  00DBE4  50F3               	movf	prodl,w,c
  9095  00DBE6  2606               	addwf	___wmul@product+1,f,c
  9096  00DBE8  5002               	movf	___wmul@multiplier+1,w,c
  9097  00DBEA  0203               	mulwf	___wmul@multiplicand,c
  9098  00DBEC  50F3               	movf	prodl,w,c
  9099  00DBEE  2606               	addwf	___wmul@product+1,f,c
  9100  00DBF0  C005  F001         	movff	___wmul@product,?___wmul
  9101  00DBF4  C006  F002         	movff	___wmul@product+1,?___wmul+1
  9102  00DBF8  D000               	goto	l528
  9103  00DBFA                     l528:
  9104  00DBFA  0012               	return		;funcret
  9105  00DBFC                     __end_of___wmul:
  9106                           	opt stack 0
  9107                           tblptru	equ	0xFF8
  9108                           tblptrh	equ	0xFF7
  9109                           tblptrl	equ	0xFF6
  9110                           tablat	equ	0xFF5
  9111                           prodh	equ	0xFF4
  9112                           prodl	equ	0xFF3
  9113                           intcon2	equ	0xFF1
  9114                           postinc0	equ	0xFEE
  9115                           wreg	equ	0xFE8
  9116                           postdec1	equ	0xFE5
  9117                           fsr1l	equ	0xFE1
  9118                           indf2	equ	0xFDF
  9119                           postinc2	equ	0xFDE
  9120                           fsr2h	equ	0xFDA
  9121                           fsr2l	equ	0xFD9
  9122                           status	equ	0xFD8
  9123                           
  9124 ;; *************** function ___awmod *****************
  9125 ;; Defined at:
  9126 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  9127 ;; Parameters:    Size  Location     Type
  9128 ;;  dividend        2    0[COMRAM] int 
  9129 ;;  divisor         2    2[COMRAM] int 
  9130 ;; Auto vars:     Size  Location     Type
  9131 ;;  sign            1    5[COMRAM] unsigned char 
  9132 ;;  counter         1    4[COMRAM] unsigned char 
  9133 ;; Return value:  Size  Location     Type
  9134 ;;                  2    0[COMRAM] int 
  9135 ;; Registers used:
  9136 ;;		wreg, status,2, status,0
  9137 ;; Tracked objects:
  9138 ;;		On entry : 0/0
  9139 ;;		On exit  : 0/0
  9140 ;;		Unchanged: 0/0
  9141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9142 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9143 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9145 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9146 ;;Total ram usage:        6 bytes
  9147 ;; Hardware stack levels used:    1
  9148 ;; This function calls:
  9149 ;;		Nothing
  9150 ;; This function is called by:
  9151 ;;		_update_LCD_count
  9152 ;;		_update_LCD_PED_Count
  9153 ;; This function uses a non-reentrant model
  9154 ;;
  9155                           
  9156                           	psect	text49
  9157  00E104                     __ptext49:
  9158                           	opt stack 0
  9159  00E104                     ___awmod:
  9160                           	opt stack 27
  9161                           
  9162                           ;incstack = 0
  9163  00E104  0E00               	movlw	0
  9164  00E106  6E06               	movwf	___awmod@sign,c
  9165  00E108  AE02               	btfss	___awmod@dividend+1,7,c
  9166  00E10A  D007               	goto	l3027
  9167  00E10C  6C01               	negf	___awmod@dividend,c
  9168  00E10E  1E02               	comf	___awmod@dividend+1,f,c
  9169  00E110  B0D8               	btfsc	status,0,c
  9170  00E112  2A02               	incf	___awmod@dividend+1,f,c
  9171  00E114  0E01               	movlw	1
  9172  00E116  6E06               	movwf	___awmod@sign,c
  9173  00E118  D000               	goto	l3027
  9174  00E11A                     l3027:
  9175  00E11A  AE04               	btfss	___awmod@divisor+1,7,c
  9176  00E11C  D005               	goto	l3031
  9177  00E11E  6C03               	negf	___awmod@divisor,c
  9178  00E120  1E04               	comf	___awmod@divisor+1,f,c
  9179  00E122  B0D8               	btfsc	status,0,c
  9180  00E124  2A04               	incf	___awmod@divisor+1,f,c
  9181  00E126  D000               	goto	l3031
  9182  00E128                     l3031:
  9183  00E128  5003               	movf	___awmod@divisor,w,c
  9184  00E12A  1004               	iorwf	___awmod@divisor+1,w,c
  9185  00E12C  B4D8               	btfsc	status,2,c
  9186  00E12E  D01D               	goto	l3047
  9187  00E130  0E01               	movlw	1
  9188  00E132  6E05               	movwf	___awmod@counter,c
  9189  00E134  D005               	goto	l3037
  9190  00E136                     l3035:
  9191  00E136  90D8               	bcf	status,0,c
  9192  00E138  3603               	rlcf	___awmod@divisor,f,c
  9193  00E13A  3604               	rlcf	___awmod@divisor+1,f,c
  9194  00E13C  2A05               	incf	___awmod@counter,f,c
  9195  00E13E  D000               	goto	l3037
  9196  00E140                     l3037:
  9197  00E140  BE04               	btfsc	___awmod@divisor+1,7,c
  9198  00E142  D002               	goto	l3039
  9199  00E144  D7F8               	goto	l3035
  9200  00E146  D000               	goto	l3039
  9201  00E148                     l3039:
  9202  00E148  5003               	movf	___awmod@divisor,w,c
  9203  00E14A  5C01               	subwf	___awmod@dividend,w,c
  9204  00E14C  5004               	movf	___awmod@divisor+1,w,c
  9205  00E14E  5802               	subwfb	___awmod@dividend+1,w,c
  9206  00E150  A0D8               	btfss	status,0,c
  9207  00E152  D005               	goto	l3043
  9208  00E154  5003               	movf	___awmod@divisor,w,c
  9209  00E156  5E01               	subwf	___awmod@dividend,f,c
  9210  00E158  5004               	movf	___awmod@divisor+1,w,c
  9211  00E15A  5A02               	subwfb	___awmod@dividend+1,f,c
  9212  00E15C  D000               	goto	l3043
  9213  00E15E                     l3043:
  9214  00E15E  90D8               	bcf	status,0,c
  9215  00E160  3204               	rrcf	___awmod@divisor+1,f,c
  9216  00E162  3203               	rrcf	___awmod@divisor,f,c
  9217  00E164  2E05               	decfsz	___awmod@counter,f,c
  9218  00E166  D7F0               	goto	l3039
  9219  00E168  D000               	goto	l3047
  9220  00E16A                     l3047:
  9221  00E16A  5006               	movf	___awmod@sign,w,c
  9222  00E16C  B4D8               	btfsc	status,2,c
  9223  00E16E  D005               	goto	l3051
  9224  00E170  6C01               	negf	___awmod@dividend,c
  9225  00E172  1E02               	comf	___awmod@dividend+1,f,c
  9226  00E174  B0D8               	btfsc	status,0,c
  9227  00E176  2A02               	incf	___awmod@dividend+1,f,c
  9228  00E178  D000               	goto	l3051
  9229  00E17A                     l3051:
  9230  00E17A  C001  F001         	movff	___awmod@dividend,?___awmod
  9231  00E17E  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  9232  00E182  D000               	goto	l734
  9233  00E184                     l734:
  9234  00E184  0012               	return		;funcret
  9235  00E186                     __end_of___awmod:
  9236                           	opt stack 0
  9237                           tblptru	equ	0xFF8
  9238                           tblptrh	equ	0xFF7
  9239                           tblptrl	equ	0xFF6
  9240                           tablat	equ	0xFF5
  9241                           prodh	equ	0xFF4
  9242                           prodl	equ	0xFF3
  9243                           intcon2	equ	0xFF1
  9244                           postinc0	equ	0xFEE
  9245                           wreg	equ	0xFE8
  9246                           postdec1	equ	0xFE5
  9247                           fsr1l	equ	0xFE1
  9248                           indf2	equ	0xFDF
  9249                           postinc2	equ	0xFDE
  9250                           fsr2h	equ	0xFDA
  9251                           fsr2l	equ	0xFD9
  9252                           status	equ	0xFD8
  9253                           
  9254 ;; *************** function ___awdiv *****************
  9255 ;; Defined at:
  9256 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  9257 ;; Parameters:    Size  Location     Type
  9258 ;;  dividend        2    0[COMRAM] int 
  9259 ;;  divisor         2    2[COMRAM] int 
  9260 ;; Auto vars:     Size  Location     Type
  9261 ;;  quotient        2    6[COMRAM] int 
  9262 ;;  sign            1    5[COMRAM] unsigned char 
  9263 ;;  counter         1    4[COMRAM] unsigned char 
  9264 ;; Return value:  Size  Location     Type
  9265 ;;                  2    0[COMRAM] int 
  9266 ;; Registers used:
  9267 ;;		wreg, status,2, status,0
  9268 ;; Tracked objects:
  9269 ;;		On entry : 0/0
  9270 ;;		On exit  : 0/0
  9271 ;;		Unchanged: 0/0
  9272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9273 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9274 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9276 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9277 ;;Total ram usage:        8 bytes
  9278 ;; Hardware stack levels used:    1
  9279 ;; This function calls:
  9280 ;;		Nothing
  9281 ;; This function is called by:
  9282 ;;		_update_LCD_count
  9283 ;;		_update_LCD_PED_Count
  9284 ;; This function uses a non-reentrant model
  9285 ;;
  9286                           
  9287                           	psect	text50
  9288  00E318                     __ptext50:
  9289                           	opt stack 0
  9290  00E318                     ___awdiv:
  9291                           	opt stack 27
  9292                           
  9293                           ;incstack = 0
  9294  00E318  0E00               	movlw	0
  9295  00E31A  6E06               	movwf	___awdiv@sign,c
  9296  00E31C  AE04               	btfss	___awdiv@divisor+1,7,c
  9297  00E31E  D007               	goto	l2983
  9298  00E320  6C03               	negf	___awdiv@divisor,c
  9299  00E322  1E04               	comf	___awdiv@divisor+1,f,c
  9300  00E324  B0D8               	btfsc	status,0,c
  9301  00E326  2A04               	incf	___awdiv@divisor+1,f,c
  9302  00E328  0E01               	movlw	1
  9303  00E32A  6E06               	movwf	___awdiv@sign,c
  9304  00E32C  D000               	goto	l2983
  9305  00E32E                     l2983:
  9306  00E32E  AE02               	btfss	___awdiv@dividend+1,7,c
  9307  00E330  D007               	goto	l2989
  9308  00E332  6C01               	negf	___awdiv@dividend,c
  9309  00E334  1E02               	comf	___awdiv@dividend+1,f,c
  9310  00E336  B0D8               	btfsc	status,0,c
  9311  00E338  2A02               	incf	___awdiv@dividend+1,f,c
  9312  00E33A  0E01               	movlw	1
  9313  00E33C  1A06               	xorwf	___awdiv@sign,f,c
  9314  00E33E  D000               	goto	l2989
  9315  00E340                     l2989:
  9316  00E340  0E00               	movlw	0
  9317  00E342  6E08               	movwf	___awdiv@quotient+1,c
  9318  00E344  0E00               	movlw	0
  9319  00E346  6E07               	movwf	___awdiv@quotient,c
  9320  00E348  5003               	movf	___awdiv@divisor,w,c
  9321  00E34A  1004               	iorwf	___awdiv@divisor+1,w,c
  9322  00E34C  B4D8               	btfsc	status,2,c
  9323  00E34E  D021               	goto	l3011
  9324  00E350  0E01               	movlw	1
  9325  00E352  6E05               	movwf	___awdiv@counter,c
  9326  00E354  D005               	goto	l2997
  9327  00E356                     l2995:
  9328  00E356  90D8               	bcf	status,0,c
  9329  00E358  3603               	rlcf	___awdiv@divisor,f,c
  9330  00E35A  3604               	rlcf	___awdiv@divisor+1,f,c
  9331  00E35C  2A05               	incf	___awdiv@counter,f,c
  9332  00E35E  D000               	goto	l2997
  9333  00E360                     l2997:
  9334  00E360  BE04               	btfsc	___awdiv@divisor+1,7,c
  9335  00E362  D002               	goto	l2999
  9336  00E364  D7F8               	goto	l2995
  9337  00E366  D000               	goto	l2999
  9338  00E368                     l2999:
  9339  00E368  90D8               	bcf	status,0,c
  9340  00E36A  3607               	rlcf	___awdiv@quotient,f,c
  9341  00E36C  3608               	rlcf	___awdiv@quotient+1,f,c
  9342  00E36E  5003               	movf	___awdiv@divisor,w,c
  9343  00E370  5C01               	subwf	___awdiv@dividend,w,c
  9344  00E372  5004               	movf	___awdiv@divisor+1,w,c
  9345  00E374  5802               	subwfb	___awdiv@dividend+1,w,c
  9346  00E376  A0D8               	btfss	status,0,c
  9347  00E378  D006               	goto	l3007
  9348  00E37A  5003               	movf	___awdiv@divisor,w,c
  9349  00E37C  5E01               	subwf	___awdiv@dividend,f,c
  9350  00E37E  5004               	movf	___awdiv@divisor+1,w,c
  9351  00E380  5A02               	subwfb	___awdiv@dividend+1,f,c
  9352  00E382  8007               	bsf	___awdiv@quotient,0,c
  9353  00E384  D000               	goto	l3007
  9354  00E386                     l3007:
  9355  00E386  90D8               	bcf	status,0,c
  9356  00E388  3204               	rrcf	___awdiv@divisor+1,f,c
  9357  00E38A  3203               	rrcf	___awdiv@divisor,f,c
  9358  00E38C  2E05               	decfsz	___awdiv@counter,f,c
  9359  00E38E  D7EC               	goto	l2999
  9360  00E390  D000               	goto	l3011
  9361  00E392                     l3011:
  9362  00E392  5006               	movf	___awdiv@sign,w,c
  9363  00E394  B4D8               	btfsc	status,2,c
  9364  00E396  D005               	goto	l3015
  9365  00E398  6C07               	negf	___awdiv@quotient,c
  9366  00E39A  1E08               	comf	___awdiv@quotient+1,f,c
  9367  00E39C  B0D8               	btfsc	status,0,c
  9368  00E39E  2A08               	incf	___awdiv@quotient+1,f,c
  9369  00E3A0  D000               	goto	l3015
  9370  00E3A2                     l3015:
  9371  00E3A2  C007  F001         	movff	___awdiv@quotient,?___awdiv
  9372  00E3A6  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  9373  00E3AA  D000               	goto	l721
  9374  00E3AC                     l721:
  9375  00E3AC  0012               	return		;funcret
  9376  00E3AE                     __end_of___awdiv:
  9377                           	opt stack 0
  9378                           tblptru	equ	0xFF8
  9379                           tblptrh	equ	0xFF7
  9380                           tblptrl	equ	0xFF6
  9381                           tablat	equ	0xFF5
  9382                           prodh	equ	0xFF4
  9383                           prodl	equ	0xFF3
  9384                           intcon2	equ	0xFF1
  9385                           postinc0	equ	0xFEE
  9386                           wreg	equ	0xFE8
  9387                           postdec1	equ	0xFE5
  9388                           fsr1l	equ	0xFE1
  9389                           indf2	equ	0xFDF
  9390                           postinc2	equ	0xFDE
  9391                           fsr2h	equ	0xFDA
  9392                           fsr2l	equ	0xFD9
  9393                           status	equ	0xFD8
  9394                           
  9395 ;; *************** function _Wait_One_Second_With_Beep *****************
  9396 ;; Defined at:
  9397 ;;		line 1327 in file "Lab8.c"
  9398 ;; Parameters:    Size  Location     Type
  9399 ;;		None
  9400 ;; Auto vars:     Size  Location     Type
  9401 ;;		None
  9402 ;; Return value:  Size  Location     Type
  9403 ;;		None               void
  9404 ;; Registers used:
  9405 ;;		wreg, status,2, cstack
  9406 ;; Tracked objects:
  9407 ;;		On entry : 0/0
  9408 ;;		On exit  : 0/0
  9409 ;;		Unchanged: 0/0
  9410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9415 ;;Total ram usage:        0 bytes
  9416 ;; Hardware stack levels used:    1
  9417 ;; Hardware stack levels required when called:    1
  9418 ;; This function calls:
  9419 ;;		_Activate_Buzzer
  9420 ;;		_Deactivate_Buzzer
  9421 ;;		_Wait_Half_Second
  9422 ;; This function is called by:
  9423 ;;		_PED_Control
  9424 ;; This function uses a non-reentrant model
  9425 ;;
  9426                           
  9427                           	psect	text51
  9428  00DB28                     __ptext51:
  9429                           	opt stack 0
  9430  00DB28                     _Wait_One_Second_With_Beep:
  9431                           	opt stack 27
  9432                           
  9433                           ;Lab8.c: 1329: PORTDbits.RD7 = 1;
  9434                           
  9435                           ;incstack = 0
  9436  00DB28  8E83               	bsf	3971,7,c	;volatile
  9437                           
  9438                           ;Lab8.c: 1330: Activate_Buzzer();
  9439  00DB2A  EC6E  F06D         	call	_Activate_Buzzer	;wreg free
  9440                           
  9441                           ;Lab8.c: 1331: Wait_Half_Second();
  9442  00DB2E  ECAA  F06D         	call	_Wait_Half_Second	;wreg free
  9443                           
  9444                           ;Lab8.c: 1332: PORTDbits.RD7 = 0;
  9445  00DB32  9E83               	bcf	3971,7,c	;volatile
  9446                           
  9447                           ;Lab8.c: 1333: Deactivate_Buzzer ();
  9448  00DB34  EC55  F06D         	call	_Deactivate_Buzzer	;wreg free
  9449                           
  9450                           ;Lab8.c: 1334: Wait_Half_Second();
  9451  00DB38  ECAA  F06D         	call	_Wait_Half_Second	;wreg free
  9452  00DB3C  0012               	return		;funcret
  9453  00DB3E                     __end_of_Wait_One_Second_With_Beep:
  9454                           	opt stack 0
  9455                           tblptru	equ	0xFF8
  9456                           tblptrh	equ	0xFF7
  9457                           tblptrl	equ	0xFF6
  9458                           tablat	equ	0xFF5
  9459                           prodh	equ	0xFF4
  9460                           prodl	equ	0xFF3
  9461                           intcon2	equ	0xFF1
  9462                           postinc0	equ	0xFEE
  9463                           wreg	equ	0xFE8
  9464                           postdec1	equ	0xFE5
  9465                           fsr1l	equ	0xFE1
  9466                           indf2	equ	0xFDF
  9467                           postinc2	equ	0xFDE
  9468                           fsr2h	equ	0xFDA
  9469                           fsr2l	equ	0xFD9
  9470                           status	equ	0xFD8
  9471                           
  9472 ;; *************** function _Wait_Half_Second *****************
  9473 ;; Defined at:
  9474 ;;		line 1337 in file "Lab8.c"
  9475 ;; Parameters:    Size  Location     Type
  9476 ;;		None
  9477 ;; Auto vars:     Size  Location     Type
  9478 ;;		None
  9479 ;; Return value:  Size  Location     Type
  9480 ;;		None               void
  9481 ;; Registers used:
  9482 ;;		wreg, status,2
  9483 ;; Tracked objects:
  9484 ;;		On entry : 0/0
  9485 ;;		On exit  : 0/0
  9486 ;;		Unchanged: 0/0
  9487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9492 ;;Total ram usage:        0 bytes
  9493 ;; Hardware stack levels used:    1
  9494 ;; This function calls:
  9495 ;;		Nothing
  9496 ;; This function is called by:
  9497 ;;		_Wait_One_Second
  9498 ;;		_Wait_One_Second_With_Beep
  9499 ;;		_Old_Wait_One_Second
  9500 ;; This function uses a non-reentrant model
  9501 ;;
  9502                           
  9503                           	psect	text52
  9504  00DB54                     __ptext52:
  9505                           	opt stack 0
  9506  00DB54                     _Wait_Half_Second:
  9507                           	opt stack 27
  9508                           
  9509                           ;Lab8.c: 1339: T0CON = 0x03;
  9510                           
  9511                           ;incstack = 0
  9512  00DB54  0E03               	movlw	3
  9513  00DB56  6ED5               	movwf	4053,c	;volatile
  9514                           
  9515                           ;Lab8.c: 1340: TMR0L = 0xDB;
  9516  00DB58  0EDB               	movlw	219
  9517  00DB5A  6ED6               	movwf	4054,c	;volatile
  9518                           
  9519                           ;Lab8.c: 1341: TMR0H = 0x0B;
  9520  00DB5C  0E0B               	movlw	11
  9521  00DB5E  6ED7               	movwf	4055,c	;volatile
  9522                           
  9523                           ;Lab8.c: 1342: INTCONbits.TMR0IF = 0;
  9524  00DB60  94F2               	bcf	intcon,2,c	;volatile
  9525                           
  9526                           ;Lab8.c: 1343: T0CONbits.TMR0ON = 1;
  9527  00DB62  8ED5               	bsf	4053,7,c	;volatile
  9528                           
  9529                           ;Lab8.c: 1344: while (INTCONbits.TMR0IF == 0);
  9530  00DB64  D000               	goto	l452
  9531  00DB66                     l452:
  9532  00DB66  A4F2               	btfss	intcon,2,c	;volatile
  9533  00DB68  D7FE               	goto	l452
  9534                           
  9535                           ;Lab8.c: 1345: T0CONbits.TMR0ON = 0;
  9536  00DB6A  9ED5               	bcf	4053,7,c	;volatile
  9537  00DB6C  0012               	return		;funcret
  9538  00DB6E                     __end_of_Wait_Half_Second:
  9539                           	opt stack 0
  9540                           tblptru	equ	0xFF8
  9541                           tblptrh	equ	0xFF7
  9542                           tblptrl	equ	0xFF6
  9543                           tablat	equ	0xFF5
  9544                           prodh	equ	0xFF4
  9545                           prodl	equ	0xFF3
  9546                           intcon	equ	0xFF2
  9547                           intcon2	equ	0xFF1
  9548                           postinc0	equ	0xFEE
  9549                           wreg	equ	0xFE8
  9550                           postdec1	equ	0xFE5
  9551                           fsr1l	equ	0xFE1
  9552                           indf2	equ	0xFDF
  9553                           postinc2	equ	0xFDE
  9554                           fsr2h	equ	0xFDA
  9555                           fsr2l	equ	0xFD9
  9556                           status	equ	0xFD8
  9557                           
  9558 ;; *************** function _Deactivate_Buzzer *****************
  9559 ;; Defined at:
  9560 ;;		line 1188 in file "Lab8.c"
  9561 ;; Parameters:    Size  Location     Type
  9562 ;;		None
  9563 ;; Auto vars:     Size  Location     Type
  9564 ;;		None
  9565 ;; Return value:  Size  Location     Type
  9566 ;;		None               void
  9567 ;; Registers used:
  9568 ;;		wreg, status,2
  9569 ;; Tracked objects:
  9570 ;;		On entry : 0/0
  9571 ;;		On exit  : 0/0
  9572 ;;		Unchanged: 0/0
  9573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9578 ;;Total ram usage:        0 bytes
  9579 ;; Hardware stack levels used:    1
  9580 ;; This function calls:
  9581 ;;		Nothing
  9582 ;; This function is called by:
  9583 ;;		_Wait_One_Second_With_Beep
  9584 ;; This function uses a non-reentrant model
  9585 ;;
  9586                           
  9587                           	psect	text53
  9588  00DAAA                     __ptext53:
  9589                           	opt stack 0
  9590  00DAAA                     _Deactivate_Buzzer:
  9591                           	opt stack 27
  9592                           
  9593                           ;Lab8.c: 1190: CCP2CON = 0x0;
  9594                           
  9595                           ;incstack = 0
  9596  00DAAA  0E00               	movlw	0
  9597  00DAAC  6EBA               	movwf	4026,c	;volatile
  9598                           
  9599                           ;Lab8.c: 1191: PORTBbits.RB3 = 0;
  9600  00DAAE  9681               	bcf	3969,3,c	;volatile
  9601  00DAB0  0012               	return		;funcret
  9602  00DAB2                     __end_of_Deactivate_Buzzer:
  9603                           	opt stack 0
  9604                           tblptru	equ	0xFF8
  9605                           tblptrh	equ	0xFF7
  9606                           tblptrl	equ	0xFF6
  9607                           tablat	equ	0xFF5
  9608                           prodh	equ	0xFF4
  9609                           prodl	equ	0xFF3
  9610                           intcon	equ	0xFF2
  9611                           intcon2	equ	0xFF1
  9612                           postinc0	equ	0xFEE
  9613                           wreg	equ	0xFE8
  9614                           postdec1	equ	0xFE5
  9615                           fsr1l	equ	0xFE1
  9616                           indf2	equ	0xFDF
  9617                           postinc2	equ	0xFDE
  9618                           fsr2h	equ	0xFDA
  9619                           fsr2l	equ	0xFD9
  9620                           status	equ	0xFD8
  9621                           
  9622 ;; *************** function _Activate_Buzzer *****************
  9623 ;; Defined at:
  9624 ;;		line 1180 in file "Lab8.c"
  9625 ;; Parameters:    Size  Location     Type
  9626 ;;		None
  9627 ;; Auto vars:     Size  Location     Type
  9628 ;;		None
  9629 ;; Return value:  Size  Location     Type
  9630 ;;		None               void
  9631 ;; Registers used:
  9632 ;;		wreg, status,2
  9633 ;; Tracked objects:
  9634 ;;		On entry : 0/0
  9635 ;;		On exit  : 0/0
  9636 ;;		Unchanged: 0/0
  9637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9642 ;;Total ram usage:        0 bytes
  9643 ;; Hardware stack levels used:    1
  9644 ;; This function calls:
  9645 ;;		Nothing
  9646 ;; This function is called by:
  9647 ;;		_Wait_One_Second_With_Beep
  9648 ;; This function uses a non-reentrant model
  9649 ;;
  9650                           
  9651                           	psect	text54
  9652  00DADC                     __ptext54:
  9653                           	opt stack 0
  9654  00DADC                     _Activate_Buzzer:
  9655                           	opt stack 27
  9656                           
  9657                           ;Lab8.c: 1182: PR2 = 0b11111001;
  9658                           
  9659                           ;incstack = 0
  9660  00DADC  0EF9               	movlw	249
  9661  00DADE  6ECB               	movwf	4043,c	;volatile
  9662                           
  9663                           ;Lab8.c: 1183: T2CON = 0b00000101 ;
  9664  00DAE0  0E05               	movlw	5
  9665  00DAE2  6ECA               	movwf	4042,c	;volatile
  9666                           
  9667                           ;Lab8.c: 1184: CCPR2L = 0b01001010 ;
  9668  00DAE4  0E4A               	movlw	74
  9669  00DAE6  6EBB               	movwf	4027,c	;volatile
  9670                           
  9671                           ;Lab8.c: 1185: CCP2CON = 0b00111100 ;
  9672  00DAE8  0E3C               	movlw	60
  9673  00DAEA  6EBA               	movwf	4026,c	;volatile
  9674  00DAEC  0012               	return		;funcret
  9675  00DAEE                     __end_of_Activate_Buzzer:
  9676                           	opt stack 0
  9677                           tblptru	equ	0xFF8
  9678                           tblptrh	equ	0xFF7
  9679                           tblptrl	equ	0xFF6
  9680                           tablat	equ	0xFF5
  9681                           prodh	equ	0xFF4
  9682                           prodl	equ	0xFF3
  9683                           intcon	equ	0xFF2
  9684                           intcon2	equ	0xFF1
  9685                           postinc0	equ	0xFEE
  9686                           wreg	equ	0xFE8
  9687                           postdec1	equ	0xFE5
  9688                           fsr1l	equ	0xFE1
  9689                           indf2	equ	0xFDF
  9690                           postinc2	equ	0xFDE
  9691                           fsr2h	equ	0xFDA
  9692                           fsr2l	equ	0xFD9
  9693                           status	equ	0xFD8
  9694                           tblptru	equ	0xFF8
  9695                           tblptrh	equ	0xFF7
  9696                           tblptrl	equ	0xFF6
  9697                           tablat	equ	0xFF5
  9698                           prodh	equ	0xFF4
  9699                           prodl	equ	0xFF3
  9700                           intcon	equ	0xFF2
  9701                           intcon2	equ	0xFF1
  9702                           postinc0	equ	0xFEE
  9703                           wreg	equ	0xFE8
  9704                           postdec1	equ	0xFE5
  9705                           fsr1l	equ	0xFE1
  9706                           indf2	equ	0xFDF
  9707                           postinc2	equ	0xFDE
  9708                           fsr2h	equ	0xFDA
  9709                           fsr2l	equ	0xFD9
  9710                           status	equ	0xFD8
  9711                           
  9712                           	psect	rparam
  9713  0000                     tblptru	equ	0xFF8
  9714                           tblptrh	equ	0xFF7
  9715                           tblptrl	equ	0xFF6
  9716                           tablat	equ	0xFF5
  9717                           prodh	equ	0xFF4
  9718                           prodl	equ	0xFF3
  9719                           intcon	equ	0xFF2
  9720                           intcon2	equ	0xFF1
  9721                           postinc0	equ	0xFEE
  9722                           wreg	equ	0xFE8
  9723                           postdec1	equ	0xFE5
  9724                           fsr1l	equ	0xFE1
  9725                           indf2	equ	0xFDF
  9726                           postinc2	equ	0xFDE
  9727                           fsr2h	equ	0xFDA
  9728                           fsr2l	equ	0xFD9
  9729                           status	equ	0xFD8


Data Sizes:
    Strings     105
    Constant    475
    Data        35
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     64     122
    BANK0           128      0      31
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(COMRAM[3]), PED_EW_Count(COMRAM[3]), 
		 -> NSLT_Count(COMRAM[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(COMRAM[3]), PED_EW_Count(COMRAM[3]), 
		 -> NSLT_Count(COMRAM[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[21]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[7]), STR_8(CODE[12]), STR_7(CODE[7]), 
		 -> STR_6(CODE[10]), STR_5(CODE[2]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[6]), STR_1(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(COMRAM[3]), PED_EW_Count(COMRAM[3]), 
		 -> NSLT_Count(COMRAM[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _init_UART->_OpenUSART
    _Night_Mode->_Wait_N_Seconds
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Day_Mode->_PED_Control
    _Day_Mode->_Wait_N_Seconds
    _update_LCD_count->_drawtext
    _Wait_One_Second->_update_LCD_misc
    _update_LCD_misc->_drawtext
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _Set_NS_LT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EW_LT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  365760
                                             62 COMRAM     2     2      0
                           _Day_Mode
                           _Init_ADC
                  _Initialize_Screen
                         _Night_Mode
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                       _get_full_ADC
                            _init_IO
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  144027
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   51308
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    1660
                                             19 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    1585
                                              7 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    5386
                                             18 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1488
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    3402
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1611
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0      90
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1611
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1521
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1521
                                              6 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  165042
                        _PED_Control
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (2) _Wait_N_Seconds                                       2     2      0   65787
                                             60 COMRAM     2     2      0
                    _Wait_One_Second
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     2     1      1   20775
                                             57 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second                                      0     0      0   44922
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      3     3      0   24248
                                             57 COMRAM     3     3      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     348
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2201
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    1826
                                              8 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1629
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1559
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Set_NS_LT                                            1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW_LT                                            1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   19516
                                             50 COMRAM     3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8    9639
                                             42 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    3607
                                             18 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8    9026
                                             11 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          3     2      1   21015
                                             59 COMRAM     3     2      1
          _Wait_One_Second_With_Beep
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 2     1      1   20775
                                             57 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   19115
                                             40 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     143
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7    8408
                                             29 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3044
                                             18 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    2442
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    3367
                                              7 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3     814
                                              3 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     689
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     720
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     724
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second_With_Beep                            0     0      0       0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _Wait_One_Second_With_Beep
         _Activate_Buzzer
         _Deactivate_Buzzer
         _Wait_Half_Second
       _update_LCD_PED_Count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Init_ADC
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   ___awtoft
     ___ftpack
     ___wmul (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
   ___ftge
   ___wmul
   _get_full_ADC
   _init_IO
   _init_UART
     _OpenUSART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      1F       5       24.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     40      7A       1       96.1%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      99      34        0.0%
DATA                 0      0      99       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Mar 30 00:48:41 2021

                       drawCircle@f 001A                         drawCircle@r 0010  
                       drawCircle@x 001C                         drawCircle@y 001E  
         _Wait_One_Second_With_Beep DB28                         _SSPSTATbits 000FC7  
                      drawCircle@x0 000C                        drawCircle@y0 000E  
                      ___awdiv@sign 0006                 ___wmul@multiplicand 0003  
          update_LCD_color@Circle_Y 0035                                 l200 EF24  
                               l115 E026                                 l125 DB0E  
                               l231 E95A                                 l232 E97C  
                               l403 DDF4                                 l412 DE38  
                               l228 E97E                                 l405 DDF8  
                               l229 E8EA                                 l406 DDFE  
                               l414 DE3C                                 l175 E28E  
                               l191 EFCE                                 l239 F092  
                               l407 DE02                                 l415 DE42  
                               l431 E5C8                                 l408 DE24  
                               l416 DE46                                 l440 E4E8  
                               l520 E0DA                                 l169 DC82  
                               l193 EEA8                                 l257 EDB0  
                               l417 DE68                                 l433 E618  
                               l273 E316                                 l521 E0DC  
                               l522 E0E6                                 l435 E654  
                               l523 E0E8                                 l452 DB66  
                               l516 E0C0                                 l381 DBD2  
                               l525 E102                                 l390 DEAC  
                               l528 DBFA                                 l721 E3AC  
                               l481 E718                                 l385 DE7C  
                               l394 DEC0                                 l378 DBB2  
                               l474 E7DC                                 l467 F69A  
                               l387 DE80                                 l388 DE86  
                               l396 DEC4                                 l389 DE8A  
                               l397 DECA                                 l734 E184  
                               l398 DECE                                 l399 DEF0  
                               l911 EB0A                                 l746 DD22  
                               l836 E8A2                                 l908 EB3E  
                               l917 E442                                 l847 E87A  
                 ?_Wait_Half_Second 0001       update_LCD_PED_Count@direction 003B  
                               _PR2 000FCB                   _Deactivate_Buzzer DAAA  
                               _dir 0078                                 _nbr 0069  
                               _txt 006B                      drawFastHLine@w 0009  
                    drawFastHLine@x 0012                      drawFastHLine@y 0008  
                      ___awmod@sign 0006             __end_of_update_LCD_misc F33A  
                               wreg 000FE8                  ??_Wait_Half_Second 0001  
                ?_Deactivate_Buzzer 0001                     ??_fillRectangle 000D  
                      __CFG_LVP$OFF 000000             _TFT_GreenTab_Initialize DBFC  
                      ___ftdiv@cntr 0016                        ___ftdiv@sign 001B  
                      __CFG_WDT$OFF 000000                      drawFastVLine@h 0009  
                              l3011 E392                                l1085 DD60  
                              l3015 E3A2                                l3007 E386  
                              l3031 E128                                l3051 E17A  
                              l3043 E15E                                l3035 E136  
                              l3027 E11A                      drawFastVLine@x 0012  
                              l3037 E140                                l3205 E2FE  
                    drawFastVLine@y 0008                                l3039 E148  
                              l3047 E16A                                l3223 F5C4  
                              l3215 F41A                                l3207 E30C  
                              l3151 E8B4                                l3311 E0B8  
                              l3303 E0A6                                l3233 E6B0  
                              l3219 F4EE                                l3403 DC36  
                              l3323 E0D2                                l3315 E0C4  
                              l3307 E0B0                                l2613 EE96  
                              l3229 E65A                                l2701 E894  
                              l3173 E95E                                l3157 E922  
                              l2631 EF1C                                l2623 EEB4  
                              l3239 E708                                l3263 E774  
                              l3191 E2A0                                l3183 E978  
                              l2641 EF6E                                l2617 EEA4  
                              l2609 EE8A                                l2713 E9A8  
                              l3353 DE90                                l3361 DED4  
                              l3409 DC48                                l3177 E968  
                              l3169 E950                                l2563 E218  
                              l2627 EEE4                                l2619 EEAC  
                              l3259 E71E                                l3195 E2D8  
                              l3611 E4A6                                l2629 EF18  
                              l2661 DD2E                                l2725 E9EC  
                              l3381 DC8A                                l2813 EAE4  
                              l3269 E7CC                                l2567 E250  
                              l2647 EF9A                                l2639 EF46  
                              l2655 EFCA                                l2663 DD34  
                              l2751 ED96                                l2823 EB18  
                              l2585 DC64                                l2577 E276  
                              l2593 DEFC                                l2649 EFC2  
                              l2737 EA4A                                l2729 EA06  
                              l3393 DCA6                                l3385 DC94  
                              l3369 DE08                                l3377 DE4C  
                              l2681 E82A                                l2673 E7EE  
                              l3561 E604                                l2579 E284  
                              l2739 EA50                                l2771 EE64  
                              l2923 DCC0                                l2835 DCFE  
                              l2843 E3E0                                l2597 DF18  
                              l2917 F168                                l2925 DCCA  
                              l2685 E842                                l2677 E7FE  
                              l2853 E43E                                l2767 EE12  
                              l2695 E882                                l2687 E862  
                              l2679 E80A                                l2847 E412  
                              l3399 DC2C                                l2689 E86E  
                              l2793 EAA4                                l2961 F25A  
                              l2953 F23E                                l2787 EA7C  
                              l2963 F260                                l2789 EA96  
                              l2957 F24C                                l2949 F230  
                              l2983 E32E                                l2889 F078  
                              l3881 E58A                                l2995 E356  
                              l2997 E360                                l2989 E340  
                              l3877 E57E                                l2999 E368  
                              STR_1 FF96                                STR_2 FFE5  
                              STR_3 FFEB                                STR_4 FFEF  
                              STR_5 FFFD                                STR_6 FFCD  
                              STR_7 FFDE                                STR_8 FFC1  
                              STR_9 FFD7                                u1310 E246  
                              u2110 E2CE                                u2030 E8E2  
                              u2040 E918                                u1600 E9D0  
                              u1460 EF7C                                u2500 E578  
                              u1701 EA6E                                u2510 E57A  
                              u1721 EA8C                                u1830 F202  
                              u1840 F204                                _MODE 0067  
                              _RBPU 007F8F                                _TRMT 007D61  
               ??_Deactivate_Buzzer 0001                                _main E4EA  
                              _font FDBB                        ___ftpack@arg 0001  
                      ___ftpack@exp 0004                      ??_get_full_ADC 0003  
                              fsr2h 000FDA                                fsr1l 000FE1  
                              indf2 000FDF                                fsr2l 000FD9  
                              _wrap 0041                                _volt 0064  
                   drawFastHLine@hi 0010                     drawFastHLine@lo 0011  
          __end_of_update_LCD_color F69C            __end_of_update_LCD_count E7DE  
                __size_of_LCD_Reset 0012                                prodh 000FF4  
                              prodl 000FF3                                start 0000  
                   ??_drawFastHLine 000C                     ??_drawFastVLine 000C  
                      ___param_bank 000010                        _Act_Mode_Txt 0054  
         __end_of_Deactivate_Buzzer DAB2                     drawFastVLine@hi 0010  
                   drawFastVLine@lo 0011                         _SW_EWLT_Txt 005A  
                       _SW_MODE_Txt 005E                               ?_main 0001  
                   __end_of___awdiv E3AE                     drawCircle@ddF_x 0016  
                             STR_10 FFF7                     drawCircle@ddF_y 0018  
                             STR_11 FFF3                               STR_12 FFAC  
                             STR_13 FFFD                               STR_14 FFFB  
                   __end_of___awmod E186                     __end_of___ftdiv EB40  
                             _T0CON 000FD5                     ___awdiv@divisor 0003  
                             _T2CON 000FCA                               _T3CON 000FB1  
                   ___awdiv@counter 0005                     drawCircle@color 0012  
                             _RCSTA 000FAB                               _TMR0H 000FD7  
                             _TMR0L 000FD6                               _SPBRG 000FAF  
                             _TRISA 000F92                               _TRISB 000F93  
                             _TRISC 000F94                               _TRISD 000F95  
                             _TRISE 000F96                               _TXREG 000FAD  
                             _TXSTA 000FAC                               _Count 006D  
                      ?_PED_Control 003C                               _Rcmd1 EC32  
                             _Rcmd3 EB40                         _SW_NSLT_Txt 0060  
                     drawRect@color 001B                       ___awtoft@sign 000C  
                   __end_of_init_IO DB54                               _font2 FEBA  
             fillCircleHelper@ddF_x 0021               fillCircleHelper@ddF_y 0023  
                 ??_Wait_One_Second 003D                       ___ftpack@sign 0005  
             fillCircleHelper@delta 001B               fillCircleHelper@color 001D  
                    __CFG_BOREN$OFF 000000                               tablat 000FF5  
                             status 000FD8              ??_update_LCD_PED_Count 003B  
                  __end_of_Day_Mode E656                      _Wait_N_Seconds DC26  
                   write_data@data_ 0003                     __initialization DDA0  
                      __end_of_main E594                        __end_of_font FEBA  
                  __end_of_Init_ADC DABC                    __end_of_Rcmd2red DDA0  
                        _Night_Mode E444                              ??_main 003F  
                     __activetblptr 000002               Wait_N_Seconds@seconds 003D  
                 __end_of_LCD_Reset DB00                        _SW_EWPED_Txt 005C  
         ??_TFT_GreenTab_Initialize 000D                    ?_update_LCD_misc 0001  
                            ?_Rcmd1 0001                              ?_Rcmd3 0001  
                            _ADCON0 000FC2                              _ADCON1 000FC1  
                            _ADCON2 000FC0                              _ADRESH 000FC4  
                            _ADRESL 000FC3                              _CCPR2L 000FBB  
              PED_Control@direction 003D                    ___awdiv@dividend 0001  
                  __end_of___awtoft DD24                    __end_of___ftpack E8A4  
                            _OSCCON 000FD3                              _SPBRGH 000FB0  
                            _SSPBUF 000FC9              __end_of_Wait_N_Seconds DC54  
                      _SW_NSPED_Txt 0062                    __end_of_delay_ms E02E  
                            _Set_EW DDE2                              _Set_NS DE6A  
                  __end_of_fillRect DF3C                    __end_of_drawChar EFD0  
                  __end_of_drawRect E094                  __size_of_Set_EW_LT 0044  
                __size_of_OpenUSART 0070                              ___ftge E3AE  
                __size_of_Set_NS_LT 0044            __size_of_Activate_Buzzer 0012  
                            ___wmul DBD4                           ??___awdiv 0005  
         __size_of_fillCircleHelper 0138                    __end_of_drawtext EA5E  
                         ??___awmod 0005                           ??___ftdiv 0013  
                            _buffer 0080                              clear_0 DDA6  
                            clear_1 DDB2                    ___awdiv@quotient 0007  
                   ___awmod@divisor 0003          __size_of_Deactivate_Buzzer 0008  
                   ___awmod@counter 0005                        drawtext@size 0030  
                            _strcpy DCB6                              _strlen DD24  
              __end_of_get_full_ADC DBD4                           ??_init_IO 0001  
                      __pdataCOMRAM 0041  __size_of_Wait_One_Second_With_Beep 0016  
                       Set_EW@color 0036                        __mediumconst FDBA  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                    __end_of_spiwrite DB14  
                       Set_NS@color 0036                          __accesstop 0080  
           __end_of__initialization DDD8                          ___ftge@ff1 0001  
                        ___ftge@ff2 0004                     ?_Wait_N_Seconds 0001  
                     ___rparam_used 000001                          ___ftdiv@f1 000D  
                        ___ftdiv@f2 0010                          ___ftdiv@f3 0017  
                        ___awtoft@c 0009                       __end_of_Rcmd1 ED42  
                     __end_of_Rcmd3 EC32                      __pcstackCOMRAM 0001  
                     __end_of_font2 FF96                         ?_Night_Mode 0001  
                    drawPixel@color 0009              __size_of_write_command 0010  
                         ?_Day_Mode 0001          fillCircleHelper@cornername 0019  
                           ??_Rcmd1 000D                             ??_Rcmd3 000D  
                __size_of_drawPixel 0030                   __end_of_Set_EW_LT DE6A  
                 __end_of_OpenUSART E104                   __end_of_Set_NS_LT DEF2  
              __size_of_PED_Control 0032                          __pbssBANK0 0080  
                         ?_Init_ADC 0001                           ?_Rcmd2red 0001  
                __size_of_init_UART 0014           __size_of_Wait_Half_Second 001A  
                   spiwrite@spidata 0002                   ?_update_LCD_color 0033  
                 ?_update_LCD_count 003A                             ?_Set_EW 0001  
                           ?_Set_NS 0001                  __CFG_CCP2MX$PORTBE 000000  
                ??_update_LCD_color 0034                  ??_update_LCD_count 003B  
                           ?___ftge 0001                             ?___wmul 0001  
            __size_of_setAddrWindow 004E                             _CCP2CON 000FBA  
         update_LCD_PED_Count@count 003A                           ?___awtoft 0009  
                         ?___ftpack 0001                     _Wait_One_Second E186  
                        _fillCircle DF8A                             ?_strcpy 0001  
                           ?_strlen 0001                   ??_Activate_Buzzer 0001  
                        _fillScreen DB6E                          _drawCircle EFD0  
                        ??_Day_Mode 003F                           ?_delay_ms 0007  
                         ?_fillRect 0013           update_LCD_count@direction 003B  
                         ?_drawChar 001E                             _SSPCON1 000FC6  
                         ?_drawRect 0013                             _SSPSTAT 000FC7  
             __end_of_fillRectangle E980                           ?_drawtext 0029  
                           _SW_EWLT 0071                             _SW_MODE 0073  
                        ??_Init_ADC 0001                             _SW_NSLT 0074  
                        ??_Rcmd2red 0004                 __size_of_Night_Mode 00A6  
                     _write_command DABC                             __Hparam 0000  
                           __Lparam 0000                     __size_of_Set_EW 0044  
                   __size_of_Set_NS 0044               __end_of_drawFastHLine E318  
                 __end_of_drawPixel DC84               __end_of_drawFastVLine E290  
                  _fillCircleHelper ED42                     __size_of___ftge 0096  
                           ___awdiv E318                             ___awmod E104  
                           ___ftdiv EA5E                     __size_of___wmul 0028  
             __size_of_get_full_ADC 0026                           ?_spiwrite 0001  
                           __pcinit DDA0                          ??___awtoft 000C  
                        ??___ftpack 0006                             __ramtop 1000  
                           __ptext0 E4EA                             __ptext1 DB14  
                           __ptext2 E094                             __ptext3 DB3E  
                           __ptext4 E444                             __ptext5 F69C  
                           __ptext6 DB6E                             __ptext7 E8A4  
                           __ptext8 E02E                             __ptext9 E290  
                 __end_of_init_UART DB28                           _T0CONbits 000FD5  
                   __size_of_strcpy 0032                     __size_of_strlen 003E  
                           _init_IO DB3E                           _T3CONbits 000FB1  
                  ___awmod@dividend 0001                          ??_delay_ms 0009  
                     drawtext@_text 002A                       drawtext@color 002C  
                        ??_fillRect 0018                          ??_drawChar 0025  
                         _LCD_Reset DAEE                          ??_drawRect 001D  
                     _setAddrWindow DF3C                  drawFastHLine@color 000A  
                        delay_ms@ms 0007                end_of_initialization DDD8  
                        ??_drawtext 0031                      ?_write_command 0001  
                     __Lmediumconst FDBA                           _PED_Count 0070  
                      _get_full_ADC DBAE                        PED_Control@i 003E  
     __size_of_update_LCD_PED_Count 00C4             __end_of_Wait_One_Second E208  
                         _RCSTAbits 000FAB                             postdec1 000FE5  
                           postinc0 000FEE                             postinc2 000FDE  
                        ??_spiwrite 0001                             strlen@s 0001  
                   fillCircle@color 0031                         ?_fillCircle 002B  
                         _PORTAbits 000F80                    drawtext@cursor_x 0039  
                  drawtext@cursor_y 0038                           _PORTBbits 000F81  
                         _PORTCbits 000F82                           _PORTDbits 000F83  
                         _PORTEbits 000F84                         ?_fillScreen 0014  
                       ?_drawCircle 000C                          drawChar@bg 0022  
                         _TRISCbits 000F94                      ?_setAddrWindow 0004  
                        ?_LCD_Reset 0001                    ??_Wait_N_Seconds 003D  
                  drawtext@textsize 0033            __size_of_update_LCD_misc 01BC  
                        drawPixel@x 000B                          drawPixel@y 0008  
                  _Wait_Half_Second DB54                         ___ftdiv@exp 001A  
                         _TXSTAbits 000FAC                  PED_Control@Num_Sec 003C  
                get_full_ADC@result 0005                      __end_of_Set_EW DE26  
                    __end_of_Set_NS DEAE                      __end_of___ftge E444  
                    __end_of___wmul DBFC                       delay_ms@count 000B  
                        _write_data DACC                       __pidataCOMRAM DB8B  
                      ??_Night_Mode 003F            ?_TFT_GreenTab_Initialize 0001  
                        drawtext@bg 002E                      __end_of_strcpy DCE8  
                    __end_of_strlen DD62                 start_initialization DDA0  
                 __size_of_Day_Mode 00C2                     ??_write_command 0003  
                         _Set_EW_LT DE26                           _OpenUSART E094  
                         _Set_NS_LT DEAE                 __size_of_fillCircle 0052  
                  __CFG_OSC$INTIO67 000000                   __size_of_Init_ADC 000A  
                __end_of_Night_Mode E4EA                   __size_of_Rcmd2red 003E  
               __size_of_fillScreen 001C                     Wait_N_Seconds@I 003E  
               __size_of_drawCircle 01AE                            ??_Set_EW 0036  
                          ??_Set_NS 0036                     _Activate_Buzzer DADC  
                  ?_Wait_One_Second 0001                            ??___ftge 0007  
                          ??___wmul 0005                   update_LCD_misc@ch 003C  
                   setAddrWindow@x0 0007                     setAddrWindow@x1 0005  
                   setAddrWindow@y0 0004                     setAddrWindow@y1 0006  
                          ??_strcpy 0005                            ??_strlen 0003  
                      _PED_EW_Count 004E           __size_of_update_LCD_color 0362  
         __size_of_update_LCD_count 00C4                   __size_of___awtoft 003C  
                 __size_of___ftpack 00C6                         __pbssCOMRAM 0064  
                     ??_PED_Control 003D                     ??_setAddrWindow 0007  
                      _PED_NS_Count 0051                         ??_LCD_Reset 000D  
          __end_of_fillCircleHelper EE7A                   __size_of_delay_ms 0052  
        ?_Wait_One_Second_With_Beep 0001                   __size_of_fillRect 004A  
                 __size_of_drawChar 0156                          ?_Set_EW_LT 0001  
                        ?_OpenUSART 0001                   __size_of_drawRect 0066  
                        ?_Set_NS_LT 0001                   __size_of_drawtext 00DE  
                 ??_update_LCD_misc 003A     __end_of_TFT_GreenTab_Initialize DC26  
                     __pmediumconst FDBA                            ?___awdiv 0001  
                          ?___awmod 0001                            ?___ftdiv 000D  
                         __tft_type 0076                           _direction 0079  
                drawFastVLine@color 000A                         ?_write_data 0001  
                         _drawPixel DC54                   __size_of_spiwrite 0014  
                          ?_init_IO 0001                   _Initialize_Screen F69C  
                    __size_of_Rcmd1 0110                      __size_of_Rcmd3 00F2  
                         _init_UART DB14                  ?_Initialize_Screen 0001  
                          _FLASHING 006E   __end_of_Wait_One_Second_With_Beep DB3E  
               __end_of_PED_Control DCB6             __end_of_Activate_Buzzer DAEE  
                    ___wmul@product 0005                 ??_Initialize_Screen 003A  
                          _PIE1bits 000F9D                            _PIR1bits 000F9E  
                          _PIR2bits 000FA1                            _EW_Count 0045  
                         fillRect@h 0015                           fillRect@i 001C  
                         fillRect@w 0014                           fillRect@x 001B  
                         fillRect@y 0013                           drawChar@c 001F  
                         drawChar@i 0028                           drawChar@j 0027  
                      ??_fillCircle 0033                           drawChar@x 0026  
                         drawChar@y 001E                          ?_drawPixel 0008  
            __size_of_fillRectangle 00DC                            _NS_Count 004B  
                        _ADCON0bits 000FC2            __end_of_Wait_Half_Second DB6E  
                 ___wmul@multiplier 0001           __end_of_Initialize_Screen FDBA  
                      ??_fillScreen 0016                           drawRect@h 0019  
                         drawRect@w 0017                           drawRect@x 0013  
                         drawRect@y 0015                       _FlashingR_Txt 0056  
                     _FlashingS_Txt 0058                        ??_drawCircle 0014  
      __end_of_update_LCD_PED_Count E71A                           main@nStep 003F  
                          _SW_EWPED 0072               update_LCD_color@color 0033  
                          _Day_Mode E594                            _SW_NSPED 0075  
         update_LCD_color@direction 0034                          ?_init_UART 0001  
            __size_of_drawFastHLine 0088                           copy_data0 DDCC  
                         drawtext@i 0036              __size_of_drawFastVLine 0088  
                         drawtext@x 0035                           drawtext@y 0029  
                          _Init_ADC DAB2                   write_command@cmd_ 0003  
                       ??_Set_EW_LT 0036                         ??_OpenUSART 0003  
                       ??_Set_NS_LT 0036                            _Rcmd2red DD62  
               __size_of_write_data 0010                     OpenUSART@config 0003  
                __end_of_fillCircle DFDC                            __Hrparam 0000  
                __end_of_fillScreen DB8A               update_LCD_count@count 003A  
                          __Lrparam 0000                  __end_of_drawCircle F17E  
                  __size_of___awdiv 0096                    __size_of___awmod 0082  
                  __size_of___ftdiv 00E2                            ___awtoft DCE8  
                          ___ftpack E7DE                    _update_LCD_color F33A  
                  _update_LCD_count E71A                    __size_of_init_IO 0016  
                       _PED_Control DC84                            _delay_ms DFDC  
                          __ptext10 DBFC                            __ptext11 EB40  
                          __ptext20 E186                            __ptext12 DD62  
                          __ptext21 F17E                            __ptext13 EC32  
                          __ptext30 DE26                            __ptext22 DBAE  
                          __ptext14 DAEE                            __ptext31 DDE2  
                          __ptext23 E3AE                            __ptext15 DFDC  
                          __ptext40 EE7A                            __ptext32 F33A  
                          __ptext24 EA5E                            __ptext16 DAB2  
                          __ptext41 DEF2                            __ptext33 DF8A  
                          __ptext25 DCE8                            __ptext17 E594  
                          __ptext50 E318                            __ptext42 E208  
                          __ptext34 ED42                            __ptext26 E7DE  
                          __ptext18 DC26                            __ptext51 DB28  
                          __ptext43 DC54                            __ptext35 EFD0  
                          __ptext27 DCB6                            __ptext19 E71A  
                          __ptext52 DB54                            __ptext44 DF3C  
                          __ptext36 DC84                            __ptext28 DEAE  
                          __ptext53 DAAA                            __ptext45 DACC  
                          __ptext37 E656                            __ptext29 DE6A  
                          __ptext54 DADC                            __ptext46 DABC  
                          __ptext38 E980                            __ptext47 DB00  
                          __ptext39 DD24                            __ptext48 DBD4  
                          __ptext49 E104                            _fillRect DEF2  
                          _drawChar EE7A                            _drawRect E02E  
  __size_of_TFT_GreenTab_Initialize 002A                    _FLASHING_REQUEST 006F  
                          _colstart 0077                            _drawtext E980  
                        strcpy@from 0003                       _fillRectangle E8A4  
                  ?_Activate_Buzzer 0001                       __size_of_main 00AA  
                   fillRectangle@hi 0011                     fillRectangle@lo 0012  
                     _drawFastHLine E290                      Set_EW_LT@color 0036  
                     _drawFastVLine E208                            _spiwrite DB00  
                       ??_drawPixel 000B                            _rowstart 007A  
                fillCircleHelper@x0 0013                  fillCircleHelper@y0 0015  
        __size_of_Initialize_Screen 071E                          _INTCONbits 000FF2  
                    OpenUSART@spbrg 0001                         ??_init_UART 0004  
                        _EWLT_Count 0042                   ?_fillCircleHelper 0013  
                         spiwrite@x 0001         ??_Wait_One_Second_With_Beep 0001  
                   _update_LCD_misc F17E                      ?_fillRectangle 0008  
                ??_fillCircleHelper 001F               __end_of_write_command DACC  
                   fillScreen@color 0014                update_LCD_misc@nStep 003A  
              _update_LCD_PED_Count E656             __size_of_Wait_N_Seconds 002E  
                      fillCircle@x0 002B                        fillCircle@y0 002D  
                    ?_drawFastHLine 0008                      fillRectangle@h 000A  
                    fillRectangle@w 0009                      fillRectangle@x 0013  
                    fillRectangle@y 0008                      ?_drawFastVLine 0008  
                 fillCircleHelper@f 0025                   fillCircleHelper@r 0017  
                 fillCircleHelper@x 0027                   fillCircleHelper@y 0029  
                      ??_write_data 0003                       fillRect@color 0016  
          __size_of_Wait_One_Second 0082                            strcpy@cp 0005  
                          strlen@cp 0005                            strcpy@to 0001  
                        _NSLT_Count 0048                         fillCircle@r 002F  
             __end_of_setAddrWindow DF8A                  fillRectangle@color 000B  
                     drawChar@color 0020                  __end_of_write_data DADC  
                      drawChar@line 0025                      Set_NS_LT@color 0036  
                     ?_get_full_ADC 0001                        drawChar@size 0024  
             ?_update_LCD_PED_Count 003A  
